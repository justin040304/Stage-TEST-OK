
UART TT to STM interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080054ac  080054ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005554  08005554  00006554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005560  08005560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005564  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000068  080055cc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080055cc  0000733c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf39  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  00013fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00015fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  00016a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cac  00000000  00000000  00017257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0f3  00000000  00000000  0003bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b6d  00000000  00000000  00048ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  00132ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00135ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005494 	.word	0x08005494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005494 	.word	0x08005494

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (huart->Instance == USART1)	//current UART
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a19      	ldr	r2, [pc, #100]	@ (80005e4 <HAL_UART_RxCpltCallback+0x74>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d12b      	bne.n	80005da <HAL_UART_RxCpltCallback+0x6a>
		{
		if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}	//clear Rx_Buffer before receiving new data
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <HAL_UART_RxCpltCallback+0x78>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10c      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x34>
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	e006      	b.n	800059e <HAL_UART_RxCpltCallback+0x2e>
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 8000594:	2100      	movs	r1, #0
 8000596:	54d1      	strb	r1, [r2, r3]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b63      	cmp	r3, #99	@ 0x63
 80005a2:	d9f5      	bls.n	8000590 <HAL_UART_RxCpltCallback+0x20>

		if (Rx_data[0]!=13)	//if received data different from ascii 13 (enter)
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_UART_RxCpltCallback+0x80>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b0d      	cmp	r3, #13
 80005aa:	d00b      	beq.n	80005c4 <HAL_UART_RxCpltCallback+0x54>
			{
			Rx_Buffer[Rx_indx++]=Rx_data[0];	//add data to Rx_Buffer
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <HAL_UART_RxCpltCallback+0x78>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	b2d1      	uxtb	r1, r2
 80005b4:	4a0c      	ldr	r2, [pc, #48]	@ (80005e8 <HAL_UART_RxCpltCallback+0x78>)
 80005b6:	7011      	strb	r1, [r2, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <HAL_UART_RxCpltCallback+0x80>)
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <HAL_UART_RxCpltCallback+0x7c>)
 80005c0:	5499      	strb	r1, [r3, r2]
 80005c2:	e005      	b.n	80005d0 <HAL_UART_RxCpltCallback+0x60>
			}
		else			//if received data = 13
			{
			Rx_indx=0;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_UART_RxCpltCallback+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
			Transfer_cplt=1;//transfer complete, data is ready to read
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <HAL_UART_RxCpltCallback+0x84>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
			}

		HAL_UART_Receive_IT(&huart2, Rx_data, 1);	//activate UART receive interrupt every time
 80005d0:	2201      	movs	r2, #1
 80005d2:	4907      	ldr	r1, [pc, #28]	@ (80005f0 <HAL_UART_RxCpltCallback+0x80>)
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <HAL_UART_RxCpltCallback+0x88>)
 80005d6:	f002 fae7 	bl	8002ba8 <HAL_UART_Receive_IT>
		}

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40013800 	.word	0x40013800
 80005e8:	20000178 	.word	0x20000178
 80005ec:	20000180 	.word	0x20000180
 80005f0:	2000017c 	.word	0x2000017c
 80005f4:	200001e4 	.word	0x200001e4
 80005f8:	20000084 	.word	0x20000084

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fae8 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f856 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8d6 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f8a4 	bl	8000758 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello\r\nUART Example \r\n");
 8000610:	481d      	ldr	r0, [pc, #116]	@ (8000688 <main+0x8c>)
 8000612:	f003 ffb3 	bl	800457c <puts>
    printf("\n\n");
 8000616:	481d      	ldr	r0, [pc, #116]	@ (800068c <main+0x90>)
 8000618:	f003 ffb0 	bl	800457c <puts>

    HAL_UART_Receive_IT(&huart2, Rx_data, 1);	//activate uart rx interrupt avery time receiving 1 byte
 800061c:	2201      	movs	r2, #1
 800061e:	491c      	ldr	r1, [pc, #112]	@ (8000690 <main+0x94>)
 8000620:	481c      	ldr	r0, [pc, #112]	@ (8000694 <main+0x98>)
 8000622:	f002 fac1 	bl	8002ba8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = 0;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <main+0x9c>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	 		 if (Transfer_cplt != 0)
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <main+0xa0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d024      	beq.n	800067e <main+0x82>
	 			{

	 			    //HAL_UART_Transmit(&huart1, "t", 1, 1000);
	 				sprintf(buffer,"%s\r\n",Rx_Buffer);
 8000634:	4a1a      	ldr	r2, [pc, #104]	@ (80006a0 <main+0xa4>)
 8000636:	491b      	ldr	r1, [pc, #108]	@ (80006a4 <main+0xa8>)
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0xac>)
 800063a:	f003 ffa7 	bl	800458c <siprintf>
	 				len=strlen(buffer);
 800063e:	481a      	ldr	r0, [pc, #104]	@ (80006a8 <main+0xac>)
 8000640:	f7ff fdc6 	bl	80001d0 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <main+0xb0>)
 800064a:	601a      	str	r2, [r3, #0]
	 				HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <main+0xb0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	b29a      	uxth	r2, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	4914      	ldr	r1, [pc, #80]	@ (80006a8 <main+0xac>)
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <main+0x98>)
 800065a:	f002 fa1b 	bl	8002a94 <HAL_UART_Transmit>
	 				printf("\r\n %s", buffer);
 800065e:	4912      	ldr	r1, [pc, #72]	@ (80006a8 <main+0xac>)
 8000660:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <main+0xb4>)
 8000662:	f003 ff23 	bl	80044ac <iprintf>
	 				Transfer_cplt=0;		//reset transfer_complete variable
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <main+0xa0>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	 				HAL_Delay(500);
 800066c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000670:	f000 fb2c 	bl	8000ccc <HAL_Delay>

	 				i++;
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <main+0x9c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <main+0x9c>)
 800067c:	6013      	str	r3, [r2, #0]
	 			}

	 		  i = 1;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <main+0x9c>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
	  i = 0;
 8000684:	e7cf      	b.n	8000626 <main+0x2a>
 8000686:	bf00      	nop
 8000688:	080054ac 	.word	0x080054ac
 800068c:	080054c4 	.word	0x080054c4
 8000690:	2000017c 	.word	0x2000017c
 8000694:	20000084 	.word	0x20000084
 8000698:	2000010c 	.word	0x2000010c
 800069c:	200001e4 	.word	0x200001e4
 80006a0:	20000180 	.word	0x20000180
 80006a4:	080054c8 	.word	0x080054c8
 80006a8:	20000110 	.word	0x20000110
 80006ac:	20000174 	.word	0x20000174
 80006b0:	080054d0 	.word	0x080054d0

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	@ 0x58
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	@ 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f85a 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006da:	f000 fe7b 	bl	80013d4 <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e4:	f000 f8ce 	bl	8000884 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000702:	230a      	movs	r3, #10
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f000 feb2 	bl	8001480 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000722:	f000 f8af 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa7a 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 f89b 	bl	8000884 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3758      	adds	r7, #88	@ 0x58
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 f92c 	bl	80029f8 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f86d 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a24      	ldr	r2, [pc, #144]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <MX_GPIO_Init+0xc4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_GPIO_Init+0xc4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000836:	f000 fda7 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <MX_GPIO_Init+0xc8>)
 8000852:	f000 fbef 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000870:	f000 fbe0 	bl	8001034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000800 	.word	0x48000800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0ac      	sub	sp, #176	@ 0xb0
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2288      	movs	r2, #136	@ 0x88
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 ff3f 	bl	800477c <memset>
  if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <HAL_UART_MspInit+0xc0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d143      	bne.n	8000990 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fbb3 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000920:	f7ff ffb0 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <HAL_UART_MspInit+0xc4>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000928:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <HAL_UART_MspInit+0xc4>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_UART_MspInit+0xc4>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_MspInit+0xc4>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000940:	4a16      	ldr	r2, [pc, #88]	@ (800099c <HAL_UART_MspInit+0xc4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0xc4>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000954:	230c      	movs	r3, #12
 8000956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 fb5a 	bl	8001034 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2026      	movs	r0, #38	@ 0x26
 8000986:	f000 faa0 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800098a:	2026      	movs	r0, #38	@ 0x26
 800098c:	f000 fab9 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000990:	bf00      	nop
 8000992:	37b0      	adds	r7, #176	@ 0xb0
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f949 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f002 f91b 	bl	8002c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000084 	.word	0x20000084

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e00a      	b.n	8000a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a26:	f3af 8000 	nop.w
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	60ba      	str	r2, [r7, #8]
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf0      	blt.n	8000a26 <_read+0x12>
  }

  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e009      	b.n	8000a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf1      	blt.n	8000a60 <_write+0x12>
  }
  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_close>:

int _close(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aae:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_isatty>:

int _isatty(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f003 fe8a 	bl	8004838 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20018000 	.word	0x20018000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	200001e8 	.word	0x200001e8
 8000b58:	20000340 	.word	0x20000340

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fe49 	bl	8004844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fd23 	bl	80005fc <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bc4:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 8000bc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bcc:	2000033c 	.word	0x2000033c

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_Init+0x3c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <HAL_Init+0x3c>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f000 f962 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f80f 	bl	8000c14 <HAL_InitTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	e001      	b.n	8000c06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c02:	f7ff fe45 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d023      	beq.n	8000c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_InitTick+0x70>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f96d 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f937 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_InitTick+0x74>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200001ec 	.word	0x200001ec

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200001ec 	.word	0x200001ec

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	@ (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d008      	beq.n	8000f60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2204      	movs	r2, #4
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e022      	b.n	8000fa6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 020e 	bic.w	r2, r2, #14
 8000f6e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f84:	f003 021c 	and.w	r2, r3, #28
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d005      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2204      	movs	r2, #4
 8000fce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e029      	b.n	800102a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020e 	bic.w	r2, r2, #14
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f003 021c 	and.w	r2, r3, #28
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
    }
  }
  return status;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e17f      	b.n	8001344 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8171 	beq.w	800133e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d118      	bne.n	8001114 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ac 	beq.w	800133e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <HAL_GPIO_Init+0x330>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <HAL_GPIO_Init+0x330>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <HAL_GPIO_Init+0x330>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001368 <HAL_GPIO_Init+0x334>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x242>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x23e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	@ (8001370 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x23a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x236>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	@ (8001378 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x232>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	@ (800137c <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x22e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	@ (8001380 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x22a>
 800125a:	2306      	movs	r3, #6
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800125e:	2307      	movs	r3, #7
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001276:	2300      	movs	r3, #0
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001288:	4937      	ldr	r1, [pc, #220]	@ (8001368 <HAL_GPIO_Init+0x334>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001296:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <HAL_GPIO_Init+0x350>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ba:	4a32      	ldr	r2, [pc, #200]	@ (8001384 <HAL_GPIO_Init+0x350>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012c0:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <HAL_GPIO_Init+0x350>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <HAL_GPIO_Init+0x350>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <HAL_GPIO_Init+0x350>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800130e:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <HAL_GPIO_Init+0x350>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_GPIO_Init+0x350>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <HAL_GPIO_Init+0x350>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	f47f ae78 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	48000400 	.word	0x48000400
 8001370:	48000800 	.word	0x48000800
 8001374:	48000c00 	.word	0x48000c00
 8001378:	48001000 	.word	0x48001000
 800137c:	48001400 	.word	0x48001400
 8001380:	48001800 	.word	0x48001800
 8001384:	40010400 	.word	0x40010400

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000

080013d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e2:	d130      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e4:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f0:	d038      	beq.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2232      	movs	r2, #50	@ 0x32
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001418:	e002      	b.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3b01      	subs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142c:	d102      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x60>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f2      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001440:	d110      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e00f      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d007      	beq.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800145c:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001462:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40007000 	.word	0x40007000
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e3ca      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001492:	4b97      	ldr	r3, [pc, #604]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149c:	4b94      	ldr	r3, [pc, #592]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80e4 	beq.w	800167c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_RCC_OscConfig+0x4a>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	f040 808b 	bne.w	80015d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f040 8087 	bne.w	80015d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ca:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x62>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e3a2      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4b82      	ldr	r3, [pc, #520]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_RCC_OscConfig+0x7c>
 80014f2:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014fa:	e005      	b.n	8001508 <HAL_RCC_OscConfig+0x88>
 80014fc:	4b7c      	ldr	r3, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001508:	4293      	cmp	r3, r2
 800150a:	d223      	bcs.n	8001554 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fd55 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e383      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001520:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a72      	ldr	r2, [pc, #456]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	496d      	ldr	r1, [pc, #436]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	4b6c      	ldr	r3, [pc, #432]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	4968      	ldr	r1, [pc, #416]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
 8001552:	e025      	b.n	80015a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a65      	ldr	r2, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4960      	ldr	r1, [pc, #384]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	495b      	ldr	r1, [pc, #364]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fd15 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e343      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a0:	f000 fc4a 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	4950      	ldr	r1, [pc, #320]	@ (80016f4 <HAL_RCC_OscConfig+0x274>)
 80015b2:	5ccb      	ldrb	r3, [r1, r3]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	4a4e      	ldr	r2, [pc, #312]	@ (80016f8 <HAL_RCC_OscConfig+0x278>)
 80015be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c0:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb25 	bl	8000c14 <HAL_InitTick>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d052      	beq.n	800167a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	e327      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a42      	ldr	r2, [pc, #264]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb62 	bl	8000cb4 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f4:	f7ff fb5e 	bl	8000cb4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e310      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001606:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a36      	ldr	r2, [pc, #216]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4931      	ldr	r1, [pc, #196]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	492c      	ldr	r1, [pc, #176]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e01a      	b.n	800167c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001646:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a29      	ldr	r2, [pc, #164]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb2f 	bl	8000cb4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165a:	f7ff fb2b 	bl	8000cb4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e2dd      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x1da>
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d074      	beq.n	8001772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x21a>
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d10e      	bne.n	80016b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d10b      	bne.n	80016b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d064      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f0>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d160      	bne.n	8001770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e2ba      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x24a>
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e026      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d2:	d115      	bne.n	8001700 <HAL_RCC_OscConfig+0x280>
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a02      	ldr	r2, [pc, #8]	@ (80016f0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x298>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080054d8 	.word	0x080054d8
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004
 8001700:	4ba0      	ldr	r3, [pc, #640]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a9f      	ldr	r2, [pc, #636]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b9d      	ldr	r3, [pc, #628]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a9c      	ldr	r2, [pc, #624]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fac8 	bl	8000cb4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fac4 	bl	8000cb4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e276      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x2a8>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fab4 	bl	8000cb4 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fab0 	bl	8000cb4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e262      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x2d0>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d060      	beq.n	8001840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x310>
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d119      	bne.n	80017be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d116      	bne.n	80017be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	4b7c      	ldr	r3, [pc, #496]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x328>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e23f      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b76      	ldr	r3, [pc, #472]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	4973      	ldr	r1, [pc, #460]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017bc:	e040      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d023      	beq.n	800180e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fa6f 	bl	8000cb4 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fa6b 	bl	8000cb4 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e21d      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	495f      	ldr	r1, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a5c      	ldr	r2, [pc, #368]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fa4b 	bl	8000cb4 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fa47 	bl	8000cb4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1f9      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01c      	beq.n	800188e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001854:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185a:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fa26 	bl	8000cb4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fa22 	bl	8000cb4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1d4      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ef      	beq.n	800186c <HAL_RCC_OscConfig+0x3ec>
 800188c:	e01b      	b.n	80018c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	4a3b      	ldr	r2, [pc, #236]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fa09 	bl	8000cb4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fa05 	bl	8000cb4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1b7      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a6 	beq.w	8001a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10d      	bne.n	8001900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f0:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x508>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d118      	bne.n	800193e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <HAL_RCC_OscConfig+0x508>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_RCC_OscConfig+0x508>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001918:	f7ff f9cc 	bl	8000cb4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001920:	f7ff f9c8 	bl	8000cb4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e17a      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_RCC_OscConfig+0x508>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0x4d8>
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001956:	e029      	b.n	80019ac <HAL_RCC_OscConfig+0x52c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d115      	bne.n	800198c <HAL_RCC_OscConfig+0x50c>
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001966:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_RCC_OscConfig+0x504>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x52c>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	40007000 	.word	0x40007000
 800198c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001992:	4a9b      	ldr	r2, [pc, #620]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800199c:	4b98      	ldr	r3, [pc, #608]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	4a97      	ldr	r2, [pc, #604]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d016      	beq.n	80019e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff f97e 	bl	8000cb4 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff f97a 	bl	8000cb4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e12a      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ed      	beq.n	80019bc <HAL_RCC_OscConfig+0x53c>
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff f967 	bl	8000cb4 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff f963 	bl	8000cb4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e113      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a00:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ed      	bne.n	80019ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b7a      	ldr	r3, [pc, #488]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	4a79      	ldr	r2, [pc, #484]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80fe 	beq.w	8001c26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	f040 80d0 	bne.w	8001bd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a34:	4b72      	ldr	r3, [pc, #456]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d130      	bne.n	8001aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	3b01      	subs	r3, #1
 8001a54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d127      	bne.n	8001aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d11f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a74:	2a07      	cmp	r2, #7
 8001a76:	bf14      	ite	ne
 8001a78:	2201      	movne	r2, #1
 8001a7a:	2200      	moveq	r2, #0
 8001a7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d113      	bne.n	8001aaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d06e      	beq.n	8001b88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d069      	beq.n	8001b84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001abc:	4b50      	ldr	r3, [pc, #320]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0ad      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001acc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad8:	f7ff f8ec 	bl	8000cb4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8e8 	bl	8000cb4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e09a      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	4b43      	ldr	r3, [pc, #268]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	4b40      	ldr	r3, [pc, #256]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b40      	ldr	r3, [pc, #256]	@ (8001c04 <HAL_RCC_OscConfig+0x784>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b0e:	3a01      	subs	r2, #1
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b18:	0212      	lsls	r2, r2, #8
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b20:	0852      	lsrs	r2, r2, #1
 8001b22:	3a01      	subs	r2, #1
 8001b24:	0552      	lsls	r2, r2, #21
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b2c:	0852      	lsrs	r2, r2, #1
 8001b2e:	3a01      	subs	r2, #1
 8001b30:	0652      	lsls	r2, r2, #25
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b38:	0912      	lsrs	r2, r2, #4
 8001b3a:	0452      	lsls	r2, r2, #17
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	4930      	ldr	r1, [pc, #192]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b44:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2d      	ldr	r2, [pc, #180]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b50:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a2a      	ldr	r2, [pc, #168]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5c:	f7ff f8aa 	bl	8000cb4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f8a6 	bl	8000cb4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b82:	e050      	b.n	8001c26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e04f      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d148      	bne.n	8001c26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a16      	ldr	r2, [pc, #88]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bac:	f7ff f882 	bl	8000cb4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f87e 	bl	8000cb4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e030      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x734>
 8001bd2:	e028      	b.n	8001c26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d023      	beq.n	8001c22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <HAL_RCC_OscConfig+0x780>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff f865 	bl	8000cb4 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	e00c      	b.n	8001c08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f861 	bl	8000cb4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d905      	bls.n	8001c08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ec      	bne.n	8001bee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4905      	ldr	r1, [pc, #20]	@ (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_RCC_OscConfig+0x7b4>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e001      	b.n	8001c26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	feeefffc 	.word	0xfeeefffc

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0e7      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b75      	ldr	r3, [pc, #468]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b72      	ldr	r3, [pc, #456]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4970      	ldr	r1, [pc, #448]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cf      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b66      	ldr	r3, [pc, #408]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d908      	bls.n	8001caa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b63      	ldr	r3, [pc, #396]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4960      	ldr	r1, [pc, #384]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d04c      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0a6      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	4b54      	ldr	r3, [pc, #336]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e09a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cee:	4b4e      	ldr	r3, [pc, #312]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e08e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e086      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4943      	ldr	r1, [pc, #268]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7fe ffc8 	bl	8000cb4 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7fe ffc4 	bl	8000cb4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e06e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d208      	bcs.n	8001d7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	492b      	ldr	r1, [pc, #172]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d210      	bcs.n	8001dae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	4923      	ldr	r1, [pc, #140]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9c:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e036      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dba:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4918      	ldr	r1, [pc, #96]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4910      	ldr	r1, [pc, #64]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dec:	f000 f824 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	490b      	ldr	r1, [pc, #44]	@ (8001e2c <HAL_RCC_ClockConfig+0x1f4>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_RCC_ClockConfig+0x1fc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe feff 	bl	8000c14 <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	080054d8 	.word	0x080054d8
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x34>
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d121      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11e      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e78:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e94:	4a2b      	ldr	r2, [pc, #172]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d134      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xa6>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d003      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8001edc:	e005      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	617b      	str	r3, [r7, #20]
      break;
 8001ee8:	e002      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	617b      	str	r3, [r7, #20]
      break;
 8001eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	fb03 f202 	mul.w	r2, r3, r2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	0e5b      	lsrs	r3, r3, #25
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	3301      	adds	r3, #1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f30:	69bb      	ldr	r3, [r7, #24]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	080054f0 	.word	0x080054f0
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4904      	ldr	r1, [pc, #16]	@ (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080054e8 	.word	0x080054e8

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f98:	f7ff ffda 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4904      	ldr	r1, [pc, #16]	@ (8001fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080054e8 	.word	0x080054e8

08001fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd8:	f7ff f9ee 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 8001fdc:	6178      	str	r0, [r7, #20]
 8001fde:	e014      	b.n	800200a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fec:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff8:	f7ff f9de 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 8001ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d10b      	bne.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b80      	cmp	r3, #128	@ 0x80
 8002016:	d919      	bls.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2ba0      	cmp	r3, #160	@ 0xa0
 800201c:	d902      	bls.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800201e:	2302      	movs	r3, #2
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e013      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002024:	2301      	movs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	e010      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b80      	cmp	r3, #128	@ 0x80
 800202e:	d902      	bls.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002030:	2303      	movs	r3, #3
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	e00a      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	@ 0x80
 800203a:	d102      	bne.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e004      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b70      	cmp	r3, #112	@ 0x70
 8002046:	d101      	bne.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 0207 	bic.w	r2, r3, #7
 8002054:	4909      	ldr	r1, [pc, #36]	@ (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800205c:	4b07      	ldr	r3, [pc, #28]	@ (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002088:	2300      	movs	r3, #0
 800208a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800208c:	2300      	movs	r3, #0
 800208e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002098:	2b00      	cmp	r3, #0
 800209a:	d041      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020a4:	d02a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020aa:	d824      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020b0:	d008      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020b6:	d81e      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020c0:	d010      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020c2:	e018      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c4:	4b86      	ldr	r3, [pc, #536]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a85      	ldr	r2, [pc, #532]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020d0:	e015      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fabb 	bl	8002654 <RCCEx_PLLSAI1_Config>
 80020de:	4603      	mov	r3, r0
 80020e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3320      	adds	r3, #32
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fba6 	bl	800283c <RCCEx_PLLSAI2_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f4:	e003      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	74fb      	strb	r3, [r7, #19]
      break;
 80020fa:	e000      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002104:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002112:	4973      	ldr	r1, [pc, #460]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800211a:	e001      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d041      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002134:	d02a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800213a:	d824      	bhi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800213c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002140:	d008      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002146:	d81e      	bhi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d010      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002152:	e018      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002154:	4b62      	ldr	r3, [pc, #392]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a61      	ldr	r2, [pc, #388]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002160:	e015      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fa73 	bl	8002654 <RCCEx_PLLSAI1_Config>
 800216e:	4603      	mov	r3, r0
 8002170:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002172:	e00c      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3320      	adds	r3, #32
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fb5e 	bl	800283c <RCCEx_PLLSAI2_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002184:	e003      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	74fb      	strb	r3, [r7, #19]
      break;
 800218a:	e000      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800218c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002194:	4b52      	ldr	r3, [pc, #328]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021a2:	494f      	ldr	r1, [pc, #316]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021aa:	e001      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a0 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	4a40      	ldr	r2, [pc, #256]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e4:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f0:	2301      	movs	r3, #1
 80021f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3a      	ldr	r2, [pc, #232]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002200:	f7fe fd58 	bl	8000cb4 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002206:	e009      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fd54 	bl	8000cb4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
        break;
 800221a:	e005      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800221c:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d15c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222e:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002238:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d019      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002278:	4a19      	ldr	r2, [pc, #100]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fd13 	bl	8000cb4 <HAL_GetTick>
 800228e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	e00b      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fd0f 	bl	8000cb4 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d902      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	74fb      	strb	r3, [r7, #19]
            break;
 80022a8:	e006      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ec      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ce:	4904      	ldr	r1, [pc, #16]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022d6:	e009      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
 80022dc:	e006      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ec:	7c7b      	ldrb	r3, [r7, #17]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b9e      	ldr	r3, [pc, #632]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	4a9d      	ldr	r2, [pc, #628]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230a:	4b98      	ldr	r3, [pc, #608]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f023 0203 	bic.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	4994      	ldr	r1, [pc, #592]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800232c:	4b8f      	ldr	r3, [pc, #572]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 020c 	bic.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	498c      	ldr	r1, [pc, #560]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800234e:	4b87      	ldr	r3, [pc, #540]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	4983      	ldr	r1, [pc, #524]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002370:	4b7e      	ldr	r3, [pc, #504]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002376:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	497b      	ldr	r1, [pc, #492]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002392:	4b76      	ldr	r3, [pc, #472]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a0:	4972      	ldr	r1, [pc, #456]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b4:	4b6d      	ldr	r3, [pc, #436]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	496a      	ldr	r1, [pc, #424]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	4b65      	ldr	r3, [pc, #404]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	4961      	ldr	r1, [pc, #388]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f8:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002406:	4959      	ldr	r1, [pc, #356]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800241a:	4b54      	ldr	r3, [pc, #336]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002420:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002428:	4950      	ldr	r1, [pc, #320]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243c:	4b4b      	ldr	r3, [pc, #300]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244a:	4948      	ldr	r1, [pc, #288]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800245e:	4b43      	ldr	r3, [pc, #268]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246c:	493f      	ldr	r1, [pc, #252]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d028      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800248e:	4937      	ldr	r1, [pc, #220]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800249e:	d106      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024aa:	60d3      	str	r3, [r2, #12]
 80024ac:	e011      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f8c8 	bl	8002654 <RCCEx_PLLSAI1_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d028      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ec:	491f      	ldr	r1, [pc, #124]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024fc:	d106      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002508:	60d3      	str	r3, [r2, #12]
 800250a:	e011      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002514:	d10c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f899 	bl	8002654 <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02b      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800255a:	d109      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a02      	ldr	r2, [pc, #8]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002566:	60d3      	str	r3, [r2, #12]
 8002568:	e014      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f867 	bl	8002654 <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d02f      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ae:	4928      	ldr	r1, [pc, #160]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025be:	d10d      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f844 	bl	8002654 <RCCEx_PLLSAI1_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d014      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	74bb      	strb	r3, [r7, #18]
 80025da:	e011      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3320      	adds	r3, #32
 80025ea:	2102      	movs	r1, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f925 	bl	800283c <RCCEx_PLLSAI2_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800261a:	490d      	ldr	r1, [pc, #52]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002634:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263e:	4904      	ldr	r1, [pc, #16]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002646:	7cbb      	ldrb	r3, [r7, #18]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000

08002654 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002662:	4b75      	ldr	r3, [pc, #468]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800266e:	4b72      	ldr	r3, [pc, #456]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0203 	and.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d10d      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
       ||
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002686:	4b6c      	ldr	r3, [pc, #432]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
       ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d047      	beq.n	800272a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e044      	b.n	800272a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d018      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x86>
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d825      	bhi.n	80026f8 <RCCEx_PLLSAI1_Config+0xa4>
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d002      	beq.n	80026b6 <RCCEx_PLLSAI1_Config+0x62>
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d009      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x74>
 80026b4:	e020      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026b6:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d11d      	bne.n	80026fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c6:	e01a      	b.n	80026fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d116      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d8:	e013      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026da:	4b57      	ldr	r3, [pc, #348]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026e6:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026f6:	e006      	b.n	8002706 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e004      	b.n	8002708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026fe:	bf00      	nop
 8002700:	e002      	b.n	8002708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002706:	bf00      	nop
    }

    if(status == HAL_OK)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800270e:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	430b      	orrs	r3, r1
 8002724:	4944      	ldr	r1, [pc, #272]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d17d      	bne.n	800282c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002730:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a40      	ldr	r2, [pc, #256]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800273a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7fe faba 	bl	8000cb4 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002742:	e009      	b.n	8002758 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002744:	f7fe fab6 	bl	8000cb4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
        break;
 8002756:	e005      	b.n	8002764 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002758:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ef      	bne.n	8002744 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d160      	bne.n	800282c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	0211      	lsls	r1, r2, #8
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	0912      	lsrs	r2, r2, #4
 8002788:	0452      	lsls	r2, r2, #17
 800278a:	430a      	orrs	r2, r1
 800278c:	492a      	ldr	r1, [pc, #168]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	610b      	str	r3, [r1, #16]
 8002792:	e027      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d112      	bne.n	80027c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279a:	4b27      	ldr	r3, [pc, #156]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	0211      	lsls	r1, r2, #8
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6912      	ldr	r2, [r2, #16]
 80027b0:	0852      	lsrs	r2, r2, #1
 80027b2:	3a01      	subs	r2, #1
 80027b4:	0552      	lsls	r2, r2, #21
 80027b6:	430a      	orrs	r2, r1
 80027b8:	491f      	ldr	r1, [pc, #124]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	610b      	str	r3, [r1, #16]
 80027be:	e011      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6892      	ldr	r2, [r2, #8]
 80027d0:	0211      	lsls	r1, r2, #8
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6952      	ldr	r2, [r2, #20]
 80027d6:	0852      	lsrs	r2, r2, #1
 80027d8:	3a01      	subs	r2, #1
 80027da:	0652      	lsls	r2, r2, #25
 80027dc:	430a      	orrs	r2, r1
 80027de:	4916      	ldr	r1, [pc, #88]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027e4:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fa60 	bl	8000cb4 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027f6:	e009      	b.n	800280c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f8:	f7fe fa5c 	bl	8000cb4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d902      	bls.n	800280c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	73fb      	strb	r3, [r7, #15]
          break;
 800280a:	e005      	b.n	8002818 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ef      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4904      	ldr	r1, [pc, #16]	@ (8002838 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002856:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800286e:	4b61      	ldr	r3, [pc, #388]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
       ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d047      	beq.n	8002912 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e044      	b.n	8002912 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d018      	beq.n	80028c2 <RCCEx_PLLSAI2_Config+0x86>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d825      	bhi.n	80028e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d002      	beq.n	800289e <RCCEx_PLLSAI2_Config+0x62>
 8002898:	2b02      	cmp	r3, #2
 800289a:	d009      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x74>
 800289c:	e020      	b.n	80028e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800289e:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ae:	e01a      	b.n	80028e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028b0:	4b50      	ldr	r3, [pc, #320]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e013      	b.n	80028ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028c2:	4b4c      	ldr	r3, [pc, #304]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ce:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028de:	e006      	b.n	80028ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e004      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f6:	4b3f      	ldr	r3, [pc, #252]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	430b      	orrs	r3, r1
 800290c:	4939      	ldr	r1, [pc, #228]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d167      	bne.n	80029e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a35      	ldr	r2, [pc, #212]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002924:	f7fe f9c6 	bl	8000cb4 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800292a:	e009      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800292c:	f7fe f9c2 	bl	8000cb4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	73fb      	strb	r3, [r7, #15]
        break;
 800293e:	e005      	b.n	800294c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002940:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d14a      	bne.n	80029e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	0211      	lsls	r1, r2, #8
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	0912      	lsrs	r2, r2, #4
 8002970:	0452      	lsls	r2, r2, #17
 8002972:	430a      	orrs	r2, r1
 8002974:	491f      	ldr	r1, [pc, #124]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	614b      	str	r3, [r1, #20]
 800297a:	e011      	b.n	80029a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002984:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	0211      	lsls	r1, r2, #8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6912      	ldr	r2, [r2, #16]
 8002992:	0852      	lsrs	r2, r2, #1
 8002994:	3a01      	subs	r2, #1
 8002996:	0652      	lsls	r2, r2, #25
 8002998:	430a      	orrs	r2, r1
 800299a:	4916      	ldr	r1, [pc, #88]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029a0:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe f982 	bl	8000cb4 <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029b2:	e009      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029b4:	f7fe f97e 	bl	8000cb4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	73fb      	strb	r3, [r7, #15]
          break;
 80029c6:	e005      	b.n	80029d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e040      	b.n	8002a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd ff5c 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	@ 0x24
 8002a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fedc 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fc21 	bl	800328c <UART_SetConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e01b      	b.n	8002a8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 ff5b 	bl	8003940 <UART_CheckIdleState>
 8002a8a:	4603      	mov	r3, r0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d177      	bne.n	8002b9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_UART_Transmit+0x24>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e070      	b.n	8002b9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	@ 0x21
 8002ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe f8f3 	bl	8000cb4 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x68>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b04:	e02f      	b.n	8002b66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 ffbd 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e03b      	b.n	8002b9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	881a      	ldrh	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	e007      	b.n	8002b54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1c9      	bne.n	8002b06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2140      	movs	r1, #64	@ 0x40
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 ff87 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e005      	b.n	8002b9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d137      	bne.n	8002c30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_UART_Receive_IT+0x24>
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e030      	b.n	8002c32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <HAL_UART_Receive_IT+0x94>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d01f      	beq.n	8002c20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	69f9      	ldr	r1, [r7, #28]
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e6      	bne.n	8002bee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 ffa0 	bl	8003b6c <UART_Start_Receive_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3728      	adds	r7, #40	@ 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40008000 	.word	0x40008000

08002c40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0ba      	sub	sp, #232	@ 0xe8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002c6e:	4013      	ands	r3, r2
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d115      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00f      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 82ca 	beq.w	8003232 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
      }
      return;
 8002ca6:	e2c4      	b.n	8003232 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8117 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002cc2:	4b85      	ldr	r3, [pc, #532]	@ (8002ed8 <HAL_UART_IRQHandler+0x298>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 810a 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d011      	beq.n	8002cfc <HAL_UART_IRQHandler+0xbc>
 8002cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d011      	beq.n	8002d2c <HAL_UART_IRQHandler+0xec>
 8002d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d011      	beq.n	8002d5c <HAL_UART_IRQHandler+0x11c>
 8002d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d8e:	f043 0208 	orr.w	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_UART_IRQHandler+0x18a>
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8230 	beq.w	8003236 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	d005      	beq.n	8002e22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d04f      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 ff68 	bl	8003cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	d141      	bne.n	8002eba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1d9      	bne.n	8002e36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d013      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <HAL_UART_IRQHandler+0x29c>)
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f88b 	bl	8000fb2 <HAL_DMA_Abort_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d017      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002eac:	4610      	mov	r0, r2
 8002eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	e00f      	b.n	8002ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f9d4 	bl	8003260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	e00b      	b.n	8002ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f9d0 	bl	8003260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	e007      	b.n	8002ed2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f9cc 	bl	8003260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ed0:	e1b1      	b.n	8003236 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed2:	bf00      	nop
    return;
 8002ed4:	e1af      	b.n	8003236 <HAL_UART_IRQHandler+0x5f6>
 8002ed6:	bf00      	nop
 8002ed8:	04000120 	.word	0x04000120
 8002edc:	08003dc1 	.word	0x08003dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 816a 	bne.w	80031be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8163 	beq.w	80031be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 815c 	beq.w	80031be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	f040 80d4 	bne.w	80030c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80ad 	beq.w	800308e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	f080 80a5 	bcs.w	800308e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8086 	bne.w	800306c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1da      	bne.n	8002f60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e1      	bne.n	8002faa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3308      	adds	r3, #8
 8002fec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3308      	adds	r3, #8
 8003006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800300a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800300c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e3      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800303a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003050:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800305c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e4      	bne.n	800302c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ff65 	bl	8000f36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800307e:	b29b      	uxth	r3, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8f4 	bl	8003274 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800308c:	e0d5      	b.n	800323a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003098:	429a      	cmp	r2, r3
 800309a:	f040 80ce 	bne.w	800323a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 80c5 	bne.w	800323a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8d8 	bl	8003274 <HAL_UARTEx_RxEventCallback>
      return;
 80030c4:	e0b9      	b.n	800323a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80ab 	beq.w	800323e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80030e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a6 	beq.w	800323e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003114:	647b      	str	r3, [r7, #68]	@ 0x44
 8003116:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800311a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	623b      	str	r3, [r7, #32]
   return(result);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3308      	adds	r3, #8
 8003148:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800314c:	633a      	str	r2, [r7, #48]	@ 0x30
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e3      	bne.n	8003128 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	60fb      	str	r3, [r7, #12]
   return(result);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f023 0310 	bic.w	r3, r3, #16
 8003188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	69b9      	ldr	r1, [r7, #24]
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	617b      	str	r3, [r7, #20]
   return(result);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e4      	bne.n	8003174 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f85c 	bl	8003274 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031bc:	e03f      	b.n	800323e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <HAL_UART_IRQHandler+0x5a8>
 80031ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 ffe9 	bl	80041b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031e6:	e02d      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
    }
    return;
 8003210:	e017      	b.n	8003242 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_UART_IRQHandler+0x604>
 800321e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fdde 	bl	8003dec <UART_EndTransmit_IT>
    return;
 8003230:	e008      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
      return;
 8003232:	bf00      	nop
 8003234:	e006      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
    return;
 8003236:	bf00      	nop
 8003238:	e004      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
      return;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
      return;
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <HAL_UART_IRQHandler+0x604>
    return;
 8003242:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003244:	37e8      	adds	r7, #232	@ 0xe8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop

0800324c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b08a      	sub	sp, #40	@ 0x28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4ba4      	ldr	r3, [pc, #656]	@ (800354c <UART_SetConfig+0x2c0>)
 80032bc:	4013      	ands	r3, r2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a99      	ldr	r2, [pc, #612]	@ (8003550 <UART_SetConfig+0x2c4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	4313      	orrs	r3, r2
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a90      	ldr	r2, [pc, #576]	@ (8003554 <UART_SetConfig+0x2c8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d126      	bne.n	8003364 <UART_SetConfig+0xd8>
 8003316:	4b90      	ldr	r3, [pc, #576]	@ (8003558 <UART_SetConfig+0x2cc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d81b      	bhi.n	800335c <UART_SetConfig+0xd0>
 8003324:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <UART_SetConfig+0xa0>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	0800333d 	.word	0x0800333d
 8003330:	0800334d 	.word	0x0800334d
 8003334:	08003345 	.word	0x08003345
 8003338:	08003355 	.word	0x08003355
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003342:	e116      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003344:	2302      	movs	r3, #2
 8003346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334a:	e112      	b.n	8003572 <UART_SetConfig+0x2e6>
 800334c:	2304      	movs	r3, #4
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003352:	e10e      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003354:	2308      	movs	r3, #8
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335a:	e10a      	b.n	8003572 <UART_SetConfig+0x2e6>
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003362:	e106      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7c      	ldr	r2, [pc, #496]	@ (800355c <UART_SetConfig+0x2d0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d138      	bne.n	80033e0 <UART_SetConfig+0x154>
 800336e:	4b7a      	ldr	r3, [pc, #488]	@ (8003558 <UART_SetConfig+0x2cc>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d82d      	bhi.n	80033d8 <UART_SetConfig+0x14c>
 800337c:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <UART_SetConfig+0xf8>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080033d9 	.word	0x080033d9
 800338c:	080033d9 	.word	0x080033d9
 8003390:	080033d9 	.word	0x080033d9
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080033d9 	.word	0x080033d9
 800339c:	080033d9 	.word	0x080033d9
 80033a0:	080033d9 	.word	0x080033d9
 80033a4:	080033c1 	.word	0x080033c1
 80033a8:	080033d9 	.word	0x080033d9
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033d1 	.word	0x080033d1
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e0d8      	b.n	8003572 <UART_SetConfig+0x2e6>
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e0d4      	b.n	8003572 <UART_SetConfig+0x2e6>
 80033c8:	2304      	movs	r3, #4
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e0d0      	b.n	8003572 <UART_SetConfig+0x2e6>
 80033d0:	2308      	movs	r3, #8
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e0cc      	b.n	8003572 <UART_SetConfig+0x2e6>
 80033d8:	2310      	movs	r3, #16
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e0c8      	b.n	8003572 <UART_SetConfig+0x2e6>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003560 <UART_SetConfig+0x2d4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d125      	bne.n	8003436 <UART_SetConfig+0x1aa>
 80033ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003558 <UART_SetConfig+0x2cc>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033f4:	2b30      	cmp	r3, #48	@ 0x30
 80033f6:	d016      	beq.n	8003426 <UART_SetConfig+0x19a>
 80033f8:	2b30      	cmp	r3, #48	@ 0x30
 80033fa:	d818      	bhi.n	800342e <UART_SetConfig+0x1a2>
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d00a      	beq.n	8003416 <UART_SetConfig+0x18a>
 8003400:	2b20      	cmp	r3, #32
 8003402:	d814      	bhi.n	800342e <UART_SetConfig+0x1a2>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <UART_SetConfig+0x182>
 8003408:	2b10      	cmp	r3, #16
 800340a:	d008      	beq.n	800341e <UART_SetConfig+0x192>
 800340c:	e00f      	b.n	800342e <UART_SetConfig+0x1a2>
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003414:	e0ad      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003416:	2302      	movs	r3, #2
 8003418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341c:	e0a9      	b.n	8003572 <UART_SetConfig+0x2e6>
 800341e:	2304      	movs	r3, #4
 8003420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003424:	e0a5      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003426:	2308      	movs	r3, #8
 8003428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342c:	e0a1      	b.n	8003572 <UART_SetConfig+0x2e6>
 800342e:	2310      	movs	r3, #16
 8003430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003434:	e09d      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <UART_SetConfig+0x2d8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d125      	bne.n	800348c <UART_SetConfig+0x200>
 8003440:	4b45      	ldr	r3, [pc, #276]	@ (8003558 <UART_SetConfig+0x2cc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800344a:	2bc0      	cmp	r3, #192	@ 0xc0
 800344c:	d016      	beq.n	800347c <UART_SetConfig+0x1f0>
 800344e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003450:	d818      	bhi.n	8003484 <UART_SetConfig+0x1f8>
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d00a      	beq.n	800346c <UART_SetConfig+0x1e0>
 8003456:	2b80      	cmp	r3, #128	@ 0x80
 8003458:	d814      	bhi.n	8003484 <UART_SetConfig+0x1f8>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x1d8>
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d008      	beq.n	8003474 <UART_SetConfig+0x1e8>
 8003462:	e00f      	b.n	8003484 <UART_SetConfig+0x1f8>
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e082      	b.n	8003572 <UART_SetConfig+0x2e6>
 800346c:	2302      	movs	r3, #2
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003472:	e07e      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003474:	2304      	movs	r3, #4
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347a:	e07a      	b.n	8003572 <UART_SetConfig+0x2e6>
 800347c:	2308      	movs	r3, #8
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003482:	e076      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003484:	2310      	movs	r3, #16
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348a:	e072      	b.n	8003572 <UART_SetConfig+0x2e6>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a35      	ldr	r2, [pc, #212]	@ (8003568 <UART_SetConfig+0x2dc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12a      	bne.n	80034ec <UART_SetConfig+0x260>
 8003496:	4b30      	ldr	r3, [pc, #192]	@ (8003558 <UART_SetConfig+0x2cc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a4:	d01a      	beq.n	80034dc <UART_SetConfig+0x250>
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034aa:	d81b      	bhi.n	80034e4 <UART_SetConfig+0x258>
 80034ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b0:	d00c      	beq.n	80034cc <UART_SetConfig+0x240>
 80034b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b6:	d815      	bhi.n	80034e4 <UART_SetConfig+0x258>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <UART_SetConfig+0x238>
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c0:	d008      	beq.n	80034d4 <UART_SetConfig+0x248>
 80034c2:	e00f      	b.n	80034e4 <UART_SetConfig+0x258>
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ca:	e052      	b.n	8003572 <UART_SetConfig+0x2e6>
 80034cc:	2302      	movs	r3, #2
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d2:	e04e      	b.n	8003572 <UART_SetConfig+0x2e6>
 80034d4:	2304      	movs	r3, #4
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034da:	e04a      	b.n	8003572 <UART_SetConfig+0x2e6>
 80034dc:	2308      	movs	r3, #8
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e2:	e046      	b.n	8003572 <UART_SetConfig+0x2e6>
 80034e4:	2310      	movs	r3, #16
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ea:	e042      	b.n	8003572 <UART_SetConfig+0x2e6>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <UART_SetConfig+0x2c4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d13a      	bne.n	800356c <UART_SetConfig+0x2e0>
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <UART_SetConfig+0x2cc>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003504:	d01a      	beq.n	800353c <UART_SetConfig+0x2b0>
 8003506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800350a:	d81b      	bhi.n	8003544 <UART_SetConfig+0x2b8>
 800350c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003510:	d00c      	beq.n	800352c <UART_SetConfig+0x2a0>
 8003512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003516:	d815      	bhi.n	8003544 <UART_SetConfig+0x2b8>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <UART_SetConfig+0x298>
 800351c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003520:	d008      	beq.n	8003534 <UART_SetConfig+0x2a8>
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x2b8>
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e022      	b.n	8003572 <UART_SetConfig+0x2e6>
 800352c:	2302      	movs	r3, #2
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003532:	e01e      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003534:	2304      	movs	r3, #4
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353a:	e01a      	b.n	8003572 <UART_SetConfig+0x2e6>
 800353c:	2308      	movs	r3, #8
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003542:	e016      	b.n	8003572 <UART_SetConfig+0x2e6>
 8003544:	2310      	movs	r3, #16
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354a:	e012      	b.n	8003572 <UART_SetConfig+0x2e6>
 800354c:	efff69f3 	.word	0xefff69f3
 8003550:	40008000 	.word	0x40008000
 8003554:	40013800 	.word	0x40013800
 8003558:	40021000 	.word	0x40021000
 800355c:	40004400 	.word	0x40004400
 8003560:	40004800 	.word	0x40004800
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40005000 	.word	0x40005000
 800356c:	2310      	movs	r3, #16
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a9f      	ldr	r2, [pc, #636]	@ (80037f4 <UART_SetConfig+0x568>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d17a      	bne.n	8003672 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800357c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003580:	2b08      	cmp	r3, #8
 8003582:	d824      	bhi.n	80035ce <UART_SetConfig+0x342>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <UART_SetConfig+0x300>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035bf 	.word	0x080035bf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035cf 	.word	0x080035cf
 80035a8:	080035cf 	.word	0x080035cf
 80035ac:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fcda 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80035b4:	61f8      	str	r0, [r7, #28]
        break;
 80035b6:	e010      	b.n	80035da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b8f      	ldr	r3, [pc, #572]	@ (80037f8 <UART_SetConfig+0x56c>)
 80035ba:	61fb      	str	r3, [r7, #28]
        break;
 80035bc:	e00d      	b.n	80035da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fc3b 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 80035c2:	61f8      	str	r0, [r7, #28]
        break;
 80035c4:	e009      	b.n	80035da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	61fb      	str	r3, [r7, #28]
        break;
 80035cc:	e005      	b.n	80035da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80fb 	beq.w	80037d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d305      	bcc.n	80035fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d903      	bls.n	8003606 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003604:	e0e8      	b.n	80037d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2200      	movs	r2, #0
 800360a:	461c      	mov	r4, r3
 800360c:	4615      	mov	r5, r2
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	022b      	lsls	r3, r5, #8
 8003618:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800361c:	0222      	lsls	r2, r4, #8
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	6849      	ldr	r1, [r1, #4]
 8003622:	0849      	lsrs	r1, r1, #1
 8003624:	2000      	movs	r0, #0
 8003626:	4688      	mov	r8, r1
 8003628:	4681      	mov	r9, r0
 800362a:	eb12 0a08 	adds.w	sl, r2, r8
 800362e:	eb43 0b09 	adc.w	fp, r3, r9
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003640:	4650      	mov	r0, sl
 8003642:	4659      	mov	r1, fp
 8003644:	f7fc fe1c 	bl	8000280 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003656:	d308      	bcc.n	800366a <UART_SetConfig+0x3de>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365e:	d204      	bcs.n	800366a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e0b6      	b.n	80037d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003670:	e0b2      	b.n	80037d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367a:	d15e      	bne.n	800373a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800367c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003680:	2b08      	cmp	r3, #8
 8003682:	d828      	bhi.n	80036d6 <UART_SetConfig+0x44a>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <UART_SetConfig+0x400>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036c1 	.word	0x080036c1
 8003698:	080036d7 	.word	0x080036d7
 800369c:	080036c7 	.word	0x080036c7
 80036a0:	080036d7 	.word	0x080036d7
 80036a4:	080036d7 	.word	0x080036d7
 80036a8:	080036d7 	.word	0x080036d7
 80036ac:	080036cf 	.word	0x080036cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b0:	f7fe fc5a 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80036b4:	61f8      	str	r0, [r7, #28]
        break;
 80036b6:	e014      	b.n	80036e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b8:	f7fe fc6c 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 80036bc:	61f8      	str	r0, [r7, #28]
        break;
 80036be:	e010      	b.n	80036e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c0:	4b4d      	ldr	r3, [pc, #308]	@ (80037f8 <UART_SetConfig+0x56c>)
 80036c2:	61fb      	str	r3, [r7, #28]
        break;
 80036c4:	e00d      	b.n	80036e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c6:	f7fe fbb7 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 80036ca:	61f8      	str	r0, [r7, #28]
        break;
 80036cc:	e009      	b.n	80036e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d2:	61fb      	str	r3, [r7, #28]
        break;
 80036d4:	e005      	b.n	80036e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d077      	beq.n	80037d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005a      	lsls	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d916      	bls.n	8003732 <UART_SetConfig+0x4a6>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370a:	d212      	bcs.n	8003732 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f023 030f 	bic.w	r3, r3, #15
 8003714:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	b29b      	uxth	r3, r3
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	b29a      	uxth	r2, r3
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	4313      	orrs	r3, r2
 8003726:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	8afa      	ldrh	r2, [r7, #22]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e052      	b.n	80037d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003738:	e04e      	b.n	80037d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800373e:	2b08      	cmp	r3, #8
 8003740:	d827      	bhi.n	8003792 <UART_SetConfig+0x506>
 8003742:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <UART_SetConfig+0x4bc>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003775 	.word	0x08003775
 8003750:	0800377d 	.word	0x0800377d
 8003754:	08003793 	.word	0x08003793
 8003758:	08003783 	.word	0x08003783
 800375c:	08003793 	.word	0x08003793
 8003760:	08003793 	.word	0x08003793
 8003764:	08003793 	.word	0x08003793
 8003768:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7fe fbfc 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003770:	61f8      	str	r0, [r7, #28]
        break;
 8003772:	e014      	b.n	800379e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe fc0e 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003778:	61f8      	str	r0, [r7, #28]
        break;
 800377a:	e010      	b.n	800379e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <UART_SetConfig+0x56c>)
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e00d      	b.n	800379e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe fb59 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8003786:	61f8      	str	r0, [r7, #28]
        break;
 8003788:	e009      	b.n	800379e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	61fb      	str	r3, [r7, #28]
        break;
 8003790:	e005      	b.n	800379e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800379c:	bf00      	nop
    }

    if (pclk != 0U)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d019      	beq.n	80037d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	085a      	lsrs	r2, r3, #1
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	441a      	add	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d909      	bls.n	80037d2 <UART_SetConfig+0x546>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c4:	d205      	bcs.n	80037d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	e002      	b.n	80037d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3728      	adds	r7, #40	@ 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40008000 	.word	0x40008000
 80037f8:	00f42400 	.word	0x00f42400

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01a      	beq.n	8003912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038fa:	d10a      	bne.n	8003912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b098      	sub	sp, #96	@ 0x60
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003950:	f7fd f9b0 	bl	8000cb4 <HAL_GetTick>
 8003954:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d12e      	bne.n	80039c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f88c 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d021      	beq.n	80039c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800399c:	647b      	str	r3, [r7, #68]	@ 0x44
 800399e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e6      	bne.n	800397e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e062      	b.n	8003a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d149      	bne.n	8003a64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f856 	bl	8003a90 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d03c      	beq.n	8003a64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	623b      	str	r3, [r7, #32]
   return(result);
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a3c:	61fa      	str	r2, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e011      	b.n	8003a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3758      	adds	r7, #88	@ 0x58
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa0:	e04f      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d04b      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fd f903 	bl	8000cb4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e04e      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d037      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b80      	cmp	r3, #128	@ 0x80
 8003ad6:	d034      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d031      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d110      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2208      	movs	r2, #8
 8003af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f8ff 	bl	8003cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2208      	movs	r2, #8
 8003afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e029      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1c:	d111      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f8e5 	bl	8003cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e00f      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d0a0      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b097      	sub	sp, #92	@ 0x5c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9e:	d10e      	bne.n	8003bbe <UART_Start_Receive_IT+0x52>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <UART_Start_Receive_IT+0x48>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003bae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bb2:	e02d      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	22ff      	movs	r2, #255	@ 0xff
 8003bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bbc:	e028      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <UART_Start_Receive_IT+0x76>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <UART_Start_Receive_IT+0x6c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	@ 0xff
 8003bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bd6:	e01b      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	227f      	movs	r2, #127	@ 0x7f
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003be0:	e016      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <UART_Start_Receive_IT+0x9c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <UART_Start_Receive_IT+0x92>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	227f      	movs	r2, #127	@ 0x7f
 8003bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bfc:	e008      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	223f      	movs	r2, #63	@ 0x3f
 8003c02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c06:	e003      	b.n	8003c10 <UART_Start_Receive_IT+0xa4>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2222      	movs	r2, #34	@ 0x22
 8003c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d107      	bne.n	8003c6e <UART_Start_Receive_IT+0x102>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a21      	ldr	r2, [pc, #132]	@ (8003cf0 <UART_Start_Receive_IT+0x184>)
 8003c6a:	669a      	str	r2, [r3, #104]	@ 0x68
 8003c6c:	e002      	b.n	8003c74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a20      	ldr	r2, [pc, #128]	@ (8003cf4 <UART_Start_Receive_IT+0x188>)
 8003c72:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e6      	bne.n	8003c7c <UART_Start_Receive_IT+0x110>
 8003cae:	e018      	b.n	8003ce2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e6      	bne.n	8003cb0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	375c      	adds	r7, #92	@ 0x5c
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	08003ffd 	.word	0x08003ffd
 8003cf4:	08003e41 	.word	0x08003e41

08003cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b095      	sub	sp, #84	@ 0x54
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d118      	bne.n	8003da0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003db4:	bf00      	nop
 8003db6:	3754      	adds	r7, #84	@ 0x54
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fa3e 	bl	8003260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fa0a 	bl	800324c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b09c      	sub	sp, #112	@ 0x70
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e58:	2b22      	cmp	r3, #34	@ 0x22
 8003e5a:	f040 80be 	bne.w	8003fda <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e6c:	b2d9      	uxtb	r1, r3
 8003e6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	400a      	ands	r2, r1
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 80a3 	bne.w	8003fee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ec8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ecc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003efa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a34      	ldr	r2, [pc, #208]	@ (8003ff8 <UART_RxISR_8BIT+0x1b8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01f      	beq.n	8003f6c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d018      	beq.n	8003f6c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	623b      	str	r3, [r7, #32]
   return(result);
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d12e      	bne.n	8003fd2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0310 	bic.w	r3, r3, #16
 8003f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d103      	bne.n	8003fc2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff f952 	bl	8003274 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fd0:	e00d      	b.n	8003fee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc facc 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8003fd8:	e009      	b.n	8003fee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	8b1b      	ldrh	r3, [r3, #24]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	b292      	uxth	r2, r2
 8003fec:	831a      	strh	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	3770      	adds	r7, #112	@ 0x70
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40008000 	.word	0x40008000

08003ffc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b09c      	sub	sp, #112	@ 0x70
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800400a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004014:	2b22      	cmp	r3, #34	@ 0x22
 8004016:	f040 80be 	bne.w	8004196 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004020:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800402a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800402e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004032:	4013      	ands	r3, r2
 8004034:	b29a      	uxth	r2, r3
 8004036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004038:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 80a3 	bne.w	80041aa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004078:	667b      	str	r3, [r7, #100]	@ 0x64
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004082:	657b      	str	r3, [r7, #84]	@ 0x54
 8004084:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3308      	adds	r3, #8
 80040b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80040b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a34      	ldr	r2, [pc, #208]	@ (80041b4 <UART_RxISR_16BIT+0x1b8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01f      	beq.n	8004128 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	61fb      	str	r3, [r7, #28]
   return(result);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800410a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004116:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e6      	bne.n	80040f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412c:	2b01      	cmp	r3, #1
 800412e:	d12e      	bne.n	800418e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60bb      	str	r3, [r7, #8]
   return(result);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6979      	ldr	r1, [r7, #20]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	613b      	str	r3, [r7, #16]
   return(result);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d103      	bne.n	800417e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff f874 	bl	8003274 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800418c:	e00d      	b.n	80041aa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc f9ee 	bl	8000570 <HAL_UART_RxCpltCallback>
}
 8004194:	e009      	b.n	80041aa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	8b1b      	ldrh	r3, [r3, #24]
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0208 	orr.w	r2, r2, #8
 80041a6:	b292      	uxth	r2, r2
 80041a8:	831a      	strh	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	3770      	adds	r7, #112	@ 0x70
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40008000 	.word	0x40008000

080041b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <sbrk_aligned>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4e0f      	ldr	r6, [pc, #60]	@ (800420c <sbrk_aligned+0x40>)
 80041d0:	460c      	mov	r4, r1
 80041d2:	6831      	ldr	r1, [r6, #0]
 80041d4:	4605      	mov	r5, r0
 80041d6:	b911      	cbnz	r1, 80041de <sbrk_aligned+0x12>
 80041d8:	f000 fb0c 	bl	80047f4 <_sbrk_r>
 80041dc:	6030      	str	r0, [r6, #0]
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 fb07 	bl	80047f4 <_sbrk_r>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	d103      	bne.n	80041f2 <sbrk_aligned+0x26>
 80041ea:	f04f 34ff 	mov.w	r4, #4294967295
 80041ee:	4620      	mov	r0, r4
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	1cc4      	adds	r4, r0, #3
 80041f4:	f024 0403 	bic.w	r4, r4, #3
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d0f8      	beq.n	80041ee <sbrk_aligned+0x22>
 80041fc:	1a21      	subs	r1, r4, r0
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 faf8 	bl	80047f4 <_sbrk_r>
 8004204:	3001      	adds	r0, #1
 8004206:	d1f2      	bne.n	80041ee <sbrk_aligned+0x22>
 8004208:	e7ef      	b.n	80041ea <sbrk_aligned+0x1e>
 800420a:	bf00      	nop
 800420c:	200001f0 	.word	0x200001f0

08004210 <_malloc_r>:
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004214:	1ccd      	adds	r5, r1, #3
 8004216:	f025 0503 	bic.w	r5, r5, #3
 800421a:	3508      	adds	r5, #8
 800421c:	2d0c      	cmp	r5, #12
 800421e:	bf38      	it	cc
 8004220:	250c      	movcc	r5, #12
 8004222:	2d00      	cmp	r5, #0
 8004224:	4606      	mov	r6, r0
 8004226:	db01      	blt.n	800422c <_malloc_r+0x1c>
 8004228:	42a9      	cmp	r1, r5
 800422a:	d904      	bls.n	8004236 <_malloc_r+0x26>
 800422c:	230c      	movs	r3, #12
 800422e:	6033      	str	r3, [r6, #0]
 8004230:	2000      	movs	r0, #0
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800430c <_malloc_r+0xfc>
 800423a:	f000 f869 	bl	8004310 <__malloc_lock>
 800423e:	f8d8 3000 	ldr.w	r3, [r8]
 8004242:	461c      	mov	r4, r3
 8004244:	bb44      	cbnz	r4, 8004298 <_malloc_r+0x88>
 8004246:	4629      	mov	r1, r5
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff ffbf 	bl	80041cc <sbrk_aligned>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	4604      	mov	r4, r0
 8004252:	d158      	bne.n	8004306 <_malloc_r+0xf6>
 8004254:	f8d8 4000 	ldr.w	r4, [r8]
 8004258:	4627      	mov	r7, r4
 800425a:	2f00      	cmp	r7, #0
 800425c:	d143      	bne.n	80042e6 <_malloc_r+0xd6>
 800425e:	2c00      	cmp	r4, #0
 8004260:	d04b      	beq.n	80042fa <_malloc_r+0xea>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	4639      	mov	r1, r7
 8004266:	4630      	mov	r0, r6
 8004268:	eb04 0903 	add.w	r9, r4, r3
 800426c:	f000 fac2 	bl	80047f4 <_sbrk_r>
 8004270:	4581      	cmp	r9, r0
 8004272:	d142      	bne.n	80042fa <_malloc_r+0xea>
 8004274:	6821      	ldr	r1, [r4, #0]
 8004276:	1a6d      	subs	r5, r5, r1
 8004278:	4629      	mov	r1, r5
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff ffa6 	bl	80041cc <sbrk_aligned>
 8004280:	3001      	adds	r0, #1
 8004282:	d03a      	beq.n	80042fa <_malloc_r+0xea>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	442b      	add	r3, r5
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	f8d8 3000 	ldr.w	r3, [r8]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	bb62      	cbnz	r2, 80042ec <_malloc_r+0xdc>
 8004292:	f8c8 7000 	str.w	r7, [r8]
 8004296:	e00f      	b.n	80042b8 <_malloc_r+0xa8>
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	1b52      	subs	r2, r2, r5
 800429c:	d420      	bmi.n	80042e0 <_malloc_r+0xd0>
 800429e:	2a0b      	cmp	r2, #11
 80042a0:	d917      	bls.n	80042d2 <_malloc_r+0xc2>
 80042a2:	1961      	adds	r1, r4, r5
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	6025      	str	r5, [r4, #0]
 80042a8:	bf18      	it	ne
 80042aa:	6059      	strne	r1, [r3, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	bf08      	it	eq
 80042b0:	f8c8 1000 	streq.w	r1, [r8]
 80042b4:	5162      	str	r2, [r4, r5]
 80042b6:	604b      	str	r3, [r1, #4]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f82f 	bl	800431c <__malloc_unlock>
 80042be:	f104 000b 	add.w	r0, r4, #11
 80042c2:	1d23      	adds	r3, r4, #4
 80042c4:	f020 0007 	bic.w	r0, r0, #7
 80042c8:	1ac2      	subs	r2, r0, r3
 80042ca:	bf1c      	itt	ne
 80042cc:	1a1b      	subne	r3, r3, r0
 80042ce:	50a3      	strne	r3, [r4, r2]
 80042d0:	e7af      	b.n	8004232 <_malloc_r+0x22>
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	bf0c      	ite	eq
 80042d8:	f8c8 2000 	streq.w	r2, [r8]
 80042dc:	605a      	strne	r2, [r3, #4]
 80042de:	e7eb      	b.n	80042b8 <_malloc_r+0xa8>
 80042e0:	4623      	mov	r3, r4
 80042e2:	6864      	ldr	r4, [r4, #4]
 80042e4:	e7ae      	b.n	8004244 <_malloc_r+0x34>
 80042e6:	463c      	mov	r4, r7
 80042e8:	687f      	ldr	r7, [r7, #4]
 80042ea:	e7b6      	b.n	800425a <_malloc_r+0x4a>
 80042ec:	461a      	mov	r2, r3
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d1fb      	bne.n	80042ec <_malloc_r+0xdc>
 80042f4:	2300      	movs	r3, #0
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	e7de      	b.n	80042b8 <_malloc_r+0xa8>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	4630      	mov	r0, r6
 8004300:	f000 f80c 	bl	800431c <__malloc_unlock>
 8004304:	e794      	b.n	8004230 <_malloc_r+0x20>
 8004306:	6005      	str	r5, [r0, #0]
 8004308:	e7d6      	b.n	80042b8 <_malloc_r+0xa8>
 800430a:	bf00      	nop
 800430c:	200001f4 	.word	0x200001f4

08004310 <__malloc_lock>:
 8004310:	4801      	ldr	r0, [pc, #4]	@ (8004318 <__malloc_lock+0x8>)
 8004312:	f000 babc 	b.w	800488e <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	20000338 	.word	0x20000338

0800431c <__malloc_unlock>:
 800431c:	4801      	ldr	r0, [pc, #4]	@ (8004324 <__malloc_unlock+0x8>)
 800431e:	f000 bab7 	b.w	8004890 <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	20000338 	.word	0x20000338

08004328 <std>:
 8004328:	2300      	movs	r3, #0
 800432a:	b510      	push	{r4, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	e9c0 3300 	strd	r3, r3, [r0]
 8004332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004336:	6083      	str	r3, [r0, #8]
 8004338:	8181      	strh	r1, [r0, #12]
 800433a:	6643      	str	r3, [r0, #100]	@ 0x64
 800433c:	81c2      	strh	r2, [r0, #14]
 800433e:	6183      	str	r3, [r0, #24]
 8004340:	4619      	mov	r1, r3
 8004342:	2208      	movs	r2, #8
 8004344:	305c      	adds	r0, #92	@ 0x5c
 8004346:	f000 fa19 	bl	800477c <memset>
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x58>)
 800434c:	6263      	str	r3, [r4, #36]	@ 0x24
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <std+0x5c>)
 8004350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <std+0x60>)
 8004354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <std+0x64>)
 8004358:	6323      	str	r3, [r4, #48]	@ 0x30
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <std+0x68>)
 800435c:	6224      	str	r4, [r4, #32]
 800435e:	429c      	cmp	r4, r3
 8004360:	d006      	beq.n	8004370 <std+0x48>
 8004362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004366:	4294      	cmp	r4, r2
 8004368:	d002      	beq.n	8004370 <std+0x48>
 800436a:	33d0      	adds	r3, #208	@ 0xd0
 800436c:	429c      	cmp	r4, r3
 800436e:	d105      	bne.n	800437c <std+0x54>
 8004370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004378:	f000 ba88 	b.w	800488c <__retarget_lock_init_recursive>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	bf00      	nop
 8004380:	080045cd 	.word	0x080045cd
 8004384:	080045ef 	.word	0x080045ef
 8004388:	08004627 	.word	0x08004627
 800438c:	0800464b 	.word	0x0800464b
 8004390:	200001f8 	.word	0x200001f8

08004394 <stdio_exit_handler>:
 8004394:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <stdio_exit_handler+0xc>)
 8004396:	4903      	ldr	r1, [pc, #12]	@ (80043a4 <stdio_exit_handler+0x10>)
 8004398:	4803      	ldr	r0, [pc, #12]	@ (80043a8 <stdio_exit_handler+0x14>)
 800439a:	f000 b869 	b.w	8004470 <_fwalk_sglue>
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	0800529d 	.word	0x0800529d
 80043a8:	2000001c 	.word	0x2000001c

080043ac <cleanup_stdio>:
 80043ac:	6841      	ldr	r1, [r0, #4]
 80043ae:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <cleanup_stdio+0x34>)
 80043b0:	4299      	cmp	r1, r3
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4604      	mov	r4, r0
 80043b6:	d001      	beq.n	80043bc <cleanup_stdio+0x10>
 80043b8:	f000 ff70 	bl	800529c <_fflush_r>
 80043bc:	68a1      	ldr	r1, [r4, #8]
 80043be:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <cleanup_stdio+0x38>)
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d002      	beq.n	80043ca <cleanup_stdio+0x1e>
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 ff69 	bl	800529c <_fflush_r>
 80043ca:	68e1      	ldr	r1, [r4, #12]
 80043cc:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <cleanup_stdio+0x3c>)
 80043ce:	4299      	cmp	r1, r3
 80043d0:	d004      	beq.n	80043dc <cleanup_stdio+0x30>
 80043d2:	4620      	mov	r0, r4
 80043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d8:	f000 bf60 	b.w	800529c <_fflush_r>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	bf00      	nop
 80043e0:	200001f8 	.word	0x200001f8
 80043e4:	20000260 	.word	0x20000260
 80043e8:	200002c8 	.word	0x200002c8

080043ec <global_stdio_init.part.0>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <global_stdio_init.part.0+0x30>)
 80043f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004420 <global_stdio_init.part.0+0x34>)
 80043f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <global_stdio_init.part.0+0x38>)
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4620      	mov	r0, r4
 80043f8:	2200      	movs	r2, #0
 80043fa:	2104      	movs	r1, #4
 80043fc:	f7ff ff94 	bl	8004328 <std>
 8004400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004404:	2201      	movs	r2, #1
 8004406:	2109      	movs	r1, #9
 8004408:	f7ff ff8e 	bl	8004328 <std>
 800440c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004410:	2202      	movs	r2, #2
 8004412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004416:	2112      	movs	r1, #18
 8004418:	f7ff bf86 	b.w	8004328 <std>
 800441c:	20000330 	.word	0x20000330
 8004420:	200001f8 	.word	0x200001f8
 8004424:	08004395 	.word	0x08004395

08004428 <__sfp_lock_acquire>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__sfp_lock_acquire+0x8>)
 800442a:	f000 ba30 	b.w	800488e <__retarget_lock_acquire_recursive>
 800442e:	bf00      	nop
 8004430:	20000339 	.word	0x20000339

08004434 <__sfp_lock_release>:
 8004434:	4801      	ldr	r0, [pc, #4]	@ (800443c <__sfp_lock_release+0x8>)
 8004436:	f000 ba2b 	b.w	8004890 <__retarget_lock_release_recursive>
 800443a:	bf00      	nop
 800443c:	20000339 	.word	0x20000339

08004440 <__sinit>:
 8004440:	b510      	push	{r4, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	f7ff fff0 	bl	8004428 <__sfp_lock_acquire>
 8004448:	6a23      	ldr	r3, [r4, #32]
 800444a:	b11b      	cbz	r3, 8004454 <__sinit+0x14>
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f7ff bff0 	b.w	8004434 <__sfp_lock_release>
 8004454:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <__sinit+0x28>)
 8004456:	6223      	str	r3, [r4, #32]
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <__sinit+0x2c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f5      	bne.n	800444c <__sinit+0xc>
 8004460:	f7ff ffc4 	bl	80043ec <global_stdio_init.part.0>
 8004464:	e7f2      	b.n	800444c <__sinit+0xc>
 8004466:	bf00      	nop
 8004468:	080043ad 	.word	0x080043ad
 800446c:	20000330 	.word	0x20000330

08004470 <_fwalk_sglue>:
 8004470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004474:	4607      	mov	r7, r0
 8004476:	4688      	mov	r8, r1
 8004478:	4614      	mov	r4, r2
 800447a:	2600      	movs	r6, #0
 800447c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004480:	f1b9 0901 	subs.w	r9, r9, #1
 8004484:	d505      	bpl.n	8004492 <_fwalk_sglue+0x22>
 8004486:	6824      	ldr	r4, [r4, #0]
 8004488:	2c00      	cmp	r4, #0
 800448a:	d1f7      	bne.n	800447c <_fwalk_sglue+0xc>
 800448c:	4630      	mov	r0, r6
 800448e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d907      	bls.n	80044a8 <_fwalk_sglue+0x38>
 8004498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800449c:	3301      	adds	r3, #1
 800449e:	d003      	beq.n	80044a8 <_fwalk_sglue+0x38>
 80044a0:	4629      	mov	r1, r5
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c0      	blx	r8
 80044a6:	4306      	orrs	r6, r0
 80044a8:	3568      	adds	r5, #104	@ 0x68
 80044aa:	e7e9      	b.n	8004480 <_fwalk_sglue+0x10>

080044ac <iprintf>:
 80044ac:	b40f      	push	{r0, r1, r2, r3}
 80044ae:	b507      	push	{r0, r1, r2, lr}
 80044b0:	4906      	ldr	r1, [pc, #24]	@ (80044cc <iprintf+0x20>)
 80044b2:	ab04      	add	r3, sp, #16
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ba:	6881      	ldr	r1, [r0, #8]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	f000 fbc3 	bl	8004c48 <_vfiprintf_r>
 80044c2:	b003      	add	sp, #12
 80044c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c8:	b004      	add	sp, #16
 80044ca:	4770      	bx	lr
 80044cc:	20000018 	.word	0x20000018

080044d0 <_puts_r>:
 80044d0:	6a03      	ldr	r3, [r0, #32]
 80044d2:	b570      	push	{r4, r5, r6, lr}
 80044d4:	6884      	ldr	r4, [r0, #8]
 80044d6:	4605      	mov	r5, r0
 80044d8:	460e      	mov	r6, r1
 80044da:	b90b      	cbnz	r3, 80044e0 <_puts_r+0x10>
 80044dc:	f7ff ffb0 	bl	8004440 <__sinit>
 80044e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044e2:	07db      	lsls	r3, r3, #31
 80044e4:	d405      	bmi.n	80044f2 <_puts_r+0x22>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	0598      	lsls	r0, r3, #22
 80044ea:	d402      	bmi.n	80044f2 <_puts_r+0x22>
 80044ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ee:	f000 f9ce 	bl	800488e <__retarget_lock_acquire_recursive>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	0719      	lsls	r1, r3, #28
 80044f6:	d502      	bpl.n	80044fe <_puts_r+0x2e>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d135      	bne.n	800456a <_puts_r+0x9a>
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	f000 f8e5 	bl	80046d0 <__swsetup_r>
 8004506:	b380      	cbz	r0, 800456a <_puts_r+0x9a>
 8004508:	f04f 35ff 	mov.w	r5, #4294967295
 800450c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800450e:	07da      	lsls	r2, r3, #31
 8004510:	d405      	bmi.n	800451e <_puts_r+0x4e>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	059b      	lsls	r3, r3, #22
 8004516:	d402      	bmi.n	800451e <_puts_r+0x4e>
 8004518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800451a:	f000 f9b9 	bl	8004890 <__retarget_lock_release_recursive>
 800451e:	4628      	mov	r0, r5
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	2b00      	cmp	r3, #0
 8004524:	da04      	bge.n	8004530 <_puts_r+0x60>
 8004526:	69a2      	ldr	r2, [r4, #24]
 8004528:	429a      	cmp	r2, r3
 800452a:	dc17      	bgt.n	800455c <_puts_r+0x8c>
 800452c:	290a      	cmp	r1, #10
 800452e:	d015      	beq.n	800455c <_puts_r+0x8c>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	7019      	strb	r1, [r3, #0]
 8004538:	68a3      	ldr	r3, [r4, #8]
 800453a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800453e:	3b01      	subs	r3, #1
 8004540:	60a3      	str	r3, [r4, #8]
 8004542:	2900      	cmp	r1, #0
 8004544:	d1ed      	bne.n	8004522 <_puts_r+0x52>
 8004546:	2b00      	cmp	r3, #0
 8004548:	da11      	bge.n	800456e <_puts_r+0x9e>
 800454a:	4622      	mov	r2, r4
 800454c:	210a      	movs	r1, #10
 800454e:	4628      	mov	r0, r5
 8004550:	f000 f87f 	bl	8004652 <__swbuf_r>
 8004554:	3001      	adds	r0, #1
 8004556:	d0d7      	beq.n	8004508 <_puts_r+0x38>
 8004558:	250a      	movs	r5, #10
 800455a:	e7d7      	b.n	800450c <_puts_r+0x3c>
 800455c:	4622      	mov	r2, r4
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f877 	bl	8004652 <__swbuf_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d1e7      	bne.n	8004538 <_puts_r+0x68>
 8004568:	e7ce      	b.n	8004508 <_puts_r+0x38>
 800456a:	3e01      	subs	r6, #1
 800456c:	e7e4      	b.n	8004538 <_puts_r+0x68>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	6022      	str	r2, [r4, #0]
 8004574:	220a      	movs	r2, #10
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e7ee      	b.n	8004558 <_puts_r+0x88>
	...

0800457c <puts>:
 800457c:	4b02      	ldr	r3, [pc, #8]	@ (8004588 <puts+0xc>)
 800457e:	4601      	mov	r1, r0
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f7ff bfa5 	b.w	80044d0 <_puts_r>
 8004586:	bf00      	nop
 8004588:	20000018 	.word	0x20000018

0800458c <siprintf>:
 800458c:	b40e      	push	{r1, r2, r3}
 800458e:	b500      	push	{lr}
 8004590:	b09c      	sub	sp, #112	@ 0x70
 8004592:	ab1d      	add	r3, sp, #116	@ 0x74
 8004594:	9002      	str	r0, [sp, #8]
 8004596:	9006      	str	r0, [sp, #24]
 8004598:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800459c:	4809      	ldr	r0, [pc, #36]	@ (80045c4 <siprintf+0x38>)
 800459e:	9107      	str	r1, [sp, #28]
 80045a0:	9104      	str	r1, [sp, #16]
 80045a2:	4909      	ldr	r1, [pc, #36]	@ (80045c8 <siprintf+0x3c>)
 80045a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	a902      	add	r1, sp, #8
 80045b0:	f000 fa24 	bl	80049fc <_svfiprintf_r>
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	b01c      	add	sp, #112	@ 0x70
 80045bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045c0:	b003      	add	sp, #12
 80045c2:	4770      	bx	lr
 80045c4:	20000018 	.word	0x20000018
 80045c8:	ffff0208 	.word	0xffff0208

080045cc <__sread>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	460c      	mov	r4, r1
 80045d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d4:	f000 f8fc 	bl	80047d0 <_read_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	bfab      	itete	ge
 80045dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045de:	89a3      	ldrhlt	r3, [r4, #12]
 80045e0:	181b      	addge	r3, r3, r0
 80045e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045e6:	bfac      	ite	ge
 80045e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045ea:	81a3      	strhlt	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__swrite>:
 80045ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f2:	461f      	mov	r7, r3
 80045f4:	898b      	ldrh	r3, [r1, #12]
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	4605      	mov	r5, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	4616      	mov	r6, r2
 80045fe:	d505      	bpl.n	800460c <__swrite+0x1e>
 8004600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004604:	2302      	movs	r3, #2
 8004606:	2200      	movs	r2, #0
 8004608:	f000 f8d0 	bl	80047ac <_lseek_r>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004612:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	4628      	mov	r0, r5
 800461e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004622:	f000 b8f7 	b.w	8004814 <_write_r>

08004626 <__sseek>:
 8004626:	b510      	push	{r4, lr}
 8004628:	460c      	mov	r4, r1
 800462a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462e:	f000 f8bd 	bl	80047ac <_lseek_r>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	bf15      	itete	ne
 8004638:	6560      	strne	r0, [r4, #84]	@ 0x54
 800463a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800463e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004642:	81a3      	strheq	r3, [r4, #12]
 8004644:	bf18      	it	ne
 8004646:	81a3      	strhne	r3, [r4, #12]
 8004648:	bd10      	pop	{r4, pc}

0800464a <__sclose>:
 800464a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464e:	f000 b89d 	b.w	800478c <_close_r>

08004652 <__swbuf_r>:
 8004652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004654:	460e      	mov	r6, r1
 8004656:	4614      	mov	r4, r2
 8004658:	4605      	mov	r5, r0
 800465a:	b118      	cbz	r0, 8004664 <__swbuf_r+0x12>
 800465c:	6a03      	ldr	r3, [r0, #32]
 800465e:	b90b      	cbnz	r3, 8004664 <__swbuf_r+0x12>
 8004660:	f7ff feee 	bl	8004440 <__sinit>
 8004664:	69a3      	ldr	r3, [r4, #24]
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	071a      	lsls	r2, r3, #28
 800466c:	d501      	bpl.n	8004672 <__swbuf_r+0x20>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	b943      	cbnz	r3, 8004684 <__swbuf_r+0x32>
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 f82b 	bl	80046d0 <__swsetup_r>
 800467a:	b118      	cbz	r0, 8004684 <__swbuf_r+0x32>
 800467c:	f04f 37ff 	mov.w	r7, #4294967295
 8004680:	4638      	mov	r0, r7
 8004682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	6922      	ldr	r2, [r4, #16]
 8004688:	1a98      	subs	r0, r3, r2
 800468a:	6963      	ldr	r3, [r4, #20]
 800468c:	b2f6      	uxtb	r6, r6
 800468e:	4283      	cmp	r3, r0
 8004690:	4637      	mov	r7, r6
 8004692:	dc05      	bgt.n	80046a0 <__swbuf_r+0x4e>
 8004694:	4621      	mov	r1, r4
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fe00 	bl	800529c <_fflush_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	d1ed      	bne.n	800467c <__swbuf_r+0x2a>
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	6022      	str	r2, [r4, #0]
 80046ac:	701e      	strb	r6, [r3, #0]
 80046ae:	6962      	ldr	r2, [r4, #20]
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d004      	beq.n	80046c0 <__swbuf_r+0x6e>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	07db      	lsls	r3, r3, #31
 80046ba:	d5e1      	bpl.n	8004680 <__swbuf_r+0x2e>
 80046bc:	2e0a      	cmp	r6, #10
 80046be:	d1df      	bne.n	8004680 <__swbuf_r+0x2e>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 fdea 	bl	800529c <_fflush_r>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d0d9      	beq.n	8004680 <__swbuf_r+0x2e>
 80046cc:	e7d6      	b.n	800467c <__swbuf_r+0x2a>
	...

080046d0 <__swsetup_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <__swsetup_r+0xa8>)
 80046d4:	4605      	mov	r5, r0
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	460c      	mov	r4, r1
 80046da:	b118      	cbz	r0, 80046e4 <__swsetup_r+0x14>
 80046dc:	6a03      	ldr	r3, [r0, #32]
 80046de:	b90b      	cbnz	r3, 80046e4 <__swsetup_r+0x14>
 80046e0:	f7ff feae 	bl	8004440 <__sinit>
 80046e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d422      	bmi.n	8004732 <__swsetup_r+0x62>
 80046ec:	06da      	lsls	r2, r3, #27
 80046ee:	d407      	bmi.n	8004700 <__swsetup_r+0x30>
 80046f0:	2209      	movs	r2, #9
 80046f2:	602a      	str	r2, [r5, #0]
 80046f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	e033      	b.n	8004768 <__swsetup_r+0x98>
 8004700:	0758      	lsls	r0, r3, #29
 8004702:	d512      	bpl.n	800472a <__swsetup_r+0x5a>
 8004704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004706:	b141      	cbz	r1, 800471a <__swsetup_r+0x4a>
 8004708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800470c:	4299      	cmp	r1, r3
 800470e:	d002      	beq.n	8004716 <__swsetup_r+0x46>
 8004710:	4628      	mov	r0, r5
 8004712:	f000 f8cd 	bl	80048b0 <_free_r>
 8004716:	2300      	movs	r3, #0
 8004718:	6363      	str	r3, [r4, #52]	@ 0x34
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	2300      	movs	r3, #0
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f043 0308 	orr.w	r3, r3, #8
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	b94b      	cbnz	r3, 800474a <__swsetup_r+0x7a>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004740:	d003      	beq.n	800474a <__swsetup_r+0x7a>
 8004742:	4621      	mov	r1, r4
 8004744:	4628      	mov	r0, r5
 8004746:	f000 fdf7 	bl	8005338 <__smakebuf_r>
 800474a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474e:	f013 0201 	ands.w	r2, r3, #1
 8004752:	d00a      	beq.n	800476a <__swsetup_r+0x9a>
 8004754:	2200      	movs	r2, #0
 8004756:	60a2      	str	r2, [r4, #8]
 8004758:	6962      	ldr	r2, [r4, #20]
 800475a:	4252      	negs	r2, r2
 800475c:	61a2      	str	r2, [r4, #24]
 800475e:	6922      	ldr	r2, [r4, #16]
 8004760:	b942      	cbnz	r2, 8004774 <__swsetup_r+0xa4>
 8004762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004766:	d1c5      	bne.n	80046f4 <__swsetup_r+0x24>
 8004768:	bd38      	pop	{r3, r4, r5, pc}
 800476a:	0799      	lsls	r1, r3, #30
 800476c:	bf58      	it	pl
 800476e:	6962      	ldrpl	r2, [r4, #20]
 8004770:	60a2      	str	r2, [r4, #8]
 8004772:	e7f4      	b.n	800475e <__swsetup_r+0x8e>
 8004774:	2000      	movs	r0, #0
 8004776:	e7f7      	b.n	8004768 <__swsetup_r+0x98>
 8004778:	20000018 	.word	0x20000018

0800477c <memset>:
 800477c:	4402      	add	r2, r0
 800477e:	4603      	mov	r3, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <_close_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d06      	ldr	r5, [pc, #24]	@ (80047a8 <_close_r+0x1c>)
 8004790:	2300      	movs	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fc f975 	bl	8000a86 <_close>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_close_r+0x1a>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_close_r+0x1a>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20000334 	.word	0x20000334

080047ac <_lseek_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4d07      	ldr	r5, [pc, #28]	@ (80047cc <_lseek_r+0x20>)
 80047b0:	4604      	mov	r4, r0
 80047b2:	4608      	mov	r0, r1
 80047b4:	4611      	mov	r1, r2
 80047b6:	2200      	movs	r2, #0
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f7fc f98a 	bl	8000ad4 <_lseek>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_lseek_r+0x1e>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_lseek_r+0x1e>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	20000334 	.word	0x20000334

080047d0 <_read_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d07      	ldr	r5, [pc, #28]	@ (80047f0 <_read_r+0x20>)
 80047d4:	4604      	mov	r4, r0
 80047d6:	4608      	mov	r0, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	2200      	movs	r2, #0
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fc f918 	bl	8000a14 <_read>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_read_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_read_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000334 	.word	0x20000334

080047f4 <_sbrk_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4d06      	ldr	r5, [pc, #24]	@ (8004810 <_sbrk_r+0x1c>)
 80047f8:	2300      	movs	r3, #0
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	f7fc f976 	bl	8000af0 <_sbrk>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d102      	bne.n	800480e <_sbrk_r+0x1a>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b103      	cbz	r3, 800480e <_sbrk_r+0x1a>
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	20000334 	.word	0x20000334

08004814 <_write_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d07      	ldr	r5, [pc, #28]	@ (8004834 <_write_r+0x20>)
 8004818:	4604      	mov	r4, r0
 800481a:	4608      	mov	r0, r1
 800481c:	4611      	mov	r1, r2
 800481e:	2200      	movs	r2, #0
 8004820:	602a      	str	r2, [r5, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	f7fc f913 	bl	8000a4e <_write>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_write_r+0x1e>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_write_r+0x1e>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20000334 	.word	0x20000334

08004838 <__errno>:
 8004838:	4b01      	ldr	r3, [pc, #4]	@ (8004840 <__errno+0x8>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000018 	.word	0x20000018

08004844 <__libc_init_array>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4d0d      	ldr	r5, [pc, #52]	@ (800487c <__libc_init_array+0x38>)
 8004848:	4c0d      	ldr	r4, [pc, #52]	@ (8004880 <__libc_init_array+0x3c>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	2600      	movs	r6, #0
 8004850:	42a6      	cmp	r6, r4
 8004852:	d109      	bne.n	8004868 <__libc_init_array+0x24>
 8004854:	4d0b      	ldr	r5, [pc, #44]	@ (8004884 <__libc_init_array+0x40>)
 8004856:	4c0c      	ldr	r4, [pc, #48]	@ (8004888 <__libc_init_array+0x44>)
 8004858:	f000 fe1c 	bl	8005494 <_init>
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	2600      	movs	r6, #0
 8004862:	42a6      	cmp	r6, r4
 8004864:	d105      	bne.n	8004872 <__libc_init_array+0x2e>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	f855 3b04 	ldr.w	r3, [r5], #4
 800486c:	4798      	blx	r3
 800486e:	3601      	adds	r6, #1
 8004870:	e7ee      	b.n	8004850 <__libc_init_array+0xc>
 8004872:	f855 3b04 	ldr.w	r3, [r5], #4
 8004876:	4798      	blx	r3
 8004878:	3601      	adds	r6, #1
 800487a:	e7f2      	b.n	8004862 <__libc_init_array+0x1e>
 800487c:	0800555c 	.word	0x0800555c
 8004880:	0800555c 	.word	0x0800555c
 8004884:	0800555c 	.word	0x0800555c
 8004888:	08005560 	.word	0x08005560

0800488c <__retarget_lock_init_recursive>:
 800488c:	4770      	bx	lr

0800488e <__retarget_lock_acquire_recursive>:
 800488e:	4770      	bx	lr

08004890 <__retarget_lock_release_recursive>:
 8004890:	4770      	bx	lr

08004892 <memcpy>:
 8004892:	440a      	add	r2, r1
 8004894:	4291      	cmp	r1, r2
 8004896:	f100 33ff 	add.w	r3, r0, #4294967295
 800489a:	d100      	bne.n	800489e <memcpy+0xc>
 800489c:	4770      	bx	lr
 800489e:	b510      	push	{r4, lr}
 80048a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a8:	4291      	cmp	r1, r2
 80048aa:	d1f9      	bne.n	80048a0 <memcpy+0xe>
 80048ac:	bd10      	pop	{r4, pc}
	...

080048b0 <_free_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d041      	beq.n	800493c <_free_r+0x8c>
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f0c      	subs	r4, r1, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfb8      	it	lt
 80048c2:	18e4      	addlt	r4, r4, r3
 80048c4:	f7ff fd24 	bl	8004310 <__malloc_lock>
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <_free_r+0x90>)
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	b933      	cbnz	r3, 80048dc <_free_r+0x2c>
 80048ce:	6063      	str	r3, [r4, #4]
 80048d0:	6014      	str	r4, [r2, #0]
 80048d2:	4628      	mov	r0, r5
 80048d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048d8:	f7ff bd20 	b.w	800431c <__malloc_unlock>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d908      	bls.n	80048f2 <_free_r+0x42>
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	1821      	adds	r1, r4, r0
 80048e4:	428b      	cmp	r3, r1
 80048e6:	bf01      	itttt	eq
 80048e8:	6819      	ldreq	r1, [r3, #0]
 80048ea:	685b      	ldreq	r3, [r3, #4]
 80048ec:	1809      	addeq	r1, r1, r0
 80048ee:	6021      	streq	r1, [r4, #0]
 80048f0:	e7ed      	b.n	80048ce <_free_r+0x1e>
 80048f2:	461a      	mov	r2, r3
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	b10b      	cbz	r3, 80048fc <_free_r+0x4c>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d9fa      	bls.n	80048f2 <_free_r+0x42>
 80048fc:	6811      	ldr	r1, [r2, #0]
 80048fe:	1850      	adds	r0, r2, r1
 8004900:	42a0      	cmp	r0, r4
 8004902:	d10b      	bne.n	800491c <_free_r+0x6c>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	4401      	add	r1, r0
 8004908:	1850      	adds	r0, r2, r1
 800490a:	4283      	cmp	r3, r0
 800490c:	6011      	str	r1, [r2, #0]
 800490e:	d1e0      	bne.n	80048d2 <_free_r+0x22>
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	6053      	str	r3, [r2, #4]
 8004916:	4408      	add	r0, r1
 8004918:	6010      	str	r0, [r2, #0]
 800491a:	e7da      	b.n	80048d2 <_free_r+0x22>
 800491c:	d902      	bls.n	8004924 <_free_r+0x74>
 800491e:	230c      	movs	r3, #12
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	e7d6      	b.n	80048d2 <_free_r+0x22>
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	1821      	adds	r1, r4, r0
 8004928:	428b      	cmp	r3, r1
 800492a:	bf04      	itt	eq
 800492c:	6819      	ldreq	r1, [r3, #0]
 800492e:	685b      	ldreq	r3, [r3, #4]
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	bf04      	itt	eq
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	6054      	str	r4, [r2, #4]
 800493a:	e7ca      	b.n	80048d2 <_free_r+0x22>
 800493c:	bd38      	pop	{r3, r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	200001f4 	.word	0x200001f4

08004944 <__ssputs_r>:
 8004944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004948:	688e      	ldr	r6, [r1, #8]
 800494a:	461f      	mov	r7, r3
 800494c:	42be      	cmp	r6, r7
 800494e:	680b      	ldr	r3, [r1, #0]
 8004950:	4682      	mov	sl, r0
 8004952:	460c      	mov	r4, r1
 8004954:	4690      	mov	r8, r2
 8004956:	d82d      	bhi.n	80049b4 <__ssputs_r+0x70>
 8004958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800495c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004960:	d026      	beq.n	80049b0 <__ssputs_r+0x6c>
 8004962:	6965      	ldr	r5, [r4, #20]
 8004964:	6909      	ldr	r1, [r1, #16]
 8004966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800496a:	eba3 0901 	sub.w	r9, r3, r1
 800496e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004972:	1c7b      	adds	r3, r7, #1
 8004974:	444b      	add	r3, r9
 8004976:	106d      	asrs	r5, r5, #1
 8004978:	429d      	cmp	r5, r3
 800497a:	bf38      	it	cc
 800497c:	461d      	movcc	r5, r3
 800497e:	0553      	lsls	r3, r2, #21
 8004980:	d527      	bpl.n	80049d2 <__ssputs_r+0x8e>
 8004982:	4629      	mov	r1, r5
 8004984:	f7ff fc44 	bl	8004210 <_malloc_r>
 8004988:	4606      	mov	r6, r0
 800498a:	b360      	cbz	r0, 80049e6 <__ssputs_r+0xa2>
 800498c:	6921      	ldr	r1, [r4, #16]
 800498e:	464a      	mov	r2, r9
 8004990:	f7ff ff7f 	bl	8004892 <memcpy>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800499a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	6126      	str	r6, [r4, #16]
 80049a2:	6165      	str	r5, [r4, #20]
 80049a4:	444e      	add	r6, r9
 80049a6:	eba5 0509 	sub.w	r5, r5, r9
 80049aa:	6026      	str	r6, [r4, #0]
 80049ac:	60a5      	str	r5, [r4, #8]
 80049ae:	463e      	mov	r6, r7
 80049b0:	42be      	cmp	r6, r7
 80049b2:	d900      	bls.n	80049b6 <__ssputs_r+0x72>
 80049b4:	463e      	mov	r6, r7
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	4632      	mov	r2, r6
 80049ba:	4641      	mov	r1, r8
 80049bc:	f000 fcf8 	bl	80053b0 <memmove>
 80049c0:	68a3      	ldr	r3, [r4, #8]
 80049c2:	1b9b      	subs	r3, r3, r6
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	4433      	add	r3, r6
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	2000      	movs	r0, #0
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	462a      	mov	r2, r5
 80049d4:	f000 fd28 	bl	8005428 <_realloc_r>
 80049d8:	4606      	mov	r6, r0
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1e0      	bne.n	80049a0 <__ssputs_r+0x5c>
 80049de:	6921      	ldr	r1, [r4, #16]
 80049e0:	4650      	mov	r0, sl
 80049e2:	f7ff ff65 	bl	80048b0 <_free_r>
 80049e6:	230c      	movs	r3, #12
 80049e8:	f8ca 3000 	str.w	r3, [sl]
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f2:	81a3      	strh	r3, [r4, #12]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e7e9      	b.n	80049ce <__ssputs_r+0x8a>
	...

080049fc <_svfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	4698      	mov	r8, r3
 8004a02:	898b      	ldrh	r3, [r1, #12]
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	b09d      	sub	sp, #116	@ 0x74
 8004a08:	4607      	mov	r7, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	d510      	bpl.n	8004a32 <_svfiprintf_r+0x36>
 8004a10:	690b      	ldr	r3, [r1, #16]
 8004a12:	b973      	cbnz	r3, 8004a32 <_svfiprintf_r+0x36>
 8004a14:	2140      	movs	r1, #64	@ 0x40
 8004a16:	f7ff fbfb 	bl	8004210 <_malloc_r>
 8004a1a:	6028      	str	r0, [r5, #0]
 8004a1c:	6128      	str	r0, [r5, #16]
 8004a1e:	b930      	cbnz	r0, 8004a2e <_svfiprintf_r+0x32>
 8004a20:	230c      	movs	r3, #12
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	b01d      	add	sp, #116	@ 0x74
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	2340      	movs	r3, #64	@ 0x40
 8004a30:	616b      	str	r3, [r5, #20]
 8004a32:	2300      	movs	r3, #0
 8004a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a36:	2320      	movs	r3, #32
 8004a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a40:	2330      	movs	r3, #48	@ 0x30
 8004a42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004be0 <_svfiprintf_r+0x1e4>
 8004a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a4a:	f04f 0901 	mov.w	r9, #1
 8004a4e:	4623      	mov	r3, r4
 8004a50:	469a      	mov	sl, r3
 8004a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a56:	b10a      	cbz	r2, 8004a5c <_svfiprintf_r+0x60>
 8004a58:	2a25      	cmp	r2, #37	@ 0x25
 8004a5a:	d1f9      	bne.n	8004a50 <_svfiprintf_r+0x54>
 8004a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a60:	d00b      	beq.n	8004a7a <_svfiprintf_r+0x7e>
 8004a62:	465b      	mov	r3, fp
 8004a64:	4622      	mov	r2, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	4638      	mov	r0, r7
 8004a6a:	f7ff ff6b 	bl	8004944 <__ssputs_r>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f000 80a7 	beq.w	8004bc2 <_svfiprintf_r+0x1c6>
 8004a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a76:	445a      	add	r2, fp
 8004a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 809f 	beq.w	8004bc2 <_svfiprintf_r+0x1c6>
 8004a84:	2300      	movs	r3, #0
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8e:	f10a 0a01 	add.w	sl, sl, #1
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	9307      	str	r3, [sp, #28]
 8004a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a9c:	4654      	mov	r4, sl
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa4:	484e      	ldr	r0, [pc, #312]	@ (8004be0 <_svfiprintf_r+0x1e4>)
 8004aa6:	f7fb fb9b 	bl	80001e0 <memchr>
 8004aaa:	9a04      	ldr	r2, [sp, #16]
 8004aac:	b9d8      	cbnz	r0, 8004ae6 <_svfiprintf_r+0xea>
 8004aae:	06d0      	lsls	r0, r2, #27
 8004ab0:	bf44      	itt	mi
 8004ab2:	2320      	movmi	r3, #32
 8004ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ab8:	0711      	lsls	r1, r2, #28
 8004aba:	bf44      	itt	mi
 8004abc:	232b      	movmi	r3, #43	@ 0x2b
 8004abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac8:	d015      	beq.n	8004af6 <_svfiprintf_r+0xfa>
 8004aca:	9a07      	ldr	r2, [sp, #28]
 8004acc:	4654      	mov	r4, sl
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f04f 0c0a 	mov.w	ip, #10
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ada:	3b30      	subs	r3, #48	@ 0x30
 8004adc:	2b09      	cmp	r3, #9
 8004ade:	d94b      	bls.n	8004b78 <_svfiprintf_r+0x17c>
 8004ae0:	b1b0      	cbz	r0, 8004b10 <_svfiprintf_r+0x114>
 8004ae2:	9207      	str	r2, [sp, #28]
 8004ae4:	e014      	b.n	8004b10 <_svfiprintf_r+0x114>
 8004ae6:	eba0 0308 	sub.w	r3, r0, r8
 8004aea:	fa09 f303 	lsl.w	r3, r9, r3
 8004aee:	4313      	orrs	r3, r2
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	46a2      	mov	sl, r4
 8004af4:	e7d2      	b.n	8004a9c <_svfiprintf_r+0xa0>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	9103      	str	r1, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfbb      	ittet	lt
 8004b02:	425b      	neglt	r3, r3
 8004b04:	f042 0202 	orrlt.w	r2, r2, #2
 8004b08:	9307      	strge	r3, [sp, #28]
 8004b0a:	9307      	strlt	r3, [sp, #28]
 8004b0c:	bfb8      	it	lt
 8004b0e:	9204      	strlt	r2, [sp, #16]
 8004b10:	7823      	ldrb	r3, [r4, #0]
 8004b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b14:	d10a      	bne.n	8004b2c <_svfiprintf_r+0x130>
 8004b16:	7863      	ldrb	r3, [r4, #1]
 8004b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b1a:	d132      	bne.n	8004b82 <_svfiprintf_r+0x186>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	9203      	str	r2, [sp, #12]
 8004b24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b28:	3402      	adds	r4, #2
 8004b2a:	9305      	str	r3, [sp, #20]
 8004b2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bf0 <_svfiprintf_r+0x1f4>
 8004b30:	7821      	ldrb	r1, [r4, #0]
 8004b32:	2203      	movs	r2, #3
 8004b34:	4650      	mov	r0, sl
 8004b36:	f7fb fb53 	bl	80001e0 <memchr>
 8004b3a:	b138      	cbz	r0, 8004b4c <_svfiprintf_r+0x150>
 8004b3c:	9b04      	ldr	r3, [sp, #16]
 8004b3e:	eba0 000a 	sub.w	r0, r0, sl
 8004b42:	2240      	movs	r2, #64	@ 0x40
 8004b44:	4082      	lsls	r2, r0
 8004b46:	4313      	orrs	r3, r2
 8004b48:	3401      	adds	r4, #1
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b50:	4824      	ldr	r0, [pc, #144]	@ (8004be4 <_svfiprintf_r+0x1e8>)
 8004b52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b56:	2206      	movs	r2, #6
 8004b58:	f7fb fb42 	bl	80001e0 <memchr>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d036      	beq.n	8004bce <_svfiprintf_r+0x1d2>
 8004b60:	4b21      	ldr	r3, [pc, #132]	@ (8004be8 <_svfiprintf_r+0x1ec>)
 8004b62:	bb1b      	cbnz	r3, 8004bac <_svfiprintf_r+0x1b0>
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	3307      	adds	r3, #7
 8004b68:	f023 0307 	bic.w	r3, r3, #7
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	9303      	str	r3, [sp, #12]
 8004b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b72:	4433      	add	r3, r6
 8004b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b76:	e76a      	b.n	8004a4e <_svfiprintf_r+0x52>
 8004b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	2001      	movs	r0, #1
 8004b80:	e7a8      	b.n	8004ad4 <_svfiprintf_r+0xd8>
 8004b82:	2300      	movs	r3, #0
 8004b84:	3401      	adds	r4, #1
 8004b86:	9305      	str	r3, [sp, #20]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f04f 0c0a 	mov.w	ip, #10
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b94:	3a30      	subs	r2, #48	@ 0x30
 8004b96:	2a09      	cmp	r2, #9
 8004b98:	d903      	bls.n	8004ba2 <_svfiprintf_r+0x1a6>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0c6      	beq.n	8004b2c <_svfiprintf_r+0x130>
 8004b9e:	9105      	str	r1, [sp, #20]
 8004ba0:	e7c4      	b.n	8004b2c <_svfiprintf_r+0x130>
 8004ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e7f0      	b.n	8004b8e <_svfiprintf_r+0x192>
 8004bac:	ab03      	add	r3, sp, #12
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bec <_svfiprintf_r+0x1f0>)
 8004bb4:	a904      	add	r1, sp, #16
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f3af 8000 	nop.w
 8004bbc:	1c42      	adds	r2, r0, #1
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	d1d6      	bne.n	8004b70 <_svfiprintf_r+0x174>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	065b      	lsls	r3, r3, #25
 8004bc6:	f53f af2d 	bmi.w	8004a24 <_svfiprintf_r+0x28>
 8004bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bcc:	e72c      	b.n	8004a28 <_svfiprintf_r+0x2c>
 8004bce:	ab03      	add	r3, sp, #12
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <_svfiprintf_r+0x1f0>)
 8004bd6:	a904      	add	r1, sp, #16
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f000 f9bb 	bl	8004f54 <_printf_i>
 8004bde:	e7ed      	b.n	8004bbc <_svfiprintf_r+0x1c0>
 8004be0:	08005520 	.word	0x08005520
 8004be4:	0800552a 	.word	0x0800552a
 8004be8:	00000000 	.word	0x00000000
 8004bec:	08004945 	.word	0x08004945
 8004bf0:	08005526 	.word	0x08005526

08004bf4 <__sfputc_r>:
 8004bf4:	6893      	ldr	r3, [r2, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	b410      	push	{r4}
 8004bfc:	6093      	str	r3, [r2, #8]
 8004bfe:	da08      	bge.n	8004c12 <__sfputc_r+0x1e>
 8004c00:	6994      	ldr	r4, [r2, #24]
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	db01      	blt.n	8004c0a <__sfputc_r+0x16>
 8004c06:	290a      	cmp	r1, #10
 8004c08:	d103      	bne.n	8004c12 <__sfputc_r+0x1e>
 8004c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c0e:	f7ff bd20 	b.w	8004652 <__swbuf_r>
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	1c58      	adds	r0, r3, #1
 8004c16:	6010      	str	r0, [r2, #0]
 8004c18:	7019      	strb	r1, [r3, #0]
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <__sfputs_r>:
 8004c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c24:	4606      	mov	r6, r0
 8004c26:	460f      	mov	r7, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	18d5      	adds	r5, r2, r3
 8004c2c:	42ac      	cmp	r4, r5
 8004c2e:	d101      	bne.n	8004c34 <__sfputs_r+0x12>
 8004c30:	2000      	movs	r0, #0
 8004c32:	e007      	b.n	8004c44 <__sfputs_r+0x22>
 8004c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c38:	463a      	mov	r2, r7
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff ffda 	bl	8004bf4 <__sfputc_r>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d1f3      	bne.n	8004c2c <__sfputs_r+0xa>
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c48 <_vfiprintf_r>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	b09d      	sub	sp, #116	@ 0x74
 8004c50:	4614      	mov	r4, r2
 8004c52:	4698      	mov	r8, r3
 8004c54:	4606      	mov	r6, r0
 8004c56:	b118      	cbz	r0, 8004c60 <_vfiprintf_r+0x18>
 8004c58:	6a03      	ldr	r3, [r0, #32]
 8004c5a:	b90b      	cbnz	r3, 8004c60 <_vfiprintf_r+0x18>
 8004c5c:	f7ff fbf0 	bl	8004440 <__sinit>
 8004c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c62:	07d9      	lsls	r1, r3, #31
 8004c64:	d405      	bmi.n	8004c72 <_vfiprintf_r+0x2a>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	059a      	lsls	r2, r3, #22
 8004c6a:	d402      	bmi.n	8004c72 <_vfiprintf_r+0x2a>
 8004c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c6e:	f7ff fe0e 	bl	800488e <__retarget_lock_acquire_recursive>
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	d501      	bpl.n	8004c7c <_vfiprintf_r+0x34>
 8004c78:	692b      	ldr	r3, [r5, #16]
 8004c7a:	b99b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x5c>
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7ff fd26 	bl	80046d0 <__swsetup_r>
 8004c84:	b170      	cbz	r0, 8004ca4 <_vfiprintf_r+0x5c>
 8004c86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c88:	07dc      	lsls	r4, r3, #31
 8004c8a:	d504      	bpl.n	8004c96 <_vfiprintf_r+0x4e>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	b01d      	add	sp, #116	@ 0x74
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c96:	89ab      	ldrh	r3, [r5, #12]
 8004c98:	0598      	lsls	r0, r3, #22
 8004c9a:	d4f7      	bmi.n	8004c8c <_vfiprintf_r+0x44>
 8004c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c9e:	f7ff fdf7 	bl	8004890 <__retarget_lock_release_recursive>
 8004ca2:	e7f3      	b.n	8004c8c <_vfiprintf_r+0x44>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca8:	2320      	movs	r3, #32
 8004caa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb2:	2330      	movs	r3, #48	@ 0x30
 8004cb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e64 <_vfiprintf_r+0x21c>
 8004cb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cbc:	f04f 0901 	mov.w	r9, #1
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	469a      	mov	sl, r3
 8004cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc8:	b10a      	cbz	r2, 8004cce <_vfiprintf_r+0x86>
 8004cca:	2a25      	cmp	r2, #37	@ 0x25
 8004ccc:	d1f9      	bne.n	8004cc2 <_vfiprintf_r+0x7a>
 8004cce:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd2:	d00b      	beq.n	8004cec <_vfiprintf_r+0xa4>
 8004cd4:	465b      	mov	r3, fp
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff ffa1 	bl	8004c22 <__sfputs_r>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f000 80a7 	beq.w	8004e34 <_vfiprintf_r+0x1ec>
 8004ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ce8:	445a      	add	r2, fp
 8004cea:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cec:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 809f 	beq.w	8004e34 <_vfiprintf_r+0x1ec>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d00:	f10a 0a01 	add.w	sl, sl, #1
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	9307      	str	r3, [sp, #28]
 8004d08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d0e:	4654      	mov	r4, sl
 8004d10:	2205      	movs	r2, #5
 8004d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d16:	4853      	ldr	r0, [pc, #332]	@ (8004e64 <_vfiprintf_r+0x21c>)
 8004d18:	f7fb fa62 	bl	80001e0 <memchr>
 8004d1c:	9a04      	ldr	r2, [sp, #16]
 8004d1e:	b9d8      	cbnz	r0, 8004d58 <_vfiprintf_r+0x110>
 8004d20:	06d1      	lsls	r1, r2, #27
 8004d22:	bf44      	itt	mi
 8004d24:	2320      	movmi	r3, #32
 8004d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d2a:	0713      	lsls	r3, r2, #28
 8004d2c:	bf44      	itt	mi
 8004d2e:	232b      	movmi	r3, #43	@ 0x2b
 8004d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d34:	f89a 3000 	ldrb.w	r3, [sl]
 8004d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d3a:	d015      	beq.n	8004d68 <_vfiprintf_r+0x120>
 8004d3c:	9a07      	ldr	r2, [sp, #28]
 8004d3e:	4654      	mov	r4, sl
 8004d40:	2000      	movs	r0, #0
 8004d42:	f04f 0c0a 	mov.w	ip, #10
 8004d46:	4621      	mov	r1, r4
 8004d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d4c:	3b30      	subs	r3, #48	@ 0x30
 8004d4e:	2b09      	cmp	r3, #9
 8004d50:	d94b      	bls.n	8004dea <_vfiprintf_r+0x1a2>
 8004d52:	b1b0      	cbz	r0, 8004d82 <_vfiprintf_r+0x13a>
 8004d54:	9207      	str	r2, [sp, #28]
 8004d56:	e014      	b.n	8004d82 <_vfiprintf_r+0x13a>
 8004d58:	eba0 0308 	sub.w	r3, r0, r8
 8004d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	46a2      	mov	sl, r4
 8004d66:	e7d2      	b.n	8004d0e <_vfiprintf_r+0xc6>
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	1d19      	adds	r1, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	9103      	str	r1, [sp, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bfbb      	ittet	lt
 8004d74:	425b      	neglt	r3, r3
 8004d76:	f042 0202 	orrlt.w	r2, r2, #2
 8004d7a:	9307      	strge	r3, [sp, #28]
 8004d7c:	9307      	strlt	r3, [sp, #28]
 8004d7e:	bfb8      	it	lt
 8004d80:	9204      	strlt	r2, [sp, #16]
 8004d82:	7823      	ldrb	r3, [r4, #0]
 8004d84:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d86:	d10a      	bne.n	8004d9e <_vfiprintf_r+0x156>
 8004d88:	7863      	ldrb	r3, [r4, #1]
 8004d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d8c:	d132      	bne.n	8004df4 <_vfiprintf_r+0x1ac>
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	9203      	str	r2, [sp, #12]
 8004d96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d9a:	3402      	adds	r4, #2
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e74 <_vfiprintf_r+0x22c>
 8004da2:	7821      	ldrb	r1, [r4, #0]
 8004da4:	2203      	movs	r2, #3
 8004da6:	4650      	mov	r0, sl
 8004da8:	f7fb fa1a 	bl	80001e0 <memchr>
 8004dac:	b138      	cbz	r0, 8004dbe <_vfiprintf_r+0x176>
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	eba0 000a 	sub.w	r0, r0, sl
 8004db4:	2240      	movs	r2, #64	@ 0x40
 8004db6:	4082      	lsls	r2, r0
 8004db8:	4313      	orrs	r3, r2
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc2:	4829      	ldr	r0, [pc, #164]	@ (8004e68 <_vfiprintf_r+0x220>)
 8004dc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dc8:	2206      	movs	r2, #6
 8004dca:	f7fb fa09 	bl	80001e0 <memchr>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d03f      	beq.n	8004e52 <_vfiprintf_r+0x20a>
 8004dd2:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <_vfiprintf_r+0x224>)
 8004dd4:	bb1b      	cbnz	r3, 8004e1e <_vfiprintf_r+0x1d6>
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	3307      	adds	r3, #7
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	3308      	adds	r3, #8
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de4:	443b      	add	r3, r7
 8004de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004de8:	e76a      	b.n	8004cc0 <_vfiprintf_r+0x78>
 8004dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dee:	460c      	mov	r4, r1
 8004df0:	2001      	movs	r0, #1
 8004df2:	e7a8      	b.n	8004d46 <_vfiprintf_r+0xfe>
 8004df4:	2300      	movs	r3, #0
 8004df6:	3401      	adds	r4, #1
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f04f 0c0a 	mov.w	ip, #10
 8004e00:	4620      	mov	r0, r4
 8004e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e06:	3a30      	subs	r2, #48	@ 0x30
 8004e08:	2a09      	cmp	r2, #9
 8004e0a:	d903      	bls.n	8004e14 <_vfiprintf_r+0x1cc>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0c6      	beq.n	8004d9e <_vfiprintf_r+0x156>
 8004e10:	9105      	str	r1, [sp, #20]
 8004e12:	e7c4      	b.n	8004d9e <_vfiprintf_r+0x156>
 8004e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e18:	4604      	mov	r4, r0
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e7f0      	b.n	8004e00 <_vfiprintf_r+0x1b8>
 8004e1e:	ab03      	add	r3, sp, #12
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	462a      	mov	r2, r5
 8004e24:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <_vfiprintf_r+0x228>)
 8004e26:	a904      	add	r1, sp, #16
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f3af 8000 	nop.w
 8004e2e:	4607      	mov	r7, r0
 8004e30:	1c78      	adds	r0, r7, #1
 8004e32:	d1d6      	bne.n	8004de2 <_vfiprintf_r+0x19a>
 8004e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e36:	07d9      	lsls	r1, r3, #31
 8004e38:	d405      	bmi.n	8004e46 <_vfiprintf_r+0x1fe>
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	059a      	lsls	r2, r3, #22
 8004e3e:	d402      	bmi.n	8004e46 <_vfiprintf_r+0x1fe>
 8004e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e42:	f7ff fd25 	bl	8004890 <__retarget_lock_release_recursive>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	065b      	lsls	r3, r3, #25
 8004e4a:	f53f af1f 	bmi.w	8004c8c <_vfiprintf_r+0x44>
 8004e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e50:	e71e      	b.n	8004c90 <_vfiprintf_r+0x48>
 8004e52:	ab03      	add	r3, sp, #12
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	462a      	mov	r2, r5
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <_vfiprintf_r+0x228>)
 8004e5a:	a904      	add	r1, sp, #16
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f879 	bl	8004f54 <_printf_i>
 8004e62:	e7e4      	b.n	8004e2e <_vfiprintf_r+0x1e6>
 8004e64:	08005520 	.word	0x08005520
 8004e68:	0800552a 	.word	0x0800552a
 8004e6c:	00000000 	.word	0x00000000
 8004e70:	08004c23 	.word	0x08004c23
 8004e74:	08005526 	.word	0x08005526

08004e78 <_printf_common>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	4698      	mov	r8, r3
 8004e80:	688a      	ldr	r2, [r1, #8]
 8004e82:	690b      	ldr	r3, [r1, #16]
 8004e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bfb8      	it	lt
 8004e8c:	4613      	movlt	r3, r2
 8004e8e:	6033      	str	r3, [r6, #0]
 8004e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e94:	4607      	mov	r7, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	b10a      	cbz	r2, 8004e9e <_printf_common+0x26>
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	0699      	lsls	r1, r3, #26
 8004ea2:	bf42      	ittt	mi
 8004ea4:	6833      	ldrmi	r3, [r6, #0]
 8004ea6:	3302      	addmi	r3, #2
 8004ea8:	6033      	strmi	r3, [r6, #0]
 8004eaa:	6825      	ldr	r5, [r4, #0]
 8004eac:	f015 0506 	ands.w	r5, r5, #6
 8004eb0:	d106      	bne.n	8004ec0 <_printf_common+0x48>
 8004eb2:	f104 0a19 	add.w	sl, r4, #25
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	6832      	ldr	r2, [r6, #0]
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	42ab      	cmp	r3, r5
 8004ebe:	dc26      	bgt.n	8004f0e <_printf_common+0x96>
 8004ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ec4:	6822      	ldr	r2, [r4, #0]
 8004ec6:	3b00      	subs	r3, #0
 8004ec8:	bf18      	it	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	0692      	lsls	r2, r2, #26
 8004ece:	d42b      	bmi.n	8004f28 <_printf_common+0xb0>
 8004ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c8      	blx	r9
 8004eda:	3001      	adds	r0, #1
 8004edc:	d01e      	beq.n	8004f1c <_printf_common+0xa4>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	f003 0306 	and.w	r3, r3, #6
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	bf02      	ittt	eq
 8004eea:	68e5      	ldreq	r5, [r4, #12]
 8004eec:	6833      	ldreq	r3, [r6, #0]
 8004eee:	1aed      	subeq	r5, r5, r3
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	bf0c      	ite	eq
 8004ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef8:	2500      	movne	r5, #0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bfc4      	itt	gt
 8004efe:	1a9b      	subgt	r3, r3, r2
 8004f00:	18ed      	addgt	r5, r5, r3
 8004f02:	2600      	movs	r6, #0
 8004f04:	341a      	adds	r4, #26
 8004f06:	42b5      	cmp	r5, r6
 8004f08:	d11a      	bne.n	8004f40 <_printf_common+0xc8>
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	e008      	b.n	8004f20 <_printf_common+0xa8>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4652      	mov	r2, sl
 8004f12:	4641      	mov	r1, r8
 8004f14:	4638      	mov	r0, r7
 8004f16:	47c8      	blx	r9
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d103      	bne.n	8004f24 <_printf_common+0xac>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f24:	3501      	adds	r5, #1
 8004f26:	e7c6      	b.n	8004eb6 <_printf_common+0x3e>
 8004f28:	18e1      	adds	r1, r4, r3
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	2030      	movs	r0, #48	@ 0x30
 8004f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f32:	4422      	add	r2, r4
 8004f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	e7c7      	b.n	8004ed0 <_printf_common+0x58>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4622      	mov	r2, r4
 8004f44:	4641      	mov	r1, r8
 8004f46:	4638      	mov	r0, r7
 8004f48:	47c8      	blx	r9
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d0e6      	beq.n	8004f1c <_printf_common+0xa4>
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e7d9      	b.n	8004f06 <_printf_common+0x8e>
	...

08004f54 <_printf_i>:
 8004f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f58:	7e0f      	ldrb	r7, [r1, #24]
 8004f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f5c:	2f78      	cmp	r7, #120	@ 0x78
 8004f5e:	4691      	mov	r9, r2
 8004f60:	4680      	mov	r8, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	469a      	mov	sl, r3
 8004f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f6a:	d807      	bhi.n	8004f7c <_printf_i+0x28>
 8004f6c:	2f62      	cmp	r7, #98	@ 0x62
 8004f6e:	d80a      	bhi.n	8004f86 <_printf_i+0x32>
 8004f70:	2f00      	cmp	r7, #0
 8004f72:	f000 80d2 	beq.w	800511a <_printf_i+0x1c6>
 8004f76:	2f58      	cmp	r7, #88	@ 0x58
 8004f78:	f000 80b9 	beq.w	80050ee <_printf_i+0x19a>
 8004f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f84:	e03a      	b.n	8004ffc <_printf_i+0xa8>
 8004f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f8a:	2b15      	cmp	r3, #21
 8004f8c:	d8f6      	bhi.n	8004f7c <_printf_i+0x28>
 8004f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f94 <_printf_i+0x40>)
 8004f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08005001 	.word	0x08005001
 8004f9c:	08004f7d 	.word	0x08004f7d
 8004fa0:	08004f7d 	.word	0x08004f7d
 8004fa4:	08004f7d 	.word	0x08004f7d
 8004fa8:	08004f7d 	.word	0x08004f7d
 8004fac:	08005001 	.word	0x08005001
 8004fb0:	08004f7d 	.word	0x08004f7d
 8004fb4:	08004f7d 	.word	0x08004f7d
 8004fb8:	08004f7d 	.word	0x08004f7d
 8004fbc:	08004f7d 	.word	0x08004f7d
 8004fc0:	08005101 	.word	0x08005101
 8004fc4:	0800502b 	.word	0x0800502b
 8004fc8:	080050bb 	.word	0x080050bb
 8004fcc:	08004f7d 	.word	0x08004f7d
 8004fd0:	08004f7d 	.word	0x08004f7d
 8004fd4:	08005123 	.word	0x08005123
 8004fd8:	08004f7d 	.word	0x08004f7d
 8004fdc:	0800502b 	.word	0x0800502b
 8004fe0:	08004f7d 	.word	0x08004f7d
 8004fe4:	08004f7d 	.word	0x08004f7d
 8004fe8:	080050c3 	.word	0x080050c3
 8004fec:	6833      	ldr	r3, [r6, #0]
 8004fee:	1d1a      	adds	r2, r3, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6032      	str	r2, [r6, #0]
 8004ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e09d      	b.n	800513c <_printf_i+0x1e8>
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	1d19      	adds	r1, r3, #4
 8005006:	6031      	str	r1, [r6, #0]
 8005008:	0606      	lsls	r6, r0, #24
 800500a:	d501      	bpl.n	8005010 <_printf_i+0xbc>
 800500c:	681d      	ldr	r5, [r3, #0]
 800500e:	e003      	b.n	8005018 <_printf_i+0xc4>
 8005010:	0645      	lsls	r5, r0, #25
 8005012:	d5fb      	bpl.n	800500c <_printf_i+0xb8>
 8005014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005018:	2d00      	cmp	r5, #0
 800501a:	da03      	bge.n	8005024 <_printf_i+0xd0>
 800501c:	232d      	movs	r3, #45	@ 0x2d
 800501e:	426d      	negs	r5, r5
 8005020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005024:	4859      	ldr	r0, [pc, #356]	@ (800518c <_printf_i+0x238>)
 8005026:	230a      	movs	r3, #10
 8005028:	e011      	b.n	800504e <_printf_i+0xfa>
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	0608      	lsls	r0, r1, #24
 8005030:	f853 5b04 	ldr.w	r5, [r3], #4
 8005034:	d402      	bmi.n	800503c <_printf_i+0xe8>
 8005036:	0649      	lsls	r1, r1, #25
 8005038:	bf48      	it	mi
 800503a:	b2ad      	uxthmi	r5, r5
 800503c:	2f6f      	cmp	r7, #111	@ 0x6f
 800503e:	4853      	ldr	r0, [pc, #332]	@ (800518c <_printf_i+0x238>)
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	bf14      	ite	ne
 8005044:	230a      	movne	r3, #10
 8005046:	2308      	moveq	r3, #8
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800504e:	6866      	ldr	r6, [r4, #4]
 8005050:	60a6      	str	r6, [r4, #8]
 8005052:	2e00      	cmp	r6, #0
 8005054:	bfa2      	ittt	ge
 8005056:	6821      	ldrge	r1, [r4, #0]
 8005058:	f021 0104 	bicge.w	r1, r1, #4
 800505c:	6021      	strge	r1, [r4, #0]
 800505e:	b90d      	cbnz	r5, 8005064 <_printf_i+0x110>
 8005060:	2e00      	cmp	r6, #0
 8005062:	d04b      	beq.n	80050fc <_printf_i+0x1a8>
 8005064:	4616      	mov	r6, r2
 8005066:	fbb5 f1f3 	udiv	r1, r5, r3
 800506a:	fb03 5711 	mls	r7, r3, r1, r5
 800506e:	5dc7      	ldrb	r7, [r0, r7]
 8005070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005074:	462f      	mov	r7, r5
 8005076:	42bb      	cmp	r3, r7
 8005078:	460d      	mov	r5, r1
 800507a:	d9f4      	bls.n	8005066 <_printf_i+0x112>
 800507c:	2b08      	cmp	r3, #8
 800507e:	d10b      	bne.n	8005098 <_printf_i+0x144>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07df      	lsls	r7, r3, #31
 8005084:	d508      	bpl.n	8005098 <_printf_i+0x144>
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	6861      	ldr	r1, [r4, #4]
 800508a:	4299      	cmp	r1, r3
 800508c:	bfde      	ittt	le
 800508e:	2330      	movle	r3, #48	@ 0x30
 8005090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005094:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005098:	1b92      	subs	r2, r2, r6
 800509a:	6122      	str	r2, [r4, #16]
 800509c:	f8cd a000 	str.w	sl, [sp]
 80050a0:	464b      	mov	r3, r9
 80050a2:	aa03      	add	r2, sp, #12
 80050a4:	4621      	mov	r1, r4
 80050a6:	4640      	mov	r0, r8
 80050a8:	f7ff fee6 	bl	8004e78 <_printf_common>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d14a      	bne.n	8005146 <_printf_i+0x1f2>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	b004      	add	sp, #16
 80050b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f043 0320 	orr.w	r3, r3, #32
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	4833      	ldr	r0, [pc, #204]	@ (8005190 <_printf_i+0x23c>)
 80050c4:	2778      	movs	r7, #120	@ 0x78
 80050c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	6831      	ldr	r1, [r6, #0]
 80050ce:	061f      	lsls	r7, r3, #24
 80050d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80050d4:	d402      	bmi.n	80050dc <_printf_i+0x188>
 80050d6:	065f      	lsls	r7, r3, #25
 80050d8:	bf48      	it	mi
 80050da:	b2ad      	uxthmi	r5, r5
 80050dc:	6031      	str	r1, [r6, #0]
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	bf44      	itt	mi
 80050e2:	f043 0320 	orrmi.w	r3, r3, #32
 80050e6:	6023      	strmi	r3, [r4, #0]
 80050e8:	b11d      	cbz	r5, 80050f2 <_printf_i+0x19e>
 80050ea:	2310      	movs	r3, #16
 80050ec:	e7ac      	b.n	8005048 <_printf_i+0xf4>
 80050ee:	4827      	ldr	r0, [pc, #156]	@ (800518c <_printf_i+0x238>)
 80050f0:	e7e9      	b.n	80050c6 <_printf_i+0x172>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	f023 0320 	bic.w	r3, r3, #32
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	e7f6      	b.n	80050ea <_printf_i+0x196>
 80050fc:	4616      	mov	r6, r2
 80050fe:	e7bd      	b.n	800507c <_printf_i+0x128>
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	6961      	ldr	r1, [r4, #20]
 8005106:	1d18      	adds	r0, r3, #4
 8005108:	6030      	str	r0, [r6, #0]
 800510a:	062e      	lsls	r6, r5, #24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	d501      	bpl.n	8005114 <_printf_i+0x1c0>
 8005110:	6019      	str	r1, [r3, #0]
 8005112:	e002      	b.n	800511a <_printf_i+0x1c6>
 8005114:	0668      	lsls	r0, r5, #25
 8005116:	d5fb      	bpl.n	8005110 <_printf_i+0x1bc>
 8005118:	8019      	strh	r1, [r3, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	4616      	mov	r6, r2
 8005120:	e7bc      	b.n	800509c <_printf_i+0x148>
 8005122:	6833      	ldr	r3, [r6, #0]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	6032      	str	r2, [r6, #0]
 8005128:	681e      	ldr	r6, [r3, #0]
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	2100      	movs	r1, #0
 800512e:	4630      	mov	r0, r6
 8005130:	f7fb f856 	bl	80001e0 <memchr>
 8005134:	b108      	cbz	r0, 800513a <_printf_i+0x1e6>
 8005136:	1b80      	subs	r0, r0, r6
 8005138:	6060      	str	r0, [r4, #4]
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	2300      	movs	r3, #0
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005144:	e7aa      	b.n	800509c <_printf_i+0x148>
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	4632      	mov	r2, r6
 800514a:	4649      	mov	r1, r9
 800514c:	4640      	mov	r0, r8
 800514e:	47d0      	blx	sl
 8005150:	3001      	adds	r0, #1
 8005152:	d0ad      	beq.n	80050b0 <_printf_i+0x15c>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	079b      	lsls	r3, r3, #30
 8005158:	d413      	bmi.n	8005182 <_printf_i+0x22e>
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	4298      	cmp	r0, r3
 8005160:	bfb8      	it	lt
 8005162:	4618      	movlt	r0, r3
 8005164:	e7a6      	b.n	80050b4 <_printf_i+0x160>
 8005166:	2301      	movs	r3, #1
 8005168:	4632      	mov	r2, r6
 800516a:	4649      	mov	r1, r9
 800516c:	4640      	mov	r0, r8
 800516e:	47d0      	blx	sl
 8005170:	3001      	adds	r0, #1
 8005172:	d09d      	beq.n	80050b0 <_printf_i+0x15c>
 8005174:	3501      	adds	r5, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	9903      	ldr	r1, [sp, #12]
 800517a:	1a5b      	subs	r3, r3, r1
 800517c:	42ab      	cmp	r3, r5
 800517e:	dcf2      	bgt.n	8005166 <_printf_i+0x212>
 8005180:	e7eb      	b.n	800515a <_printf_i+0x206>
 8005182:	2500      	movs	r5, #0
 8005184:	f104 0619 	add.w	r6, r4, #25
 8005188:	e7f5      	b.n	8005176 <_printf_i+0x222>
 800518a:	bf00      	nop
 800518c:	08005531 	.word	0x08005531
 8005190:	08005542 	.word	0x08005542

08005194 <__sflush_r>:
 8005194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	0716      	lsls	r6, r2, #28
 800519e:	4605      	mov	r5, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	d454      	bmi.n	800524e <__sflush_r+0xba>
 80051a4:	684b      	ldr	r3, [r1, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dc02      	bgt.n	80051b0 <__sflush_r+0x1c>
 80051aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dd48      	ble.n	8005242 <__sflush_r+0xae>
 80051b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051b2:	2e00      	cmp	r6, #0
 80051b4:	d045      	beq.n	8005242 <__sflush_r+0xae>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051bc:	682f      	ldr	r7, [r5, #0]
 80051be:	6a21      	ldr	r1, [r4, #32]
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	d030      	beq.n	8005226 <__sflush_r+0x92>
 80051c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	0759      	lsls	r1, r3, #29
 80051ca:	d505      	bpl.n	80051d8 <__sflush_r+0x44>
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051d2:	b10b      	cbz	r3, 80051d8 <__sflush_r+0x44>
 80051d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051dc:	6a21      	ldr	r1, [r4, #32]
 80051de:	4628      	mov	r0, r5
 80051e0:	47b0      	blx	r6
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	d106      	bne.n	80051f6 <__sflush_r+0x62>
 80051e8:	6829      	ldr	r1, [r5, #0]
 80051ea:	291d      	cmp	r1, #29
 80051ec:	d82b      	bhi.n	8005246 <__sflush_r+0xb2>
 80051ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005298 <__sflush_r+0x104>)
 80051f0:	410a      	asrs	r2, r1
 80051f2:	07d6      	lsls	r6, r2, #31
 80051f4:	d427      	bmi.n	8005246 <__sflush_r+0xb2>
 80051f6:	2200      	movs	r2, #0
 80051f8:	6062      	str	r2, [r4, #4]
 80051fa:	04d9      	lsls	r1, r3, #19
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	d504      	bpl.n	800520c <__sflush_r+0x78>
 8005202:	1c42      	adds	r2, r0, #1
 8005204:	d101      	bne.n	800520a <__sflush_r+0x76>
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	b903      	cbnz	r3, 800520c <__sflush_r+0x78>
 800520a:	6560      	str	r0, [r4, #84]	@ 0x54
 800520c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800520e:	602f      	str	r7, [r5, #0]
 8005210:	b1b9      	cbz	r1, 8005242 <__sflush_r+0xae>
 8005212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005216:	4299      	cmp	r1, r3
 8005218:	d002      	beq.n	8005220 <__sflush_r+0x8c>
 800521a:	4628      	mov	r0, r5
 800521c:	f7ff fb48 	bl	80048b0 <_free_r>
 8005220:	2300      	movs	r3, #0
 8005222:	6363      	str	r3, [r4, #52]	@ 0x34
 8005224:	e00d      	b.n	8005242 <__sflush_r+0xae>
 8005226:	2301      	movs	r3, #1
 8005228:	4628      	mov	r0, r5
 800522a:	47b0      	blx	r6
 800522c:	4602      	mov	r2, r0
 800522e:	1c50      	adds	r0, r2, #1
 8005230:	d1c9      	bne.n	80051c6 <__sflush_r+0x32>
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0c6      	beq.n	80051c6 <__sflush_r+0x32>
 8005238:	2b1d      	cmp	r3, #29
 800523a:	d001      	beq.n	8005240 <__sflush_r+0xac>
 800523c:	2b16      	cmp	r3, #22
 800523e:	d11e      	bne.n	800527e <__sflush_r+0xea>
 8005240:	602f      	str	r7, [r5, #0]
 8005242:	2000      	movs	r0, #0
 8005244:	e022      	b.n	800528c <__sflush_r+0xf8>
 8005246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800524a:	b21b      	sxth	r3, r3
 800524c:	e01b      	b.n	8005286 <__sflush_r+0xf2>
 800524e:	690f      	ldr	r7, [r1, #16]
 8005250:	2f00      	cmp	r7, #0
 8005252:	d0f6      	beq.n	8005242 <__sflush_r+0xae>
 8005254:	0793      	lsls	r3, r2, #30
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	bf08      	it	eq
 800525a:	694b      	ldreq	r3, [r1, #20]
 800525c:	600f      	str	r7, [r1, #0]
 800525e:	bf18      	it	ne
 8005260:	2300      	movne	r3, #0
 8005262:	eba6 0807 	sub.w	r8, r6, r7
 8005266:	608b      	str	r3, [r1, #8]
 8005268:	f1b8 0f00 	cmp.w	r8, #0
 800526c:	dde9      	ble.n	8005242 <__sflush_r+0xae>
 800526e:	6a21      	ldr	r1, [r4, #32]
 8005270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005272:	4643      	mov	r3, r8
 8005274:	463a      	mov	r2, r7
 8005276:	4628      	mov	r0, r5
 8005278:	47b0      	blx	r6
 800527a:	2800      	cmp	r0, #0
 800527c:	dc08      	bgt.n	8005290 <__sflush_r+0xfc>
 800527e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	4407      	add	r7, r0
 8005292:	eba8 0800 	sub.w	r8, r8, r0
 8005296:	e7e7      	b.n	8005268 <__sflush_r+0xd4>
 8005298:	dfbffffe 	.word	0xdfbffffe

0800529c <_fflush_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	4605      	mov	r5, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b913      	cbnz	r3, 80052ac <_fflush_r+0x10>
 80052a6:	2500      	movs	r5, #0
 80052a8:	4628      	mov	r0, r5
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	b118      	cbz	r0, 80052b6 <_fflush_r+0x1a>
 80052ae:	6a03      	ldr	r3, [r0, #32]
 80052b0:	b90b      	cbnz	r3, 80052b6 <_fflush_r+0x1a>
 80052b2:	f7ff f8c5 	bl	8004440 <__sinit>
 80052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f3      	beq.n	80052a6 <_fflush_r+0xa>
 80052be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052c0:	07d0      	lsls	r0, r2, #31
 80052c2:	d404      	bmi.n	80052ce <_fflush_r+0x32>
 80052c4:	0599      	lsls	r1, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_fflush_r+0x32>
 80052c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ca:	f7ff fae0 	bl	800488e <__retarget_lock_acquire_recursive>
 80052ce:	4628      	mov	r0, r5
 80052d0:	4621      	mov	r1, r4
 80052d2:	f7ff ff5f 	bl	8005194 <__sflush_r>
 80052d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d8:	07da      	lsls	r2, r3, #31
 80052da:	4605      	mov	r5, r0
 80052dc:	d4e4      	bmi.n	80052a8 <_fflush_r+0xc>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d4e1      	bmi.n	80052a8 <_fflush_r+0xc>
 80052e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052e6:	f7ff fad3 	bl	8004890 <__retarget_lock_release_recursive>
 80052ea:	e7dd      	b.n	80052a8 <_fflush_r+0xc>

080052ec <__swhatbuf_r>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	460c      	mov	r4, r1
 80052f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f4:	2900      	cmp	r1, #0
 80052f6:	b096      	sub	sp, #88	@ 0x58
 80052f8:	4615      	mov	r5, r2
 80052fa:	461e      	mov	r6, r3
 80052fc:	da0d      	bge.n	800531a <__swhatbuf_r+0x2e>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	bf14      	ite	ne
 800530a:	2340      	movne	r3, #64	@ 0x40
 800530c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005310:	2000      	movs	r0, #0
 8005312:	6031      	str	r1, [r6, #0]
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	b016      	add	sp, #88	@ 0x58
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	466a      	mov	r2, sp
 800531c:	f000 f862 	bl	80053e4 <_fstat_r>
 8005320:	2800      	cmp	r0, #0
 8005322:	dbec      	blt.n	80052fe <__swhatbuf_r+0x12>
 8005324:	9901      	ldr	r1, [sp, #4]
 8005326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800532a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800532e:	4259      	negs	r1, r3
 8005330:	4159      	adcs	r1, r3
 8005332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005336:	e7eb      	b.n	8005310 <__swhatbuf_r+0x24>

08005338 <__smakebuf_r>:
 8005338:	898b      	ldrh	r3, [r1, #12]
 800533a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800533c:	079d      	lsls	r5, r3, #30
 800533e:	4606      	mov	r6, r0
 8005340:	460c      	mov	r4, r1
 8005342:	d507      	bpl.n	8005354 <__smakebuf_r+0x1c>
 8005344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	2301      	movs	r3, #1
 800534e:	6163      	str	r3, [r4, #20]
 8005350:	b003      	add	sp, #12
 8005352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005354:	ab01      	add	r3, sp, #4
 8005356:	466a      	mov	r2, sp
 8005358:	f7ff ffc8 	bl	80052ec <__swhatbuf_r>
 800535c:	9f00      	ldr	r7, [sp, #0]
 800535e:	4605      	mov	r5, r0
 8005360:	4639      	mov	r1, r7
 8005362:	4630      	mov	r0, r6
 8005364:	f7fe ff54 	bl	8004210 <_malloc_r>
 8005368:	b948      	cbnz	r0, 800537e <__smakebuf_r+0x46>
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	059a      	lsls	r2, r3, #22
 8005370:	d4ee      	bmi.n	8005350 <__smakebuf_r+0x18>
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	e7e2      	b.n	8005344 <__smakebuf_r+0xc>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	6020      	str	r0, [r4, #0]
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800538e:	b15b      	cbz	r3, 80053a8 <__smakebuf_r+0x70>
 8005390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f837 	bl	8005408 <_isatty_r>
 800539a:	b128      	cbz	r0, 80053a8 <__smakebuf_r+0x70>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	431d      	orrs	r5, r3
 80053ac:	81a5      	strh	r5, [r4, #12]
 80053ae:	e7cf      	b.n	8005350 <__smakebuf_r+0x18>

080053b0 <memmove>:
 80053b0:	4288      	cmp	r0, r1
 80053b2:	b510      	push	{r4, lr}
 80053b4:	eb01 0402 	add.w	r4, r1, r2
 80053b8:	d902      	bls.n	80053c0 <memmove+0x10>
 80053ba:	4284      	cmp	r4, r0
 80053bc:	4623      	mov	r3, r4
 80053be:	d807      	bhi.n	80053d0 <memmove+0x20>
 80053c0:	1e43      	subs	r3, r0, #1
 80053c2:	42a1      	cmp	r1, r4
 80053c4:	d008      	beq.n	80053d8 <memmove+0x28>
 80053c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ce:	e7f8      	b.n	80053c2 <memmove+0x12>
 80053d0:	4402      	add	r2, r0
 80053d2:	4601      	mov	r1, r0
 80053d4:	428a      	cmp	r2, r1
 80053d6:	d100      	bne.n	80053da <memmove+0x2a>
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053e2:	e7f7      	b.n	80053d4 <memmove+0x24>

080053e4 <_fstat_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	@ (8005404 <_fstat_r+0x20>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	f7fb fb54 	bl	8000a9e <_fstat>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d102      	bne.n	8005400 <_fstat_r+0x1c>
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	b103      	cbz	r3, 8005400 <_fstat_r+0x1c>
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	bd38      	pop	{r3, r4, r5, pc}
 8005402:	bf00      	nop
 8005404:	20000334 	.word	0x20000334

08005408 <_isatty_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d06      	ldr	r5, [pc, #24]	@ (8005424 <_isatty_r+0x1c>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fb fb53 	bl	8000abe <_isatty>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_isatty_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_isatty_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000334 	.word	0x20000334

08005428 <_realloc_r>:
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	4680      	mov	r8, r0
 800542e:	4615      	mov	r5, r2
 8005430:	460c      	mov	r4, r1
 8005432:	b921      	cbnz	r1, 800543e <_realloc_r+0x16>
 8005434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005438:	4611      	mov	r1, r2
 800543a:	f7fe bee9 	b.w	8004210 <_malloc_r>
 800543e:	b92a      	cbnz	r2, 800544c <_realloc_r+0x24>
 8005440:	f7ff fa36 	bl	80048b0 <_free_r>
 8005444:	2400      	movs	r4, #0
 8005446:	4620      	mov	r0, r4
 8005448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544c:	f000 f81a 	bl	8005484 <_malloc_usable_size_r>
 8005450:	4285      	cmp	r5, r0
 8005452:	4606      	mov	r6, r0
 8005454:	d802      	bhi.n	800545c <_realloc_r+0x34>
 8005456:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800545a:	d8f4      	bhi.n	8005446 <_realloc_r+0x1e>
 800545c:	4629      	mov	r1, r5
 800545e:	4640      	mov	r0, r8
 8005460:	f7fe fed6 	bl	8004210 <_malloc_r>
 8005464:	4607      	mov	r7, r0
 8005466:	2800      	cmp	r0, #0
 8005468:	d0ec      	beq.n	8005444 <_realloc_r+0x1c>
 800546a:	42b5      	cmp	r5, r6
 800546c:	462a      	mov	r2, r5
 800546e:	4621      	mov	r1, r4
 8005470:	bf28      	it	cs
 8005472:	4632      	movcs	r2, r6
 8005474:	f7ff fa0d 	bl	8004892 <memcpy>
 8005478:	4621      	mov	r1, r4
 800547a:	4640      	mov	r0, r8
 800547c:	f7ff fa18 	bl	80048b0 <_free_r>
 8005480:	463c      	mov	r4, r7
 8005482:	e7e0      	b.n	8005446 <_realloc_r+0x1e>

08005484 <_malloc_usable_size_r>:
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f18      	subs	r0, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfbc      	itt	lt
 800548e:	580b      	ldrlt	r3, [r1, r0]
 8005490:	18c0      	addlt	r0, r0, r3
 8005492:	4770      	bx	lr

08005494 <_init>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr

080054a0 <_fini>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr
