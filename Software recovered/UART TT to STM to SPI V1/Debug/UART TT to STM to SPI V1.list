
UART TT to STM to SPI V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004448  08004448  00005448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004594  08004594  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004594  08004594  00005594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800459c  0800459c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800459c  0800459c  0000559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080045a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08004600  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004600  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c397  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4e  00000000  00000000  00012423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00014178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077e  00000000  00000000  00014b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025865  00000000  00000000  000152be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c227  00000000  00000000  0003ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e71ed  00000000  00000000  00046d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012df37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002938  00000000  00000000  0012df7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001308b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004430 	.word	0x08004430

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004430 	.word	0x08004430

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a18      	ldr	r2, [pc, #96]	@ (800053c <HAL_UARTEx_RxEventCallback+0x74>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d112      	bne.n	8000504 <HAL_UARTEx_RxEventCallback+0x3c>
		memcpy(MainBuf, RxBuf, Size);
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4917      	ldr	r1, [pc, #92]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x78>)
 80004e4:	4817      	ldr	r0, [pc, #92]	@ (8000544 <HAL_UARTEx_RxEventCallback+0x7c>)
 80004e6:	f003 ff95 	bl	8004414 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80004ea:	220a      	movs	r2, #10
 80004ec:	4914      	ldr	r1, [pc, #80]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x78>)
 80004ee:	4816      	ldr	r0, [pc, #88]	@ (8000548 <HAL_UARTEx_RxEventCallback+0x80>)
 80004f0:	f003 fe82 	bl	80041f8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80004f4:	4b15      	ldr	r3, [pc, #84]	@ (800054c <HAL_UARTEx_RxEventCallback+0x84>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b14      	ldr	r3, [pc, #80]	@ (800054c <HAL_UARTEx_RxEventCallback+0x84>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f022 0204 	bic.w	r2, r2, #4
 8000502:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart2, MainBuf, Size, 1000);
 8000504:	887a      	ldrh	r2, [r7, #2]
 8000506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050a:	490e      	ldr	r1, [pc, #56]	@ (8000544 <HAL_UARTEx_RxEventCallback+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	@ (8000548 <HAL_UARTEx_RxEventCallback+0x80>)
 800050e:	f002 fbe3 	bl	8002cd8 <HAL_UART_Transmit>
	convertedString = (uint16_t)atoi((char* )RxBuf);
 8000512:	480b      	ldr	r0, [pc, #44]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x78>)
 8000514:	f003 fec4 	bl	80042a0 <atoi>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_UARTEx_RxEventCallback+0x88>)
 800051e:	801a      	strh	r2, [r3, #0]
	memset(RxBuf,0,strlen(RxBuf));
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x78>)
 8000522:	f7ff fe51 	bl	80001c8 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x78>)
 800052e:	f003 ff3f 	bl	80043b0 <memset>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40004400 	.word	0x40004400
 8000540:	20000148 	.word	0x20000148
 8000544:	20000154 	.word	0x20000154
 8000548:	20000078 	.word	0x20000078
 800054c:	20000100 	.word	0x20000100
 8000550:	2000015e 	.word	0x2000015e

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fa66 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f822 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8c0 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000564:	f000 f8a0 	bl	80006a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000568:	f000 f86e 	bl	8000648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 800056c:	220a      	movs	r2, #10
 800056e:	490a      	ldr	r1, [pc, #40]	@ (8000598 <main+0x44>)
 8000570:	480a      	ldr	r0, [pc, #40]	@ (800059c <main+0x48>)
 8000572:	f003 fe41 	bl	80041f8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <main+0x4c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <main+0x4c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f022 0204 	bic.w	r2, r2, #4
 8000584:	601a      	str	r2, [r3, #0]
  HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058a:	f000 fac9 	bl	8000b20 <HAL_Delay>
  {



	  //HAL_UART_Transmit(&huart2, RxBuf, 5, 1000);
	  HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000592:	f000 fac5 	bl	8000b20 <HAL_Delay>
 8000596:	e7fa      	b.n	800058e <main+0x3a>
 8000598:	20000148 	.word	0x20000148
 800059c:	20000078 	.word	0x20000078
 80005a0:	20000100 	.word	0x20000100

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	@ 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	@ 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fefc 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ca:	f001 f825 	bl	8001618 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 f8ec 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f85c 	bl	80016c4 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000612:	f000 f8cd 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fc24 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063a:	f000 f8b9 	bl	80007b0 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	@ 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <MX_USART2_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800068c:	f002 fad6 	bl	8002c3c <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f88b 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_DMA_Init+0x38>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b2:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <MX_DMA_Init+0x38>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_DMA_Init+0x38>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2010      	movs	r0, #16
 80006cc:	f000 fb27 	bl	8000d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d0:	2010      	movs	r0, #16
 80006d2:	f000 fb40 	bl	8000d56 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a2a      	ldr	r2, [pc, #168]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a24      	ldr	r2, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000762:	f000 ff33 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_GPIO_Init+0xc8>)
 800077e:	f000 fd7b 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000782:	2320      	movs	r3, #32
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f000 fd6c 	bl	8001278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000800 	.word	0x48000800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ac      	sub	sp, #176	@ 0xb0
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2288      	movs	r2, #136	@ 0x88
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fdc3 	bl	80043b0 <memset>
  if(huart->Instance==USART2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a3a      	ldr	r2, [pc, #232]	@ (8000918 <HAL_UART_MspInit+0x114>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d16c      	bne.n	800090e <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000834:	2302      	movs	r3, #2
 8000836:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000838:	2300      	movs	r3, #0
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fd3f 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800084c:	f7ff ffb0 	bl	80007b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <HAL_UART_MspInit+0x118>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000854:	4a31      	ldr	r2, [pc, #196]	@ (800091c <HAL_UART_MspInit+0x118>)
 8000856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085a:	6593      	str	r3, [r2, #88]	@ 0x58
 800085c:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <HAL_UART_MspInit+0x118>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <HAL_UART_MspInit+0x118>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <HAL_UART_MspInit+0x118>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000874:	4b29      	ldr	r3, [pc, #164]	@ (800091c <HAL_UART_MspInit+0x118>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000898:	2307      	movs	r3, #7
 800089a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f000 fce6 	bl	8001278 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <HAL_UART_MspInit+0x120>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008c6:	2280      	movs	r2, #128	@ 0x80
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e2:	480f      	ldr	r0, [pc, #60]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008e4:	f000 fa52 	bl	8000d8c <HAL_DMA_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80008ee:	f7ff ff5f 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <HAL_UART_MspInit+0x11c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2026      	movs	r0, #38	@ 0x26
 8000904:	f000 fa0b 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000908:	2026      	movs	r0, #38	@ 0x26
 800090a:	f000 fa24 	bl	8000d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800090e:	bf00      	nop
 8000910:	37b0      	adds	r7, #176	@ 0xb0
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	40021000 	.word	0x40021000
 8000920:	20000100 	.word	0x20000100
 8000924:	4002006c 	.word	0x4002006c

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f8af 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <DMA1_Channel6_IRQHandler+0x10>)
 800098e:	f000 fb94 	bl	80010ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000100 	.word	0x20000100

0800099c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <USART2_IRQHandler+0x10>)
 80009a2:	f002 fa23 	bl	8002dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000078 	.word	0x20000078

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 fce3 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fda5 	bl	8000554 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a18:	080045a4 	.word	0x080045a4
  ldr r2, =_sbss
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a20:	2000029c 	.word	0x2000029c

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_Init+0x3c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_Init+0x3c>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 f962 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 f80f 	bl	8000a68 <HAL_InitTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	e001      	b.n	8000a5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a56:	f7ff feb1 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d023      	beq.n	8000ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_InitTick+0x70>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f96d 	bl	8000d72 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10f      	bne.n	8000abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f937 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0x74>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000160 	.word	0x20000160

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000160 	.word	0x20000160

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff29 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff3e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff8e 	bl	8000c5c <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff31 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa2 	bl	8000cc4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e098      	b.n	8000ed0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <HAL_DMA_Init+0x150>)
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d80f      	bhi.n	8000dca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <HAL_DMA_Init+0x154>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee4 <HAL_DMA_Init+0x158>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a48      	ldr	r2, [pc, #288]	@ (8000ee8 <HAL_DMA_Init+0x15c>)
 8000dc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dc8:	e00e      	b.n	8000de8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <HAL_DMA_Init+0x160>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a43      	ldr	r2, [pc, #268]	@ (8000ee4 <HAL_DMA_Init+0x158>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	009a      	lsls	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a42      	ldr	r2, [pc, #264]	@ (8000ef0 <HAL_DMA_Init+0x164>)
 8000de6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e42:	d039      	beq.n	8000eb8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <HAL_DMA_Init+0x15c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d11a      	bne.n	8000e84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <HAL_DMA_Init+0x168>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f003 031c 	and.w	r3, r3, #28
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4924      	ldr	r1, [pc, #144]	@ (8000ef4 <HAL_DMA_Init+0x168>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <HAL_DMA_Init+0x168>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6859      	ldr	r1, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	f003 031c 	and.w	r3, r3, #28
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	491d      	ldr	r1, [pc, #116]	@ (8000ef4 <HAL_DMA_Init+0x168>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
 8000e82:	e019      	b.n	8000eb8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_DMA_Init+0x16c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	f003 031c 	and.w	r3, r3, #28
 8000e90:	210f      	movs	r1, #15
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4917      	ldr	r1, [pc, #92]	@ (8000ef8 <HAL_DMA_Init+0x16c>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_DMA_Init+0x16c>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6859      	ldr	r1, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f003 031c 	and.w	r3, r3, #28
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	4911      	ldr	r1, [pc, #68]	@ (8000ef8 <HAL_DMA_Init+0x16c>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40020407 	.word	0x40020407
 8000ee0:	bffdfff8 	.word	0xbffdfff8
 8000ee4:	cccccccd 	.word	0xcccccccd
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	bffdfbf8 	.word	0xbffdfbf8
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	400200a8 	.word	0x400200a8
 8000ef8:	400204a8 	.word	0x400204a8

08000efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_DMA_Start_IT+0x20>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e04b      	b.n	8000fb4 <HAL_DMA_Start_IT+0xb8>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d13a      	bne.n	8000fa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2202      	movs	r2, #2
 8000f34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 f95f 	bl	8001218 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 020e 	orr.w	r2, r2, #14
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e00f      	b.n	8000f94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0204 	bic.w	r2, r2, #4
 8000f82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 020a 	orr.w	r2, r2, #10
 8000f92:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e005      	b.n	8000fb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e022      	b.n	800102c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020e 	bic.w	r2, r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f003 021c 	and.w	r2, r3, #28
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d005      	beq.n	800105c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e029      	b.n	80010b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001080:	f003 021c 	and.w	r2, r3, #28
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	4798      	blx	r3
    }
  }
  return status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f003 031c 	and.w	r3, r3, #28
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d026      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d107      	bne.n	800110e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0204 	bic.w	r2, r2, #4
 800110c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f003 021c 	and.w	r2, r3, #28
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2104      	movs	r1, #4
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d071      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001132:	e06c      	b.n	800120e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	2202      	movs	r2, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d02e      	beq.n	80011a6 <HAL_DMA_IRQHandler+0xec>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d029      	beq.n	80011a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 020a 	bic.w	r2, r2, #10
 800116e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	f003 021c 	and.w	r2, r3, #28
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	2102      	movs	r1, #2
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	2b00      	cmp	r3, #0
 800119a:	d038      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011a4:	e033      	b.n	800120e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f003 031c 	and.w	r3, r3, #28
 80011ae:	2208      	movs	r2, #8
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02a      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d025      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 020e 	bic.w	r2, r2, #14
 80011d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d8:	f003 021c 	and.w	r2, r3, #28
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800120e:	bf00      	nop
 8001210:	bf00      	nop
}
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f003 021c 	and.w	r2, r3, #28
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d108      	bne.n	800125c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800125a:	e007      	b.n	800126c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e17f      	b.n	8001588 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8171 	beq.w	8001582 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d005      	beq.n	80012b8 <HAL_GPIO_Init+0x40>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d130      	bne.n	800131a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ee:	2201      	movs	r2, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f003 0201 	and.w	r2, r3, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b03      	cmp	r3, #3
 8001324:	d118      	bne.n	8001358 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80ac 	beq.w	8001582 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b5f      	ldr	r3, [pc, #380]	@ (80015a8 <HAL_GPIO_Init+0x330>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	4a5e      	ldr	r2, [pc, #376]	@ (80015a8 <HAL_GPIO_Init+0x330>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6613      	str	r3, [r2, #96]	@ 0x60
 8001436:	4b5c      	ldr	r3, [pc, #368]	@ (80015a8 <HAL_GPIO_Init+0x330>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001442:	4a5a      	ldr	r2, [pc, #360]	@ (80015ac <HAL_GPIO_Init+0x334>)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800146c:	d025      	beq.n	80014ba <HAL_GPIO_Init+0x242>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	@ (80015b0 <HAL_GPIO_Init+0x338>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01f      	beq.n	80014b6 <HAL_GPIO_Init+0x23e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4e      	ldr	r2, [pc, #312]	@ (80015b4 <HAL_GPIO_Init+0x33c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x23a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4d      	ldr	r2, [pc, #308]	@ (80015b8 <HAL_GPIO_Init+0x340>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x236>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <HAL_GPIO_Init+0x344>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x232>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4b      	ldr	r2, [pc, #300]	@ (80015c0 <HAL_GPIO_Init+0x348>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_GPIO_Init+0x34c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x22a>
 800149e:	2306      	movs	r3, #6
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x244>
 80014ba:	2300      	movs	r3, #0
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014cc:	4937      	ldr	r1, [pc, #220]	@ (80015ac <HAL_GPIO_Init+0x334>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fe:	4a32      	ldr	r2, [pc, #200]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001528:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001552:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <HAL_GPIO_Init+0x350>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f ae78 	bne.w	8001288 <HAL_GPIO_Init+0x10>
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	48001000 	.word	0x48001000
 80015c0:	48001400 	.word	0x48001400
 80015c4:	48001800 	.word	0x48001800
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <HAL_PWREx_GetVoltageRange+0x18>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000

08001618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001626:	d130      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001634:	d038      	beq.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800163e:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2232      	movs	r2, #50	@ 0x32
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4a1b      	ldr	r2, [pc, #108]	@ (80016c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165c:	e002      	b.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001670:	d102      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f2      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001684:	d110      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e00f      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001696:	d007      	beq.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a0:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e3ca      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b97      	ldr	r3, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b94      	ldr	r3, [pc, #592]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80e4 	beq.w	80018c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_RCC_OscConfig+0x4a>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	f040 808b 	bne.w	800181c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b01      	cmp	r3, #1
 800170a:	f040 8087 	bne.w	800181c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170e:	4b89      	ldr	r3, [pc, #548]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x62>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e3a2      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1a      	ldr	r2, [r3, #32]
 800172a:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_RCC_OscConfig+0x7c>
 8001736:	4b7f      	ldr	r3, [pc, #508]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800173e:	e005      	b.n	800174c <HAL_RCC_OscConfig+0x88>
 8001740:	4b7c      	ldr	r3, [pc, #496]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800174c:	4293      	cmp	r3, r2
 800174e:	d223      	bcs.n	8001798 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fd55 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e383      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001764:	4b73      	ldr	r3, [pc, #460]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a72      	ldr	r2, [pc, #456]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800176a:	f043 0308 	orr.w	r3, r3, #8
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	496d      	ldr	r1, [pc, #436]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001782:	4b6c      	ldr	r3, [pc, #432]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4968      	ldr	r1, [pc, #416]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e025      	b.n	80017e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001798:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a65      	ldr	r2, [pc, #404]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4960      	ldr	r1, [pc, #384]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	495b      	ldr	r1, [pc, #364]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fd15 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e343      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e4:	f000 fc4a 	bl	800207c <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b52      	ldr	r3, [pc, #328]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4950      	ldr	r1, [pc, #320]	@ (8001938 <HAL_RCC_OscConfig+0x274>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a4e      	ldr	r2, [pc, #312]	@ (800193c <HAL_RCC_OscConfig+0x278>)
 8001802:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001804:	4b4e      	ldr	r3, [pc, #312]	@ (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff f92d 	bl	8000a68 <HAL_InitTick>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d052      	beq.n	80018be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	e327      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d032      	beq.n	800188a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001824:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a42      	ldr	r2, [pc, #264]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001830:	f7ff f96a 	bl	8000b08 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001838:	f7ff f966 	bl	8000b08 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e310      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184a:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a36      	ldr	r2, [pc, #216]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4931      	ldr	r1, [pc, #196]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001874:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	492c      	ldr	r1, [pc, #176]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e01a      	b.n	80018c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a29      	ldr	r2, [pc, #164]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001896:	f7ff f937 	bl	8000b08 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189e:	f7ff f933 	bl	8000b08 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2dd      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x1da>
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d074      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x21a>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d10e      	bne.n	80018f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d10b      	bne.n	80018f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d064      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d160      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e2ba      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x24a>
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e026      	b.n	800195c <HAL_RCC_OscConfig+0x298>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001916:	d115      	bne.n	8001944 <HAL_RCC_OscConfig+0x280>
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800191e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a02      	ldr	r2, [pc, #8]	@ (8001934 <HAL_RCC_OscConfig+0x270>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e014      	b.n	800195c <HAL_RCC_OscConfig+0x298>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08004448 	.word	0x08004448
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004
 8001944:	4ba0      	ldr	r3, [pc, #640]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9f      	ldr	r2, [pc, #636]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b9d      	ldr	r3, [pc, #628]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a9c      	ldr	r2, [pc, #624]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f8d0 	bl	8000b08 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f8cc 	bl	8000b08 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	@ 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e276      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	4b92      	ldr	r3, [pc, #584]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x2a8>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f8bc 	bl	8000b08 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f8b8 	bl	8000b08 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e262      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x2d0>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d060      	beq.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x310>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d116      	bne.n	8001a02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d4:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x328>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e23f      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b76      	ldr	r3, [pc, #472]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	4973      	ldr	r1, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	e040      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d023      	beq.n	8001a52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f877 	bl	8000b08 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f873 	bl	8000b08 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e21d      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	4b65      	ldr	r3, [pc, #404]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	495f      	ldr	r1, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b5d      	ldr	r3, [pc, #372]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f853 	bl	8000b08 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff f84f 	bl	8000b08 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1f9      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a78:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a98:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f82e 	bl	8000b08 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f82a 	bl	8000b08 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1d4      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac2:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ef      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x3ec>
 8001ad0:	e01b      	b.n	8001b0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f811 	bl	8000b08 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff f80d 	bl	8000b08 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1b7      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001afc:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80a6 	beq.w	8001c64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b40:	2301      	movs	r3, #1
 8001b42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d118      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe ffd4 	bl	8000b08 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7fe ffd0 	bl	8000b08 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e17a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4d8>
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b9a:	e029      	b.n	8001bf0 <HAL_RCC_OscConfig+0x52c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d115      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x50c>
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001baa:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bb4:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bba:	4a03      	ldr	r2, [pc, #12]	@ (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x52c>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be0:	4b98      	ldr	r3, [pc, #608]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be6:	4a97      	ldr	r2, [pc, #604]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d016      	beq.n	8001c26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ff86 	bl	8000b08 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe ff82 	bl	8000b08 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e12a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ed      	beq.n	8001c00 <HAL_RCC_OscConfig+0x53c>
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7fe ff6f 	bl	8000b08 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe ff6b 	bl	8000b08 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e113      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c44:	4b7f      	ldr	r3, [pc, #508]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ed      	bne.n	8001c2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b7a      	ldr	r3, [pc, #488]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	4a79      	ldr	r2, [pc, #484]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80fe 	beq.w	8001e6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	f040 80d0 	bne.w	8001e18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c78:	4b72      	ldr	r3, [pc, #456]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d130      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	3b01      	subs	r3, #1
 8001c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d127      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d11f      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cb8:	2a07      	cmp	r2, #7
 8001cba:	bf14      	ite	ne
 8001cbc:	2201      	movne	r2, #1
 8001cbe:	2200      	moveq	r2, #0
 8001cc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d113      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d06e      	beq.n	8001dcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d069      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0ad      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d10:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d1c:	f7fe fef4 	bl	8000b08 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe fef0 	bl	8000b08 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e09a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d42:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <HAL_RCC_OscConfig+0x784>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d52:	3a01      	subs	r2, #1
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d5c:	0212      	lsls	r2, r2, #8
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0552      	lsls	r2, r2, #21
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d70:	0852      	lsrs	r2, r2, #1
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0652      	lsls	r2, r2, #25
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d7c:	0912      	lsrs	r2, r2, #4
 8001d7e:	0452      	lsls	r2, r2, #17
 8001d80:	430a      	orrs	r2, r1
 8001d82:	4930      	ldr	r1, [pc, #192]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d88:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a2a      	ldr	r2, [pc, #168]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da0:	f7fe feb2 	bl	8000b08 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe feae 	bl	8000b08 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e058      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc6:	e050      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e04f      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d148      	bne.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a16      	ldr	r2, [pc, #88]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df0:	f7fe fe8a 	bl	8000b08 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fe86 	bl	8000b08 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e030      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x734>
 8001e16:	e028      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d023      	beq.n	8001e66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fe6d 	bl	8000b08 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	e00c      	b.n	8001e4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe fe69 	bl	8000b08 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d905      	bls.n	8001e4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ec      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4905      	ldr	r1, [pc, #20]	@ (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_OscConfig+0x7b4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e001      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	feeefffc 	.word	0xfeeefffc

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0e7      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b75      	ldr	r3, [pc, #468]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b72      	ldr	r3, [pc, #456]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4970      	ldr	r1, [pc, #448]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b6e      	ldr	r3, [pc, #440]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0cf      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4b66      	ldr	r3, [pc, #408]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d908      	bls.n	8001eee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b63      	ldr	r3, [pc, #396]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4960      	ldr	r1, [pc, #384]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04c      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0a6      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e09a      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f32:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e08e      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f42:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e086      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b46      	ldr	r3, [pc, #280]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4943      	ldr	r1, [pc, #268]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f64:	f7fe fdd0 	bl	8000b08 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7fe fdcc 	bl	8000b08 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e06e      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d208      	bcs.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	492b      	ldr	r1, [pc, #172]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d210      	bcs.n	8001ff2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4923      	ldr	r1, [pc, #140]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e036      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4918      	ldr	r1, [pc, #96]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4910      	ldr	r1, [pc, #64]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002030:	f000 f824 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	490b      	ldr	r1, [pc, #44]	@ (8002070 <HAL_RCC_ClockConfig+0x1f4>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_RCC_ClockConfig+0x1f8>)
 800204e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x1fc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fd07 	bl	8000a68 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	72fb      	strb	r3, [r7, #11]

  return status;
 800205e:	7afb      	ldrb	r3, [r7, #11]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	08004448 	.word	0x08004448
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208a:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002094:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d11e      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020b0:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020bc:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e005      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HAL_RCC_GetSysClockFreq+0x110>)
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e004      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002100:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x114>)
 8002102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d134      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0xa6>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d003      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0xac>
 8002120:	e005      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <HAL_RCC_GetSysClockFreq+0x110>)
 8002124:	617b      	str	r3, [r7, #20]
      break;
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	617b      	str	r3, [r7, #20]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	617b      	str	r3, [r7, #20]
      break;
 8002132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	3301      	adds	r3, #1
 8002140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	fb03 f202 	mul.w	r2, r3, r2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	0e5b      	lsrs	r3, r3, #25
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	3301      	adds	r3, #1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002174:	69bb      	ldr	r3, [r7, #24]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	08004460 	.word	0x08004460
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021b0:	f7ff fff0 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4904      	ldr	r1, [pc, #16]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004458 	.word	0x08004458

080021d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021dc:	f7ff ffda 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0adb      	lsrs	r3, r3, #11
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4904      	ldr	r1, [pc, #16]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08004458 	.word	0x08004458

08002204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800221c:	f7ff f9ee 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 8002220:	6178      	str	r0, [r7, #20]
 8002222:	e014      	b.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	4a24      	ldr	r2, [pc, #144]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002230:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800223c:	f7ff f9de 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 8002240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002254:	d10b      	bne.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b80      	cmp	r3, #128	@ 0x80
 800225a:	d919      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002260:	d902      	bls.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002262:	2302      	movs	r3, #2
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e013      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002268:	2301      	movs	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e010      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d902      	bls.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002274:	2303      	movs	r3, #3
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e00a      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b80      	cmp	r3, #128	@ 0x80
 800227e:	d102      	bne.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e004      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b70      	cmp	r3, #112	@ 0x70
 800228a:	d101      	bne.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 0207 	bic.w	r2, r3, #7
 8002298:	4909      	ldr	r1, [pc, #36]	@ (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40022000 	.word	0x40022000

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022cc:	2300      	movs	r3, #0
 80022ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d0:	2300      	movs	r3, #0
 80022d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d041      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e8:	d02a      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022ee:	d824      	bhi.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022f4:	d008      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022fa:	d81e      	bhi.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002304:	d010      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002306:	e018      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002308:	4b86      	ldr	r3, [pc, #536]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a85      	ldr	r2, [pc, #532]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002312:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002314:	e015      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fabb 	bl	8002898 <RCCEx_PLLSAI1_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002326:	e00c      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3320      	adds	r3, #32
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fba6 	bl	8002a80 <RCCEx_PLLSAI2_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002338:	e003      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	74fb      	strb	r3, [r7, #19]
      break;
 800233e:	e000      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002348:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002356:	4973      	ldr	r1, [pc, #460]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800235e:	e001      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d041      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002374:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002378:	d02a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800237a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800237e:	d824      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002380:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002384:	d008      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800238a:	d81e      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002396:	e018      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002398:	4b62      	ldr	r3, [pc, #392]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a61      	ldr	r2, [pc, #388]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a4:	e015      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fa73 	bl	8002898 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b6:	e00c      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3320      	adds	r3, #32
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fb5e 	bl	8002a80 <RCCEx_PLLSAI2_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	74fb      	strb	r3, [r7, #19]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d8:	4b52      	ldr	r3, [pc, #328]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023e6:	494f      	ldr	r1, [pc, #316]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a0 	beq.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	4a40      	ldr	r2, [pc, #256]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	@ 0x58
 8002428:	4b3e      	ldr	r3, [pc, #248]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002438:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3a      	ldr	r2, [pc, #232]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002444:	f7fe fb60 	bl	8000b08 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244a:	e009      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244c:	f7fe fb5c 	bl	8000b08 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d902      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	74fb      	strb	r3, [r7, #19]
        break;
 800245e:	e005      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002460:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ef      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d15c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002472:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800247c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01f      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d019      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a2:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fb1b 	bl	8000b08 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d4:	e00b      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fb17 	bl	8000b08 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d902      	bls.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	74fb      	strb	r3, [r7, #19]
            break;
 80024ec:	e006      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ec      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002512:	4904      	ldr	r1, [pc, #16]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800251a:	e009      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
 8002520:	e006      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002530:	7c7b      	ldrb	r3, [r7, #17]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b9e      	ldr	r3, [pc, #632]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a9d      	ldr	r2, [pc, #628]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800254e:	4b98      	ldr	r3, [pc, #608]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002554:	f023 0203 	bic.w	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	4994      	ldr	r1, [pc, #592]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002570:	4b8f      	ldr	r3, [pc, #572]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f023 020c 	bic.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257e:	498c      	ldr	r1, [pc, #560]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002592:	4b87      	ldr	r3, [pc, #540]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	4983      	ldr	r1, [pc, #524]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b4:	4b7e      	ldr	r3, [pc, #504]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	497b      	ldr	r1, [pc, #492]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e4:	4972      	ldr	r1, [pc, #456]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f8:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	496a      	ldr	r1, [pc, #424]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	4961      	ldr	r1, [pc, #388]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800263c:	4b5c      	ldr	r3, [pc, #368]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264a:	4959      	ldr	r1, [pc, #356]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265e:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266c:	4950      	ldr	r1, [pc, #320]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	4948      	ldr	r1, [pc, #288]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	493f      	ldr	r1, [pc, #252]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d028      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c4:	4b3a      	ldr	r3, [pc, #232]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d2:	4937      	ldr	r1, [pc, #220]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a31      	ldr	r2, [pc, #196]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ee:	60d3      	str	r3, [r2, #12]
 80026f0:	e011      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026fa:	d10c      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f8c8 	bl	8002898 <RCCEx_PLLSAI1_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d028      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002728:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	491f      	ldr	r1, [pc, #124]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002740:	d106      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002742:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274c:	60d3      	str	r3, [r2, #12]
 800274e:	e011      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002754:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f899 	bl	8002898 <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02b      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800279e:	d109      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a02      	ldr	r2, [pc, #8]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
 80027ac:	e014      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f867 	bl	8002898 <RCCEx_PLLSAI1_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d02f      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027f2:	4928      	ldr	r1, [pc, #160]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002802:	d10d      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f844 	bl	8002898 <RCCEx_PLLSAI1_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d014      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	74bb      	strb	r3, [r7, #18]
 800281e:	e011      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002828:	d10c      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3320      	adds	r3, #32
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f925 	bl	8002a80 <RCCEx_PLLSAI2_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002850:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800285e:	490d      	ldr	r1, [pc, #52]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002882:	4904      	ldr	r1, [pc, #16]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800288a:	7cbb      	ldrb	r3, [r7, #18]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a6:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028b2:	4b72      	ldr	r3, [pc, #456]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10d      	bne.n	80028de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
       ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
       ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d047      	beq.n	800296e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	e044      	b.n	800296e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d018      	beq.n	800291e <RCCEx_PLLSAI1_Config+0x86>
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d825      	bhi.n	800293c <RCCEx_PLLSAI1_Config+0xa4>
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d002      	beq.n	80028fa <RCCEx_PLLSAI1_Config+0x62>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d009      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x74>
 80028f8:	e020      	b.n	800293c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028fa:	4b60      	ldr	r3, [pc, #384]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11d      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290a:	e01a      	b.n	8002942 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800290c:	4b5b      	ldr	r3, [pc, #364]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d116      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e013      	b.n	8002946 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291e:	4b57      	ldr	r3, [pc, #348]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800292a:	4b54      	ldr	r3, [pc, #336]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800293a:	e006      	b.n	800294a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e004      	b.n	800294c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800294a:	bf00      	nop
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002952:	4b4a      	ldr	r3, [pc, #296]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	430b      	orrs	r3, r1
 8002968:	4944      	ldr	r1, [pc, #272]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d17d      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002974:	4b41      	ldr	r3, [pc, #260]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a40      	ldr	r2, [pc, #256]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe f8c2 	bl	8000b08 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002988:	f7fe f8be 	bl	8000b08 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
        break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800299c:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ef      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d160      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	0211      	lsls	r1, r2, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	0912      	lsrs	r2, r2, #4
 80029cc:	0452      	lsls	r2, r2, #17
 80029ce:	430a      	orrs	r2, r1
 80029d0:	492a      	ldr	r1, [pc, #168]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	610b      	str	r3, [r1, #16]
 80029d6:	e027      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d112      	bne.n	8002a04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029de:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	0211      	lsls	r1, r2, #8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6912      	ldr	r2, [r2, #16]
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0552      	lsls	r2, r2, #21
 80029fa:	430a      	orrs	r2, r1
 80029fc:	491f      	ldr	r1, [pc, #124]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	610b      	str	r3, [r1, #16]
 8002a02:	e011      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a04:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6892      	ldr	r2, [r2, #8]
 8002a14:	0211      	lsls	r1, r2, #8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6952      	ldr	r2, [r2, #20]
 8002a1a:	0852      	lsrs	r2, r2, #1
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	0652      	lsls	r2, r2, #25
 8002a20:	430a      	orrs	r2, r1
 8002a22:	4916      	ldr	r1, [pc, #88]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe f868 	bl	8000b08 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a3c:	f7fe f864 	bl	8000b08 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a50:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ef      	beq.n	8002a3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4904      	ldr	r1, [pc, #16]	@ (8002a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a9a:	4b67      	ldr	r3, [pc, #412]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d10d      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
       ||
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ab2:	4b61      	ldr	r3, [pc, #388]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d047      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	e044      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d018      	beq.n	8002b06 <RCCEx_PLLSAI2_Config+0x86>
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d825      	bhi.n	8002b24 <RCCEx_PLLSAI2_Config+0xa4>
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d002      	beq.n	8002ae2 <RCCEx_PLLSAI2_Config+0x62>
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d009      	beq.n	8002af4 <RCCEx_PLLSAI2_Config+0x74>
 8002ae0:	e020      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae2:	4b55      	ldr	r3, [pc, #340]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11d      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af2:	e01a      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af4:	4b50      	ldr	r3, [pc, #320]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b04:	e013      	b.n	8002b2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b06:	4b4c      	ldr	r3, [pc, #304]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b12:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b22:	e006      	b.n	8002b32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      break;
 8002b28:	e004      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	4939      	ldr	r1, [pc, #228]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d167      	bne.n	8002c2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b5c:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fd ffce 	bl	8000b08 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b70:	f7fd ffca 	bl	8000b08 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
        break;
 8002b82:	e005      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b84:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d14a      	bne.n	8002c2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d111      	bne.n	8002bc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b9c:	4b26      	ldr	r3, [pc, #152]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6892      	ldr	r2, [r2, #8]
 8002bac:	0211      	lsls	r1, r2, #8
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	0912      	lsrs	r2, r2, #4
 8002bb4:	0452      	lsls	r2, r2, #17
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	491f      	ldr	r1, [pc, #124]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	614b      	str	r3, [r1, #20]
 8002bbe:	e011      	b.n	8002be4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6912      	ldr	r2, [r2, #16]
 8002bd6:	0852      	lsrs	r2, r2, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0652      	lsls	r2, r2, #25
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	4916      	ldr	r1, [pc, #88]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fd ff8a 	bl	8000b08 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf6:	e009      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf8:	f7fd ff86 	bl	8000b08 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	73fb      	strb	r3, [r7, #15]
          break;
 8002c0a:	e005      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4904      	ldr	r1, [pc, #16]	@ (8002c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e040      	b.n	8002cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd fdd0 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fe98 	bl	80039b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fbdd 	bl	8003448 <UART_SetConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e01b      	b.n	8002cd0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 ff17 	bl	8003afc <UART_CheckIdleState>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d177      	bne.n	8002de0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Transmit+0x24>
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e070      	b.n	8002de2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2221      	movs	r2, #33	@ 0x21
 8002d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0e:	f7fd fefb 	bl	8000b08 <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2c:	d108      	bne.n	8002d40 <HAL_UART_Transmit+0x68>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e003      	b.n	8002d48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d48:	e02f      	b.n	8002daa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	@ 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 ff79 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e03b      	b.n	8002de2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3302      	adds	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e007      	b.n	8002d98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1c9      	bne.n	8002d4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2140      	movs	r1, #64	@ 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 ff43 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e005      	b.n	8002de2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0ba      	sub	sp, #232	@ 0xe8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002e16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d115      	bne.n	8002e54 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00f      	beq.n	8002e54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 82ca 	beq.w	80033de <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
      }
      return;
 8002e52:	e2c4      	b.n	80033de <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8117 	beq.w	800308c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002e6e:	4b85      	ldr	r3, [pc, #532]	@ (8003084 <HAL_UART_IRQHandler+0x298>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 810a 	beq.w	800308c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d011      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xbc>
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d011      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xec>
 8002eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d011      	beq.n	8002f08 <HAL_UART_IRQHandler+0x11c>
 8002ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2208      	movs	r2, #8
 8002f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f3a:	f043 0208 	orr.w	r2, r3, #8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_UART_IRQHandler+0x18a>
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8230 	beq.w	80033e2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d005      	beq.n	8002fce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d04f      	beq.n	800306e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 ff70 	bl	8003eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	d141      	bne.n	8003066 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800300e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800301a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1d9      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	4a13      	ldr	r2, [pc, #76]	@ (8003088 <HAL_UART_IRQHandler+0x29c>)
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fff8 	bl	8001038 <HAL_DMA_Abort_IT>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003058:	4610      	mov	r0, r2
 800305a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	e00f      	b.n	800307e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9e8 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	e00b      	b.n	800307e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9e4 	bl	8003434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306c:	e007      	b.n	800307e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9e0 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800307c:	e1b1      	b.n	80033e2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307e:	bf00      	nop
    return;
 8003080:	e1af      	b.n	80033e2 <HAL_UART_IRQHandler+0x5f6>
 8003082:	bf00      	nop
 8003084:	04000120 	.word	0x04000120
 8003088:	08004165 	.word	0x08004165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 816a 	bne.w	800336a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8163 	beq.w	800336a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 815c 	beq.w	800336a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2210      	movs	r2, #16
 80030b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c4:	2b40      	cmp	r3, #64	@ 0x40
 80030c6:	f040 80d4 	bne.w	8003272 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80ad 	beq.w	800323a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80030e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ea:	429a      	cmp	r2, r3
 80030ec:	f080 80a5 	bcs.w	800323a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8086 	bne.w	8003218 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003136:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800313a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003142:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800314e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1da      	bne.n	800310c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3308      	adds	r3, #8
 800315c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3308      	adds	r3, #8
 8003176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800317a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800317e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003182:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800318c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e1      	bne.n	8003156 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3308      	adds	r3, #8
 8003198:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3308      	adds	r3, #8
 80031b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e3      	bne.n	8003192 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e8:	f023 0310 	bic.w	r3, r3, #16
 80031ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e4      	bne.n	80031d8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fed2 	bl	8000fbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800322a:	b29b      	uxth	r3, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	b29b      	uxth	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd f948 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003238:	e0d5      	b.n	80033e6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003240:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003244:	429a      	cmp	r2, r3
 8003246:	f040 80ce 	bne.w	80033e6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 80c5 	bne.w	80033e6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd f92c 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
      return;
 8003270:	e0b9      	b.n	80033e6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800327e:	b29b      	uxth	r3, r3
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80ab 	beq.w	80033ea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a6 	beq.w	80033ea <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e4      	bne.n	800329e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	623b      	str	r3, [r7, #32]
   return(result);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3308      	adds	r3, #8
 80032f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e3      	bne.n	80032d4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	60fb      	str	r3, [r7, #12]
   return(result);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0310 	bic.w	r3, r3, #16
 8003334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	617b      	str	r3, [r7, #20]
   return(result);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e4      	bne.n	8003320 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd f8b0 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003368:	e03f      	b.n	80033ea <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <HAL_UART_IRQHandler+0x5a8>
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800337a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800338a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 ff29 	bl	80041e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003392:	e02d      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
    }
    return;
 80033bc:	e017      	b.n	80033ee <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_UART_IRQHandler+0x604>
 80033ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 feda 	bl	8004190 <UART_EndTransmit_IT>
    return;
 80033dc:	e008      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
      return;
 80033de:	bf00      	nop
 80033e0:	e006      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
    return;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
      return;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
      return;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_UART_IRQHandler+0x604>
    return;
 80033ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033f0:	37e8      	adds	r7, #232	@ 0xe8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344c:	b08a      	sub	sp, #40	@ 0x28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4313      	orrs	r3, r2
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4ba4      	ldr	r3, [pc, #656]	@ (8003708 <UART_SetConfig+0x2c0>)
 8003478:	4013      	ands	r3, r2
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a99      	ldr	r2, [pc, #612]	@ (800370c <UART_SetConfig+0x2c4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	4313      	orrs	r3, r2
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a90      	ldr	r2, [pc, #576]	@ (8003710 <UART_SetConfig+0x2c8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d126      	bne.n	8003520 <UART_SetConfig+0xd8>
 80034d2:	4b90      	ldr	r3, [pc, #576]	@ (8003714 <UART_SetConfig+0x2cc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d81b      	bhi.n	8003518 <UART_SetConfig+0xd0>
 80034e0:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <UART_SetConfig+0xa0>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003509 	.word	0x08003509
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003511 	.word	0x08003511
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fe:	e116      	b.n	800372e <UART_SetConfig+0x2e6>
 8003500:	2302      	movs	r3, #2
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e112      	b.n	800372e <UART_SetConfig+0x2e6>
 8003508:	2304      	movs	r3, #4
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350e:	e10e      	b.n	800372e <UART_SetConfig+0x2e6>
 8003510:	2308      	movs	r3, #8
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e10a      	b.n	800372e <UART_SetConfig+0x2e6>
 8003518:	2310      	movs	r3, #16
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351e:	e106      	b.n	800372e <UART_SetConfig+0x2e6>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a7c      	ldr	r2, [pc, #496]	@ (8003718 <UART_SetConfig+0x2d0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d138      	bne.n	800359c <UART_SetConfig+0x154>
 800352a:	4b7a      	ldr	r3, [pc, #488]	@ (8003714 <UART_SetConfig+0x2cc>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d82d      	bhi.n	8003594 <UART_SetConfig+0x14c>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <UART_SetConfig+0xf8>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	08003595 	.word	0x08003595
 8003548:	08003595 	.word	0x08003595
 800354c:	08003595 	.word	0x08003595
 8003550:	08003585 	.word	0x08003585
 8003554:	08003595 	.word	0x08003595
 8003558:	08003595 	.word	0x08003595
 800355c:	08003595 	.word	0x08003595
 8003560:	0800357d 	.word	0x0800357d
 8003564:	08003595 	.word	0x08003595
 8003568:	08003595 	.word	0x08003595
 800356c:	08003595 	.word	0x08003595
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357a:	e0d8      	b.n	800372e <UART_SetConfig+0x2e6>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003582:	e0d4      	b.n	800372e <UART_SetConfig+0x2e6>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358a:	e0d0      	b.n	800372e <UART_SetConfig+0x2e6>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003592:	e0cc      	b.n	800372e <UART_SetConfig+0x2e6>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359a:	e0c8      	b.n	800372e <UART_SetConfig+0x2e6>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5e      	ldr	r2, [pc, #376]	@ (800371c <UART_SetConfig+0x2d4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d125      	bne.n	80035f2 <UART_SetConfig+0x1aa>
 80035a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <UART_SetConfig+0x2cc>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035b0:	2b30      	cmp	r3, #48	@ 0x30
 80035b2:	d016      	beq.n	80035e2 <UART_SetConfig+0x19a>
 80035b4:	2b30      	cmp	r3, #48	@ 0x30
 80035b6:	d818      	bhi.n	80035ea <UART_SetConfig+0x1a2>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d00a      	beq.n	80035d2 <UART_SetConfig+0x18a>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d814      	bhi.n	80035ea <UART_SetConfig+0x1a2>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <UART_SetConfig+0x182>
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d008      	beq.n	80035da <UART_SetConfig+0x192>
 80035c8:	e00f      	b.n	80035ea <UART_SetConfig+0x1a2>
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d0:	e0ad      	b.n	800372e <UART_SetConfig+0x2e6>
 80035d2:	2302      	movs	r3, #2
 80035d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d8:	e0a9      	b.n	800372e <UART_SetConfig+0x2e6>
 80035da:	2304      	movs	r3, #4
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e0:	e0a5      	b.n	800372e <UART_SetConfig+0x2e6>
 80035e2:	2308      	movs	r3, #8
 80035e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e8:	e0a1      	b.n	800372e <UART_SetConfig+0x2e6>
 80035ea:	2310      	movs	r3, #16
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f0:	e09d      	b.n	800372e <UART_SetConfig+0x2e6>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003720 <UART_SetConfig+0x2d8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d125      	bne.n	8003648 <UART_SetConfig+0x200>
 80035fc:	4b45      	ldr	r3, [pc, #276]	@ (8003714 <UART_SetConfig+0x2cc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003602:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003606:	2bc0      	cmp	r3, #192	@ 0xc0
 8003608:	d016      	beq.n	8003638 <UART_SetConfig+0x1f0>
 800360a:	2bc0      	cmp	r3, #192	@ 0xc0
 800360c:	d818      	bhi.n	8003640 <UART_SetConfig+0x1f8>
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d00a      	beq.n	8003628 <UART_SetConfig+0x1e0>
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d814      	bhi.n	8003640 <UART_SetConfig+0x1f8>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <UART_SetConfig+0x1d8>
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d008      	beq.n	8003630 <UART_SetConfig+0x1e8>
 800361e:	e00f      	b.n	8003640 <UART_SetConfig+0x1f8>
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e082      	b.n	800372e <UART_SetConfig+0x2e6>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e07e      	b.n	800372e <UART_SetConfig+0x2e6>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003636:	e07a      	b.n	800372e <UART_SetConfig+0x2e6>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363e:	e076      	b.n	800372e <UART_SetConfig+0x2e6>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003646:	e072      	b.n	800372e <UART_SetConfig+0x2e6>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a35      	ldr	r2, [pc, #212]	@ (8003724 <UART_SetConfig+0x2dc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d12a      	bne.n	80036a8 <UART_SetConfig+0x260>
 8003652:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <UART_SetConfig+0x2cc>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003660:	d01a      	beq.n	8003698 <UART_SetConfig+0x250>
 8003662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003666:	d81b      	bhi.n	80036a0 <UART_SetConfig+0x258>
 8003668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800366c:	d00c      	beq.n	8003688 <UART_SetConfig+0x240>
 800366e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003672:	d815      	bhi.n	80036a0 <UART_SetConfig+0x258>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <UART_SetConfig+0x238>
 8003678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367c:	d008      	beq.n	8003690 <UART_SetConfig+0x248>
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x258>
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e052      	b.n	800372e <UART_SetConfig+0x2e6>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e04e      	b.n	800372e <UART_SetConfig+0x2e6>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e04a      	b.n	800372e <UART_SetConfig+0x2e6>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369e:	e046      	b.n	800372e <UART_SetConfig+0x2e6>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a6:	e042      	b.n	800372e <UART_SetConfig+0x2e6>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a17      	ldr	r2, [pc, #92]	@ (800370c <UART_SetConfig+0x2c4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d13a      	bne.n	8003728 <UART_SetConfig+0x2e0>
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <UART_SetConfig+0x2cc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036c0:	d01a      	beq.n	80036f8 <UART_SetConfig+0x2b0>
 80036c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036c6:	d81b      	bhi.n	8003700 <UART_SetConfig+0x2b8>
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036cc:	d00c      	beq.n	80036e8 <UART_SetConfig+0x2a0>
 80036ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d2:	d815      	bhi.n	8003700 <UART_SetConfig+0x2b8>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <UART_SetConfig+0x298>
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036dc:	d008      	beq.n	80036f0 <UART_SetConfig+0x2a8>
 80036de:	e00f      	b.n	8003700 <UART_SetConfig+0x2b8>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e6:	e022      	b.n	800372e <UART_SetConfig+0x2e6>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e01e      	b.n	800372e <UART_SetConfig+0x2e6>
 80036f0:	2304      	movs	r3, #4
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e01a      	b.n	800372e <UART_SetConfig+0x2e6>
 80036f8:	2308      	movs	r3, #8
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e016      	b.n	800372e <UART_SetConfig+0x2e6>
 8003700:	2310      	movs	r3, #16
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e012      	b.n	800372e <UART_SetConfig+0x2e6>
 8003708:	efff69f3 	.word	0xefff69f3
 800370c:	40008000 	.word	0x40008000
 8003710:	40013800 	.word	0x40013800
 8003714:	40021000 	.word	0x40021000
 8003718:	40004400 	.word	0x40004400
 800371c:	40004800 	.word	0x40004800
 8003720:	40004c00 	.word	0x40004c00
 8003724:	40005000 	.word	0x40005000
 8003728:	2310      	movs	r3, #16
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a9f      	ldr	r2, [pc, #636]	@ (80039b0 <UART_SetConfig+0x568>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d17a      	bne.n	800382e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003738:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800373c:	2b08      	cmp	r3, #8
 800373e:	d824      	bhi.n	800378a <UART_SetConfig+0x342>
 8003740:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <UART_SetConfig+0x300>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800376d 	.word	0x0800376d
 800374c:	0800378b 	.word	0x0800378b
 8003750:	08003775 	.word	0x08003775
 8003754:	0800378b 	.word	0x0800378b
 8003758:	0800377b 	.word	0x0800377b
 800375c:	0800378b 	.word	0x0800378b
 8003760:	0800378b 	.word	0x0800378b
 8003764:	0800378b 	.word	0x0800378b
 8003768:	08003783 	.word	0x08003783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7fe fd1e 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8003770:	61f8      	str	r0, [r7, #28]
        break;
 8003772:	e010      	b.n	8003796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003774:	4b8f      	ldr	r3, [pc, #572]	@ (80039b4 <UART_SetConfig+0x56c>)
 8003776:	61fb      	str	r3, [r7, #28]
        break;
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377a:	f7fe fc7f 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800377e:	61f8      	str	r0, [r7, #28]
        break;
 8003780:	e009      	b.n	8003796 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003786:	61fb      	str	r3, [r7, #28]
        break;
 8003788:	e005      	b.n	8003796 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80fb 	beq.w	8003994 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d305      	bcc.n	80037ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d903      	bls.n	80037c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037c0:	e0e8      	b.n	8003994 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2200      	movs	r2, #0
 80037c6:	461c      	mov	r4, r3
 80037c8:	4615      	mov	r5, r2
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	022b      	lsls	r3, r5, #8
 80037d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037d8:	0222      	lsls	r2, r4, #8
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	6849      	ldr	r1, [r1, #4]
 80037de:	0849      	lsrs	r1, r1, #1
 80037e0:	2000      	movs	r0, #0
 80037e2:	4688      	mov	r8, r1
 80037e4:	4681      	mov	r9, r0
 80037e6:	eb12 0a08 	adds.w	sl, r2, r8
 80037ea:	eb43 0b09 	adc.w	fp, r3, r9
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037fc:	4650      	mov	r0, sl
 80037fe:	4659      	mov	r1, fp
 8003800:	f7fc fcea 	bl	80001d8 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4613      	mov	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003812:	d308      	bcc.n	8003826 <UART_SetConfig+0x3de>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381a:	d204      	bcs.n	8003826 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	e0b6      	b.n	8003994 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800382c:	e0b2      	b.n	8003994 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003836:	d15e      	bne.n	80038f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800383c:	2b08      	cmp	r3, #8
 800383e:	d828      	bhi.n	8003892 <UART_SetConfig+0x44a>
 8003840:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <UART_SetConfig+0x400>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003875 	.word	0x08003875
 8003850:	0800387d 	.word	0x0800387d
 8003854:	08003893 	.word	0x08003893
 8003858:	08003883 	.word	0x08003883
 800385c:	08003893 	.word	0x08003893
 8003860:	08003893 	.word	0x08003893
 8003864:	08003893 	.word	0x08003893
 8003868:	0800388b 	.word	0x0800388b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7fe fc9e 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 8003870:	61f8      	str	r0, [r7, #28]
        break;
 8003872:	e014      	b.n	800389e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7fe fcb0 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 8003878:	61f8      	str	r0, [r7, #28]
        break;
 800387a:	e010      	b.n	800389e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800387c:	4b4d      	ldr	r3, [pc, #308]	@ (80039b4 <UART_SetConfig+0x56c>)
 800387e:	61fb      	str	r3, [r7, #28]
        break;
 8003880:	e00d      	b.n	800389e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003882:	f7fe fbfb 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8003886:	61f8      	str	r0, [r7, #28]
        break;
 8003888:	e009      	b.n	800389e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388e:	61fb      	str	r3, [r7, #28]
        break;
 8003890:	e005      	b.n	800389e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800389c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d077      	beq.n	8003994 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005a      	lsls	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d916      	bls.n	80038ee <UART_SetConfig+0x4a6>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c6:	d212      	bcs.n	80038ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f023 030f 	bic.w	r3, r3, #15
 80038d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	b29a      	uxth	r2, r3
 80038de:	8afb      	ldrh	r3, [r7, #22]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	8afa      	ldrh	r2, [r7, #22]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	e052      	b.n	8003994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038f4:	e04e      	b.n	8003994 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d827      	bhi.n	800394e <UART_SetConfig+0x506>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0x4bc>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003931 	.word	0x08003931
 800390c:	08003939 	.word	0x08003939
 8003910:	0800394f 	.word	0x0800394f
 8003914:	0800393f 	.word	0x0800393f
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800394f 	.word	0x0800394f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7fe fc40 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 800392c:	61f8      	str	r0, [r7, #28]
        break;
 800392e:	e014      	b.n	800395a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7fe fc52 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 8003934:	61f8      	str	r0, [r7, #28]
        break;
 8003936:	e010      	b.n	800395a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <UART_SetConfig+0x56c>)
 800393a:	61fb      	str	r3, [r7, #28]
        break;
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe fb9d 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8003942:	61f8      	str	r0, [r7, #28]
        break;
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	61fb      	str	r3, [r7, #28]
        break;
 800394c:	e005      	b.n	800395a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003958:	bf00      	nop
    }

    if (pclk != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d019      	beq.n	8003994 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085a      	lsrs	r2, r3, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	441a      	add	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	d909      	bls.n	800398e <UART_SetConfig+0x546>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d205      	bcs.n	800398e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	e002      	b.n	8003994 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	@ 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ae:	bf00      	nop
 80039b0:	40008000 	.word	0x40008000
 80039b4:	00f42400 	.word	0x00f42400

080039b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01a      	beq.n	8003ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab6:	d10a      	bne.n	8003ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b098      	sub	sp, #96	@ 0x60
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b0c:	f7fc fffc 	bl	8000b08 <HAL_GetTick>
 8003b10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d12e      	bne.n	8003b7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f88c 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d021      	beq.n	8003b7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e062      	b.n	8003c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d149      	bne.n	8003c20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f856 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d03c      	beq.n	8003c20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf8:	61fa      	str	r2, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	617b      	str	r3, [r7, #20]
   return(result);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e011      	b.n	8003c44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3758      	adds	r7, #88	@ 0x58
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e04f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d04b      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fc ff4f 	bl	8000b08 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e04e      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d037      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d034      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d031      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d110      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2208      	movs	r2, #8
 8003cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f8ff 	bl	8003eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e029      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd8:	d111      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f8e5 	bl	8003eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0a0      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b096      	sub	sp, #88	@ 0x58
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2222      	movs	r2, #34	@ 0x22
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d028      	beq.n	8003dae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d60:	4a3e      	ldr	r2, [pc, #248]	@ (8003e5c <UART_Start_Receive_DMA+0x134>)
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d68:	4a3d      	ldr	r2, [pc, #244]	@ (8003e60 <UART_Start_Receive_DMA+0x138>)
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d70:	4a3c      	ldr	r2, [pc, #240]	@ (8003e64 <UART_Start_Receive_DMA+0x13c>)
 8003d72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d78:	2200      	movs	r2, #0
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3324      	adds	r3, #36	@ 0x24
 8003d86:	4619      	mov	r1, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	f7fd f8b4 	bl	8000efc <HAL_DMA_Start_IT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e051      	b.n	8003e52 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e08:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e3c:	623a      	str	r2, [r7, #32]
 8003e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	69f9      	ldr	r1, [r7, #28]
 8003e42:	6a3a      	ldr	r2, [r7, #32]
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e5      	bne.n	8003e1c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3758      	adds	r7, #88	@ 0x58
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08003f7d 	.word	0x08003f7d
 8003e60:	080040a9 	.word	0x080040a9
 8003e64:	080040e7 	.word	0x080040e7

08003e68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	@ 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003ea8:	bf00      	nop
 8003eaa:	3724      	adds	r7, #36	@ 0x24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b095      	sub	sp, #84	@ 0x54
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8003edc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e6      	bne.n	8003ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d118      	bne.n	8003f5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6979      	ldr	r1, [r7, #20]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	613b      	str	r3, [r7, #16]
   return(result);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e6      	bne.n	8003f2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f70:	bf00      	nop
 8003f72:	3754      	adds	r7, #84	@ 0x54
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b09c      	sub	sp, #112	@ 0x70
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d171      	bne.n	800407c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ff2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	623b      	str	r3, [r7, #32]
   return(result);
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800401c:	663b      	str	r3, [r7, #96]	@ 0x60
 800401e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004026:	633a      	str	r2, [r7, #48]	@ 0x30
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800402c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e5      	bne.n	8004006 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800403a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004046:	2b01      	cmp	r3, #1
 8004048:	d118      	bne.n	800407c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60fb      	str	r3, [r7, #12]
   return(result);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	617b      	str	r3, [r7, #20]
   return(result);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800407c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407e:	2200      	movs	r2, #0
 8004080:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800408c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004090:	4619      	mov	r1, r3
 8004092:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004094:	f7fc fa18 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004098:	e002      	b.n	80040a0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800409a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800409c:	f7ff f9b6 	bl	800340c <HAL_UART_RxCpltCallback>
}
 80040a0:	bf00      	nop
 80040a2:	3770      	adds	r7, #112	@ 0x70
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d109      	bne.n	80040d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7fc f9f9 	bl	80004c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040d6:	e002      	b.n	80040de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff f9a1 	bl	8003420 <HAL_UART_RxHalfCpltCallback>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004100:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d109      	bne.n	8004124 <UART_DMAError+0x3e>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b21      	cmp	r3, #33	@ 0x21
 8004114:	d106      	bne.n	8004124 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff fea2 	bl	8003e68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b40      	cmp	r3, #64	@ 0x40
 8004130:	d109      	bne.n	8004146 <UART_DMAError+0x60>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b22      	cmp	r3, #34	@ 0x22
 8004136:	d106      	bne.n	8004146 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f7ff feb7 	bl	8003eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414c:	f043 0210 	orr.w	r2, r3, #16
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7ff f96c 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff f956 	bl	8003434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff f90e 	bl	80033f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08c      	sub	sp, #48	@ 0x30
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420c:	2b20      	cmp	r3, #32
 800420e:	d142      	bne.n	8004296 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e03b      	b.n	8004298 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	461a      	mov	r2, r3
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fd78 	bl	8003d28 <UART_Start_Receive_DMA>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800423e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004242:	2b00      	cmp	r3, #0
 8004244:	d124      	bne.n	8004290 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	2b01      	cmp	r3, #1
 800424c:	d11d      	bne.n	800428a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2210      	movs	r2, #16
 8004254:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	617b      	str	r3, [r7, #20]
   return(result);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f043 0310 	orr.w	r3, r3, #16
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	61fb      	str	r3, [r7, #28]
   return(result);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004288:	e002      	b.n	8004290 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004294:	e000      	b.n	8004298 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3730      	adds	r7, #48	@ 0x30
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <atoi>:
 80042a0:	220a      	movs	r2, #10
 80042a2:	2100      	movs	r1, #0
 80042a4:	f000 b87a 	b.w	800439c <strtol>

080042a8 <_strtol_l.constprop.0>:
 80042a8:	2b24      	cmp	r3, #36	@ 0x24
 80042aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ae:	4686      	mov	lr, r0
 80042b0:	4690      	mov	r8, r2
 80042b2:	d801      	bhi.n	80042b8 <_strtol_l.constprop.0+0x10>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d106      	bne.n	80042c6 <_strtol_l.constprop.0+0x1e>
 80042b8:	f000 f882 	bl	80043c0 <__errno>
 80042bc:	2316      	movs	r3, #22
 80042be:	6003      	str	r3, [r0, #0]
 80042c0:	2000      	movs	r0, #0
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	4834      	ldr	r0, [pc, #208]	@ (8004398 <_strtol_l.constprop.0+0xf0>)
 80042c8:	460d      	mov	r5, r1
 80042ca:	462a      	mov	r2, r5
 80042cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042d0:	5d06      	ldrb	r6, [r0, r4]
 80042d2:	f016 0608 	ands.w	r6, r6, #8
 80042d6:	d1f8      	bne.n	80042ca <_strtol_l.constprop.0+0x22>
 80042d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80042da:	d12d      	bne.n	8004338 <_strtol_l.constprop.0+0x90>
 80042dc:	782c      	ldrb	r4, [r5, #0]
 80042de:	2601      	movs	r6, #1
 80042e0:	1c95      	adds	r5, r2, #2
 80042e2:	f033 0210 	bics.w	r2, r3, #16
 80042e6:	d109      	bne.n	80042fc <_strtol_l.constprop.0+0x54>
 80042e8:	2c30      	cmp	r4, #48	@ 0x30
 80042ea:	d12a      	bne.n	8004342 <_strtol_l.constprop.0+0x9a>
 80042ec:	782a      	ldrb	r2, [r5, #0]
 80042ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80042f2:	2a58      	cmp	r2, #88	@ 0x58
 80042f4:	d125      	bne.n	8004342 <_strtol_l.constprop.0+0x9a>
 80042f6:	786c      	ldrb	r4, [r5, #1]
 80042f8:	2310      	movs	r3, #16
 80042fa:	3502      	adds	r5, #2
 80042fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004300:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004304:	2200      	movs	r2, #0
 8004306:	fbbc f9f3 	udiv	r9, ip, r3
 800430a:	4610      	mov	r0, r2
 800430c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004310:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004314:	2f09      	cmp	r7, #9
 8004316:	d81b      	bhi.n	8004350 <_strtol_l.constprop.0+0xa8>
 8004318:	463c      	mov	r4, r7
 800431a:	42a3      	cmp	r3, r4
 800431c:	dd27      	ble.n	800436e <_strtol_l.constprop.0+0xc6>
 800431e:	1c57      	adds	r7, r2, #1
 8004320:	d007      	beq.n	8004332 <_strtol_l.constprop.0+0x8a>
 8004322:	4581      	cmp	r9, r0
 8004324:	d320      	bcc.n	8004368 <_strtol_l.constprop.0+0xc0>
 8004326:	d101      	bne.n	800432c <_strtol_l.constprop.0+0x84>
 8004328:	45a2      	cmp	sl, r4
 800432a:	db1d      	blt.n	8004368 <_strtol_l.constprop.0+0xc0>
 800432c:	fb00 4003 	mla	r0, r0, r3, r4
 8004330:	2201      	movs	r2, #1
 8004332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004336:	e7eb      	b.n	8004310 <_strtol_l.constprop.0+0x68>
 8004338:	2c2b      	cmp	r4, #43	@ 0x2b
 800433a:	bf04      	itt	eq
 800433c:	782c      	ldrbeq	r4, [r5, #0]
 800433e:	1c95      	addeq	r5, r2, #2
 8004340:	e7cf      	b.n	80042e2 <_strtol_l.constprop.0+0x3a>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1da      	bne.n	80042fc <_strtol_l.constprop.0+0x54>
 8004346:	2c30      	cmp	r4, #48	@ 0x30
 8004348:	bf0c      	ite	eq
 800434a:	2308      	moveq	r3, #8
 800434c:	230a      	movne	r3, #10
 800434e:	e7d5      	b.n	80042fc <_strtol_l.constprop.0+0x54>
 8004350:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004354:	2f19      	cmp	r7, #25
 8004356:	d801      	bhi.n	800435c <_strtol_l.constprop.0+0xb4>
 8004358:	3c37      	subs	r4, #55	@ 0x37
 800435a:	e7de      	b.n	800431a <_strtol_l.constprop.0+0x72>
 800435c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004360:	2f19      	cmp	r7, #25
 8004362:	d804      	bhi.n	800436e <_strtol_l.constprop.0+0xc6>
 8004364:	3c57      	subs	r4, #87	@ 0x57
 8004366:	e7d8      	b.n	800431a <_strtol_l.constprop.0+0x72>
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	e7e1      	b.n	8004332 <_strtol_l.constprop.0+0x8a>
 800436e:	1c53      	adds	r3, r2, #1
 8004370:	d108      	bne.n	8004384 <_strtol_l.constprop.0+0xdc>
 8004372:	2322      	movs	r3, #34	@ 0x22
 8004374:	f8ce 3000 	str.w	r3, [lr]
 8004378:	4660      	mov	r0, ip
 800437a:	f1b8 0f00 	cmp.w	r8, #0
 800437e:	d0a0      	beq.n	80042c2 <_strtol_l.constprop.0+0x1a>
 8004380:	1e69      	subs	r1, r5, #1
 8004382:	e006      	b.n	8004392 <_strtol_l.constprop.0+0xea>
 8004384:	b106      	cbz	r6, 8004388 <_strtol_l.constprop.0+0xe0>
 8004386:	4240      	negs	r0, r0
 8004388:	f1b8 0f00 	cmp.w	r8, #0
 800438c:	d099      	beq.n	80042c2 <_strtol_l.constprop.0+0x1a>
 800438e:	2a00      	cmp	r2, #0
 8004390:	d1f6      	bne.n	8004380 <_strtol_l.constprop.0+0xd8>
 8004392:	f8c8 1000 	str.w	r1, [r8]
 8004396:	e794      	b.n	80042c2 <_strtol_l.constprop.0+0x1a>
 8004398:	08004491 	.word	0x08004491

0800439c <strtol>:
 800439c:	4613      	mov	r3, r2
 800439e:	460a      	mov	r2, r1
 80043a0:	4601      	mov	r1, r0
 80043a2:	4802      	ldr	r0, [pc, #8]	@ (80043ac <strtol+0x10>)
 80043a4:	6800      	ldr	r0, [r0, #0]
 80043a6:	f7ff bf7f 	b.w	80042a8 <_strtol_l.constprop.0>
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	@ (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004404 <__libc_init_array+0x38>)
 80043d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004408 <__libc_init_array+0x3c>)
 80043d2:	1b64      	subs	r4, r4, r5
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	2600      	movs	r6, #0
 80043d8:	42a6      	cmp	r6, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	4d0b      	ldr	r5, [pc, #44]	@ (800440c <__libc_init_array+0x40>)
 80043de:	4c0c      	ldr	r4, [pc, #48]	@ (8004410 <__libc_init_array+0x44>)
 80043e0:	f000 f826 	bl	8004430 <_init>
 80043e4:	1b64      	subs	r4, r4, r5
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	2600      	movs	r6, #0
 80043ea:	42a6      	cmp	r6, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f4:	4798      	blx	r3
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fe:	4798      	blx	r3
 8004400:	3601      	adds	r6, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	0800459c 	.word	0x0800459c
 8004408:	0800459c 	.word	0x0800459c
 800440c:	0800459c 	.word	0x0800459c
 8004410:	080045a0 	.word	0x080045a0

08004414 <memcpy>:
 8004414:	440a      	add	r2, r1
 8004416:	4291      	cmp	r1, r2
 8004418:	f100 33ff 	add.w	r3, r0, #4294967295
 800441c:	d100      	bne.n	8004420 <memcpy+0xc>
 800441e:	4770      	bx	lr
 8004420:	b510      	push	{r4, lr}
 8004422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800442a:	4291      	cmp	r1, r2
 800442c:	d1f9      	bne.n	8004422 <memcpy+0xe>
 800442e:	bd10      	pop	{r4, pc}

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
