
DAC80501 aansturing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008c08  08008c08  00009c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009080  08009080  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800908c  0800908c  0000a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009090  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  08009264  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009264  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c664  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c62  00000000  00000000  00017868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000194d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d7  00000000  00000000  0001a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b07  00000000  00000000  0001a92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8f9  00000000  00000000  00041436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb8fc  00000000  00000000  0004ed2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a62b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  0013a670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bec 	.word	0x08008bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008bec 	.word	0x08008bec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DAC80501DataVoltage60V>:
    // Retourneer de status van de SPI-communicatie (HAL_OK of foutcode)
    return status;
}

HAL_StatusTypeDef DAC80501DataVoltage60V(uint16_t voltage_mV)  //data(getal) moet in mV zijn van 0 tot 60000mV
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	//Zorgen dat spanning tussen 0-5000mV zit
	if(voltage_mV > 60000){ //Houdt de spanning onder de 5000mV
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d902      	bls.n	8000ffe <DAC80501DataVoltage60V+0x1a>
		voltage_mV = 60000;
 8000ff8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8000ffc:	80fb      	strh	r3, [r7, #6]
	if(voltage_mV < 0){ //Houdt de spanning boven de 0mV. Werkt niet goed vanwerge unsigned naar signed conversion bij functie aanroep
		voltage_mV = 0;
	}

    HAL_StatusTypeDef status;
    uint16_t convertedDataVoltage = (uint16_t)(((uint32_t)voltage_mV * 65535) / (5000*12)); // 0-60000mV omzetten naar 16 bits waarde die naar de dac gestuurd kan worden. gebruik gehele getallen
 8000ffe:	88fa      	ldrh	r2, [r7, #6]
 8001000:	4613      	mov	r3, r2
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <DAC80501DataVoltage60V+0x70>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0b9b      	lsrs	r3, r3, #14
 800100e:	81fb      	strh	r3, [r7, #14]
    uint8_t txData[3];

    // Stel het adres en de data in voor het trigger-register van de DAC80501
    txData[0] = ADDR_DAC_DATA_register;                     // Registeradres
 8001010:	2308      	movs	r3, #8
 8001012:	723b      	strb	r3, [r7, #8]
    txData[1] = (convertedDataVoltage >> 8 ) & 0xFF;      // MSB van de 16-bits data
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	727b      	strb	r3, [r7, #9]
    txData[2] = (convertedDataVoltage & 0xFF);              // LSB van de 16-bits data
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72bb      	strb	r3, [r7, #10]

    // Zet de Chip Select (CS/SS) lijn laag om SPI-communicatie te starten
    HAL_GPIO_WritePin(DAC_SS_Port, DAC_SS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2140      	movs	r1, #64	@ 0x40
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <DAC80501DataVoltage60V+0x74>)
 800102a:	f000 fea1 	bl	8001d70 <HAL_GPIO_WritePin>

    // Verzend de 24-bits data via SPI
    status = HAL_SPI_Transmit(&hspi1, txData, 3, DAC80501_SPI_TIMEOUT);
 800102e:	f107 0108 	add.w	r1, r7, #8
 8001032:	2364      	movs	r3, #100	@ 0x64
 8001034:	2203      	movs	r2, #3
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <DAC80501DataVoltage60V+0x78>)
 8001038:	f002 fa75 	bl	8003526 <HAL_SPI_Transmit>
 800103c:	4603      	mov	r3, r0
 800103e:	737b      	strb	r3, [r7, #13]

    // Zet de Chip Select (CS/SS) lijn hoog om SPI-communicatie te beëindigen
    HAL_GPIO_WritePin(DAC_SS_Port, DAC_SS_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <DAC80501DataVoltage60V+0x74>)
 8001046:	f000 fe93 	bl	8001d70 <HAL_GPIO_WritePin>

    // Retourneer de status van de SPI-communicatie (HAL_OK of foutcode)
    return status;
 800104a:	7b7b      	ldrb	r3, [r7, #13]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	45e7b273 	.word	0x45e7b273
 8001058:	48000400 	.word	0x48000400
 800105c:	200001f0 	.word	0x200001f0

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fb54 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f810 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 f8f0 	bl	8001250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001070:	f000 f8be 	bl	80011f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001074:	f000 f85c 	bl	8001130 <MX_SPI1_Init>
//DAC80501DataVoltage5V(4999); //getal moet in mV zijn 0-5000mV
//  DAC80501DataVoltage60V();

  while (1)
  {
	  DAC80501DataVoltage60V(30000);
 8001078:	f247 5030 	movw	r0, #30000	@ 0x7530
 800107c:	f7ff ffb2 	bl	8000fe4 <DAC80501DataVoltage60V>
	  HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001084:	f000 fbc0 	bl	8001808 <HAL_Delay>
	  DAC80501DataVoltage60V(30000);
 8001088:	bf00      	nop
 800108a:	e7f5      	b.n	8001078 <main+0x18>

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b096      	sub	sp, #88	@ 0x58
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2244      	movs	r2, #68	@ 0x44
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f9cf 	bl	800543e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010b2:	f000 fe83 	bl	8001dbc <HAL_PWREx_ControlVoltageScaling>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010bc:	f000 f92e 	bl	800131c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2310      	movs	r3, #16
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010da:	230a      	movs	r3, #10
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010de:	2307      	movs	r3, #7
 80010e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 feba 	bl	8001e68 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010fa:	f000 f90f 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2303      	movs	r3, #3
 8001104:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fa82 	bl	8002620 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001122:	f000 f8fb 	bl	800131c <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3758      	adds	r7, #88	@ 0x58
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001138:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <MX_SPI1_Init+0xbc>)
 800113a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800113e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001142:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001146:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800114a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800114e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001152:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001154:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001156:	2202      	movs	r2, #2
 8001158:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001166:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800116a:	2238      	movs	r2, #56	@ 0x38
 800116c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001182:	2207      	movs	r2, #7
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 800118e:	2208      	movs	r2, #8
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 8001194:	f002 f924 	bl	80033e0 <HAL_SPI_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SPI1_Init+0x72>
  {
    Error_Handler();
 800119e:	f000 f8bd 	bl	800131c <Error_Handler>
//       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//       HAL_Delay(1);

       GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
       // Configureer SCK Pin
       GPIO_InitStruct.Pin = GPIO_PIN_5; // GPIOA Pin 5 voor SPI1_SCK
 80011b0:	2320      	movs	r3, #32
 80011b2:	607b      	str	r3, [r7, #4]
       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
       if (hspi1.Init.CLKPolarity == SPI_POLARITY_HIGH) {
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_SPI1_Init+0xb8>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d102      	bne.n	80011c6 <MX_SPI1_Init+0x96>
           GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e001      	b.n	80011ca <MX_SPI1_Init+0x9a>
       } else {
           GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
       }
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	613b      	str	r3, [r7, #16]
       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	617b      	str	r3, [r7, #20]
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f000 fc1f 	bl	8001a1c <HAL_GPIO_Init>


  /* USER CODE END SPI1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001f0 	.word	0x200001f0
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <MX_USART2_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USART2_UART_Init+0x58>)
 8001234:	f002 fc52 	bl	8003adc <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f86d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000254 	.word	0x20000254
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <MX_GPIO_Init+0xc0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a29      	ldr	r2, [pc, #164]	@ (8001310 <MX_GPIO_Init+0xc0>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_GPIO_Init+0xc0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <MX_GPIO_Init+0xc0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <MX_GPIO_Init+0xc0>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_GPIO_Init+0xc0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <MX_GPIO_Init+0xc0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <MX_GPIO_Init+0xc0>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <MX_GPIO_Init+0xc0>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_GPIO_Init+0xc0>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <MX_GPIO_Init+0xc0>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_GPIO_Init+0xc0>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	4812      	ldr	r0, [pc, #72]	@ (8001314 <MX_GPIO_Init+0xc4>)
 80012cc:	f000 fd50 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_GPIO_Init+0xc8>)
 80012e8:	f000 fb98 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ec:	2340      	movs	r3, #64	@ 0x40
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_GPIO_Init+0xc4>)
 8001304:	f000 fb8a 	bl	8001a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_MspInit+0x44>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001332:	4a0e      	ldr	r2, [pc, #56]	@ (800136c <HAL_MspInit+0x44>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6613      	str	r3, [r2, #96]	@ 0x60
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <HAL_MspInit+0x44>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x44>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x44>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6593      	str	r3, [r2, #88]	@ 0x58
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x44>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <HAL_SPI_MspInit+0x7c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d128      	bne.n	80013e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 8001398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800139c:	6613      	str	r3, [r2, #96]	@ 0x60
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_SPI_MspInit+0x80>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013c2:	23a0      	movs	r3, #160	@ 0xa0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013d2:	2305      	movs	r3, #5
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e0:	f000 fb1c 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40013000 	.word	0x40013000
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ac      	sub	sp, #176	@ 0xb0
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2288      	movs	r2, #136	@ 0x88
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f004 f812 	bl	800543e <memset>
  if(huart->Instance==USART2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <HAL_UART_MspInit+0xb0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13b      	bne.n	800149c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001424:	2302      	movs	r3, #2
 8001426:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001428:	2300      	movs	r3, #0
 800142a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fb19 	bl	8002a68 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800143c:	f7ff ff6e 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	4a18      	ldr	r2, [pc, #96]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	6593      	str	r3, [r2, #88]	@ 0x58
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_UART_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001470:	230c      	movs	r3, #12
 8001472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001498:	f000 fac0 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	37b0      	adds	r7, #176	@ 0xb0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40021000 	.word	0x40021000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001502:	f000 f961 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}

0800150a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  return 1;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_kill>:

int _kill(int pid, int sig)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001524:	f003 ffde 	bl	80054e4 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	2216      	movs	r2, #22
 800152c:	601a      	str	r2, [r3, #0]
  return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_exit>:

void _exit (int status)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001542:	f04f 31ff 	mov.w	r1, #4294967295
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffe7 	bl	800151a <_kill>
  while (1) {}    /* Make sure we hang here */
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <_exit+0x12>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
  }

  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
  }
  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_close>:

int _close(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ea:	605a      	str	r2, [r3, #4]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_isatty>:

int _isatty(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f003 ff42 	bl	80054e4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20018000 	.word	0x20018000
 800168c:	00000400 	.word	0x00000400
 8001690:	200002dc 	.word	0x200002dc
 8001694:	20000430 	.word	0x20000430

08001698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff ffea 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f003 ff01 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff fcb7 	bl	8001060 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001700:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8001704:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001708:	20000430 	.word	0x20000430

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <HAL_Init+0x3c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_Init+0x3c>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f944 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172c:	2000      	movs	r0, #0
 800172e:	f000 f80f 	bl	8001750 <HAL_InitTick>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	e001      	b.n	8001742 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173e:	f7ff fdf3 	bl	8001328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001742:	79fb      	ldrb	r3, [r7, #7]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_InitTick+0x6c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_InitTick+0x70>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_InitTick+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f941 	bl	8001a02 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d809      	bhi.n	80017a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f919 	bl	80019ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_InitTick+0x74>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e007      	b.n	80017b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e004      	b.n	80017b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e001      	b.n	80017b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	200002e0 	.word	0x200002e0

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200002e0 	.word	0x200002e0

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e17f      	b.n	8001d2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8171 	beq.w	8001d26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d118      	bne.n	8001afc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	f003 0201 	and.w	r2, r3, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d017      	beq.n	8001b38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	6939      	ldr	r1, [r7, #16]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80ac 	beq.w	8001d26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b5f      	ldr	r3, [pc, #380]	@ (8001d4c <HAL_GPIO_Init+0x330>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d4c <HAL_GPIO_Init+0x330>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bda:	4b5c      	ldr	r3, [pc, #368]	@ (8001d4c <HAL_GPIO_Init+0x330>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d50 <HAL_GPIO_Init+0x334>)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x242>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4f      	ldr	r2, [pc, #316]	@ (8001d54 <HAL_GPIO_Init+0x338>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4d      	ldr	r2, [pc, #308]	@ (8001d5c <HAL_GPIO_Init+0x340>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d60 <HAL_GPIO_Init+0x344>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4b      	ldr	r2, [pc, #300]	@ (8001d64 <HAL_GPIO_Init+0x348>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x244>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c70:	4937      	ldr	r1, [pc, #220]	@ (8001d50 <HAL_GPIO_Init+0x334>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca2:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_GPIO_Init+0x350>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f47f ae78 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000c00 	.word	0x48000c00
 8001d60:	48001000 	.word	0x48001000
 8001d64:	48001400 	.word	0x48001400
 8001d68:	48001800 	.word	0x48001800
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40007000 	.word	0x40007000

08001dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dca:	d130      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd8:	d038      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2232      	movs	r2, #50	@ 0x32
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e00:	e002      	b.n	8001e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e14:	d102      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f2      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e28:	d110      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00f      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e3a:	d007      	beq.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e44:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e3ca      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4b97      	ldr	r3, [pc, #604]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4b94      	ldr	r3, [pc, #592]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80e4 	beq.w	8002064 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4a>
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	f040 808b 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 8087 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb2:	4b89      	ldr	r3, [pc, #548]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x62>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e3a2      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	4b82      	ldr	r3, [pc, #520]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x7c>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_OscConfig+0x88>
 8001ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d223      	bcs.n	8001f3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fd55 	bl	80029a8 <RCC_SetFlashLatencyFromMSIRange>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e383      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b73      	ldr	r3, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a72      	ldr	r2, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b70      	ldr	r3, [pc, #448]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	496d      	ldr	r1, [pc, #436]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f26:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4968      	ldr	r1, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4960      	ldr	r1, [pc, #384]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	495b      	ldr	r1, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fd15 	bl	80029a8 <RCC_SetFlashLatencyFromMSIRange>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e343      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f88:	f000 fc4a 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	4950      	ldr	r1, [pc, #320]	@ (80020dc <HAL_RCC_OscConfig+0x274>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80020e0 <HAL_RCC_OscConfig+0x278>)
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80020e4 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fbcf 	bl	8001750 <HAL_InitTick>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d052      	beq.n	8002062 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	e327      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc8:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fc0c 	bl	80017f0 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fc08 	bl	80017f0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e310      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fee:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a36      	ldr	r2, [pc, #216]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4931      	ldr	r1, [pc, #196]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002018:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	492c      	ldr	r1, [pc, #176]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e01a      	b.n	8002064 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a29      	ldr	r2, [pc, #164]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800203a:	f7ff fbd9 	bl	80017f0 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002042:	f7ff fbd5 	bl	80017f0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e2dd      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x1da>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002062:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d074      	beq.n	800215a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b08      	cmp	r3, #8
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x21a>
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b0c      	cmp	r3, #12
 800207a:	d10e      	bne.n	800209a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d10b      	bne.n	800209a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d064      	beq.n	8002158 <HAL_RCC_OscConfig+0x2f0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d160      	bne.n	8002158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e2ba      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x24a>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x280>
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a02      	ldr	r2, [pc, #8]	@ (80020d8 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x298>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08008c08 	.word	0x08008c08
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
 80020e8:	4ba0      	ldr	r3, [pc, #640]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a9f      	ldr	r2, [pc, #636]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b9d      	ldr	r3, [pc, #628]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a9c      	ldr	r2, [pc, #624]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fb72 	bl	80017f0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fb6e 	bl	80017f0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e276      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b92      	ldr	r3, [pc, #584]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x2a8>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fb5e 	bl	80017f0 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fb5a 	bl	80017f0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e262      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214a:	4b88      	ldr	r3, [pc, #544]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x2d0>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d060      	beq.n	8002228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x310>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d119      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d116      	bne.n	80021a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002178:	4b7c      	ldr	r3, [pc, #496]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_OscConfig+0x328>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e23f      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b76      	ldr	r3, [pc, #472]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	4973      	ldr	r1, [pc, #460]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a4:	e040      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d023      	beq.n	80021f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ae:	4b6f      	ldr	r3, [pc, #444]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff fb19 	bl	80017f0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb15 	bl	80017f0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e21d      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d4:	4b65      	ldr	r3, [pc, #404]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b62      	ldr	r3, [pc, #392]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	495f      	ldr	r1, [pc, #380]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	e018      	b.n	8002228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80021fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff faf5 	bl	80017f0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff faf1 	bl	80017f0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1f9      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221c:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03c      	beq.n	80022ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223c:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002242:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fad0 	bl	80017f0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff facc 	bl	80017f0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1d4      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002266:	4b41      	ldr	r3, [pc, #260]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x3ec>
 8002274:	e01b      	b.n	80022ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227c:	4a3b      	ldr	r2, [pc, #236]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff fab3 	bl	80017f0 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff faaf 	bl	80017f0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1b7      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ef      	bne.n	800228e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80a6 	beq.w	8002408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c0:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a26      	ldr	r2, [pc, #152]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d118      	bne.n	8002326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002300:	f7ff fa76 	bl	80017f0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7ff fa72 	bl	80017f0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e17a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_RCC_OscConfig+0x508>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x4d8>
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	e029      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d115      	bne.n	8002374 <HAL_RCC_OscConfig+0x50c>
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235e:	4a03      	ldr	r2, [pc, #12]	@ (800236c <HAL_RCC_OscConfig+0x504>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x52c>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	4b9c      	ldr	r3, [pc, #624]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	4a9b      	ldr	r2, [pc, #620]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002384:	4b98      	ldr	r3, [pc, #608]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	4a97      	ldr	r2, [pc, #604]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff fa28 	bl	80017f0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff fa24 	bl	80017f0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e12a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b8b      	ldr	r3, [pc, #556]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ed      	beq.n	80023a4 <HAL_RCC_OscConfig+0x53c>
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fa11 	bl	80017f0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff fa0d 	bl	80017f0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e113      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e8:	4b7f      	ldr	r3, [pc, #508]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ed      	bne.n	80023d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b7a      	ldr	r3, [pc, #488]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	4a79      	ldr	r2, [pc, #484]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002406:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80fe 	beq.w	800260e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 80d0 	bne.w	80025bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800241c:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	429a      	cmp	r2, r3
 800242e:	d130      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	3b01      	subs	r3, #1
 800243c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d127      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d11f      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800245c:	2a07      	cmp	r2, #7
 800245e:	bf14      	ite	ne
 8002460:	2201      	movne	r2, #1
 8002462:	2200      	moveq	r2, #0
 8002464:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002466:	4293      	cmp	r3, r2
 8002468:	d113      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	3b01      	subs	r3, #1
 800248c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d06e      	beq.n	8002570 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d069      	beq.n	800256c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0ad      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024b4:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c0:	f7ff f996 	bl	80017f0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f992 	bl	80017f0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09a      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024da:	4b43      	ldr	r3, [pc, #268]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e6:	4b40      	ldr	r3, [pc, #256]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	4b40      	ldr	r3, [pc, #256]	@ (80025ec <HAL_RCC_OscConfig+0x784>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f6:	3a01      	subs	r2, #1
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002500:	0212      	lsls	r2, r2, #8
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002508:	0852      	lsrs	r2, r2, #1
 800250a:	3a01      	subs	r2, #1
 800250c:	0552      	lsls	r2, r2, #21
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002514:	0852      	lsrs	r2, r2, #1
 8002516:	3a01      	subs	r2, #1
 8002518:	0652      	lsls	r2, r2, #25
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002520:	0912      	lsrs	r2, r2, #4
 8002522:	0452      	lsls	r2, r2, #17
 8002524:	430a      	orrs	r2, r1
 8002526:	4930      	ldr	r1, [pc, #192]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800252c:	4b2e      	ldr	r3, [pc, #184]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002544:	f7ff f954 	bl	80017f0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f950 	bl	80017f0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e058      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256a:	e050      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e04f      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002570:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d148      	bne.n	800260e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002588:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002594:	f7ff f92c 	bl	80017f0 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f928 	bl	80017f0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e030      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x734>
 80025ba:	e028      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d023      	beq.n	800260a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <HAL_RCC_OscConfig+0x780>)
 80025c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff f90f 	bl	80017f0 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	e00c      	b.n	80025f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff f90b 	bl	80017f0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d905      	bls.n	80025f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ec      	bne.n	80025d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4905      	ldr	r1, [pc, #20]	@ (8002618 <HAL_RCC_OscConfig+0x7b0>)
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_RCC_OscConfig+0x7b4>)
 8002604:	4013      	ands	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	e001      	b.n	800260e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	feeefffc 	.word	0xfeeefffc

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0e7      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b75      	ldr	r3, [pc, #468]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b72      	ldr	r3, [pc, #456]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0207 	bic.w	r2, r3, #7
 800264a:	4970      	ldr	r1, [pc, #448]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b6e      	ldr	r3, [pc, #440]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cf      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b63      	ldr	r3, [pc, #396]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4960      	ldr	r1, [pc, #384]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04c      	beq.n	8002738 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0a6      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026be:	4b54      	ldr	r3, [pc, #336]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e09a      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08e      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e086      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b46      	ldr	r3, [pc, #280]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4943      	ldr	r1, [pc, #268]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7ff f872 	bl	80017f0 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7ff f86e 	bl	80017f0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e06e      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002750:	429a      	cmp	r2, r3
 8002752:	d208      	bcs.n	8002766 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	492b      	ldr	r1, [pc, #172]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002766:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d210      	bcs.n	8002796 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 0207 	bic.w	r2, r3, #7
 800277c:	4923      	ldr	r1, [pc, #140]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCC_ClockConfig+0x1ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e036      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4918      	ldr	r1, [pc, #96]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4910      	ldr	r1, [pc, #64]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d4:	f000 f824 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	490b      	ldr	r1, [pc, #44]	@ (8002814 <HAL_RCC_ClockConfig+0x1f4>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_ClockConfig+0x1fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe ffa9 	bl	8001750 <HAL_InitTick>
 80027fe:	4603      	mov	r3, r0
 8002800:	72fb      	strb	r3, [r7, #11]

  return status;
 8002802:	7afb      	ldrb	r3, [r7, #11]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	08008c08 	.word	0x08008c08
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	4b3e      	ldr	r3, [pc, #248]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002838:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x34>
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d121      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d11e      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002860:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e005      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002870:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800287c:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <HAL_RCC_GetSysClockFreq+0x10c>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d102      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x110>)
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e004      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x114>)
 80028a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d134      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d003      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0xac>
 80028c4:	e005      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x110>)
 80028c8:	617b      	str	r3, [r7, #20]
      break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ce:	617b      	str	r3, [r7, #20]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	617b      	str	r3, [r7, #20]
      break;
 80028d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	3301      	adds	r3, #1
 80028e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x108>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	0e5b      	lsrs	r3, r3, #25
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	3301      	adds	r3, #1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002918:	69bb      	ldr	r3, [r7, #24]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	08008c20 	.word	0x08008c20
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4904      	ldr	r1, [pc, #16]	@ (8002978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08008c18 	.word	0x08008c18

0800297c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002980:	f7ff ffda 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4904      	ldr	r1, [pc, #16]	@ (80029a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08008c18 	.word	0x08008c18

080029a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029c0:	f7ff f9ee 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 80029c4:	6178      	str	r0, [r7, #20]
 80029c6:	e014      	b.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d4:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029e0:	f7ff f9de 	bl	8001da0 <HAL_PWREx_GetVoltageRange>
 80029e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029f8:	d10b      	bne.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b80      	cmp	r3, #128	@ 0x80
 80029fe:	d919      	bls.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a04:	d902      	bls.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a06:	2302      	movs	r3, #2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	e013      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	e010      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b80      	cmp	r3, #128	@ 0x80
 8002a16:	d902      	bls.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a18:	2303      	movs	r3, #3
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e00a      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b80      	cmp	r3, #128	@ 0x80
 8002a22:	d102      	bne.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a24:	2302      	movs	r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	e004      	b.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b70      	cmp	r3, #112	@ 0x70
 8002a2e:	d101      	bne.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a30:	2301      	movs	r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 0207 	bic.w	r2, r3, #7
 8002a3c:	4909      	ldr	r1, [pc, #36]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40022000 	.word	0x40022000

08002a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a70:	2300      	movs	r3, #0
 8002a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a74:	2300      	movs	r3, #0
 8002a76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d041      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a8c:	d02a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a92:	d824      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a98:	d008      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a9e:	d81e      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa8:	d010      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aaa:	e018      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aac:	4b86      	ldr	r3, [pc, #536]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a85      	ldr	r2, [pc, #532]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fabb 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aca:	e00c      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3320      	adds	r3, #32
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fba6 	bl	8003224 <RCCEx_PLLSAI2_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002adc:	e003      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aec:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002afa:	4973      	ldr	r1, [pc, #460]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b02:	e001      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d041      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b1c:	d02a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b22:	d824      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b2e:	d81e      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b38:	d010      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b3a:	e018      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b3c:	4b62      	ldr	r3, [pc, #392]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a61      	ldr	r2, [pc, #388]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b48:	e015      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fa73 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b5a:	e00c      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3320      	adds	r3, #32
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fb5e 	bl	8003224 <RCCEx_PLLSAI2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b6c:	e003      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	74fb      	strb	r3, [r7, #19]
      break;
 8002b72:	e000      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b7c:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b8a:	494f      	ldr	r1, [pc, #316]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b92:	e001      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a0 	beq.w	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4a40      	ldr	r2, [pc, #256]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fe02 	bl	80017f0 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bee:	e009      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fdfe 	bl	80017f0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	74fb      	strb	r3, [r7, #19]
        break;
 8002c02:	e005      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d15c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c16:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01f      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d019      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c60:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fdbd 	bl	80017f0 <HAL_GetTick>
 8002c76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c78:	e00b      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fdb9 	bl	80017f0 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d902      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c90:	e006      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ec      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb6:	4904      	ldr	r1, [pc, #16]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cbe:	e009      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
 8002cc4:	e006      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd4:	7c7b      	ldrb	r3, [r7, #17]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b9e      	ldr	r3, [pc, #632]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	4a9d      	ldr	r2, [pc, #628]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf2:	4b98      	ldr	r3, [pc, #608]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f023 0203 	bic.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	4994      	ldr	r1, [pc, #592]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d14:	4b8f      	ldr	r3, [pc, #572]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	f023 020c 	bic.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	498c      	ldr	r1, [pc, #560]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d36:	4b87      	ldr	r3, [pc, #540]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	4983      	ldr	r1, [pc, #524]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d58:	4b7e      	ldr	r3, [pc, #504]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	497b      	ldr	r1, [pc, #492]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d7a:	4b76      	ldr	r3, [pc, #472]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	4972      	ldr	r1, [pc, #456]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	496a      	ldr	r1, [pc, #424]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dbe:	4b65      	ldr	r3, [pc, #404]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	4961      	ldr	r1, [pc, #388]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002de0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	4959      	ldr	r1, [pc, #356]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e02:	4b54      	ldr	r3, [pc, #336]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e10:	4950      	ldr	r1, [pc, #320]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e24:	4b4b      	ldr	r3, [pc, #300]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	4948      	ldr	r1, [pc, #288]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e46:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	493f      	ldr	r1, [pc, #252]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d028      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e68:	4b3a      	ldr	r3, [pc, #232]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e76:	4937      	ldr	r1, [pc, #220]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e86:	d106      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e88:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a31      	ldr	r2, [pc, #196]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e92:	60d3      	str	r3, [r2, #12]
 8002e94:	e011      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f8c8 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d028      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec6:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	491f      	ldr	r1, [pc, #124]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef0:	60d3      	str	r3, [r2, #12]
 8002ef2:	e011      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f899 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f42:	d109      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a02      	ldr	r2, [pc, #8]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
 8002f50:	e014      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f867 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f88:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f96:	4928      	ldr	r1, [pc, #160]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2102      	movs	r1, #2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f844 	bl	800303c <RCCEx_PLLSAI1_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d014      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	74bb      	strb	r3, [r7, #18]
 8002fc2:	e011      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f925 	bl	8003224 <RCCEx_PLLSAI2_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ff4:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003002:	490d      	ldr	r1, [pc, #52]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003026:	4904      	ldr	r1, [pc, #16]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800302e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000

0800303c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800304a:	4b75      	ldr	r3, [pc, #468]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003056:	4b72      	ldr	r3, [pc, #456]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0203 	and.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d10d      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
       ||
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800306e:	4b6c      	ldr	r3, [pc, #432]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
       ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d047      	beq.n	8003112 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e044      	b.n	8003112 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d018      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x86>
 8003090:	2b03      	cmp	r3, #3
 8003092:	d825      	bhi.n	80030e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003094:	2b01      	cmp	r3, #1
 8003096:	d002      	beq.n	800309e <RCCEx_PLLSAI1_Config+0x62>
 8003098:	2b02      	cmp	r3, #2
 800309a:	d009      	beq.n	80030b0 <RCCEx_PLLSAI1_Config+0x74>
 800309c:	e020      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800309e:	4b60      	ldr	r3, [pc, #384]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11d      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ae:	e01a      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e013      	b.n	80030ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c2:	4b57      	ldr	r3, [pc, #348]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ce:	4b54      	ldr	r3, [pc, #336]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030de:	e006      	b.n	80030ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e004      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	430b      	orrs	r3, r1
 800310c:	4944      	ldr	r1, [pc, #272]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d17d      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a40      	ldr	r2, [pc, #256]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe fb64 	bl	80017f0 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800312a:	e009      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312c:	f7fe fb60 	bl	80017f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	73fb      	strb	r3, [r7, #15]
        break;
 800313e:	e005      	b.n	800314c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003140:	4b37      	ldr	r3, [pc, #220]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ef      	bne.n	800312c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d160      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003158:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	0211      	lsls	r1, r2, #8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	0912      	lsrs	r2, r2, #4
 8003170:	0452      	lsls	r2, r2, #17
 8003172:	430a      	orrs	r2, r1
 8003174:	492a      	ldr	r1, [pc, #168]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
 800317a:	e027      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d112      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003182:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800318a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0211      	lsls	r1, r2, #8
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6912      	ldr	r2, [r2, #16]
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0552      	lsls	r2, r2, #21
 800319e:	430a      	orrs	r2, r1
 80031a0:	491f      	ldr	r1, [pc, #124]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	610b      	str	r3, [r1, #16]
 80031a6:	e011      	b.n	80031cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6952      	ldr	r2, [r2, #20]
 80031be:	0852      	lsrs	r2, r2, #1
 80031c0:	3a01      	subs	r2, #1
 80031c2:	0652      	lsls	r2, r2, #25
 80031c4:	430a      	orrs	r2, r1
 80031c6:	4916      	ldr	r1, [pc, #88]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031cc:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a13      	ldr	r2, [pc, #76]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fb0a 	bl	80017f0 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031de:	e009      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e0:	f7fe fb06 	bl	80017f0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d902      	bls.n	80031f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	73fb      	strb	r3, [r7, #15]
          break;
 80031f2:	e005      	b.n	8003200 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ef      	beq.n	80031e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4904      	ldr	r1, [pc, #16]	@ (8003220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003232:	4b6a      	ldr	r3, [pc, #424]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d018      	beq.n	8003270 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800323e:	4b67      	ldr	r3, [pc, #412]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d10d      	bne.n	800326a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
       ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003256:	4b61      	ldr	r3, [pc, #388]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
       ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d047      	beq.n	80032fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e044      	b.n	80032fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d018      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0x86>
 8003278:	2b03      	cmp	r3, #3
 800327a:	d825      	bhi.n	80032c8 <RCCEx_PLLSAI2_Config+0xa4>
 800327c:	2b01      	cmp	r3, #1
 800327e:	d002      	beq.n	8003286 <RCCEx_PLLSAI2_Config+0x62>
 8003280:	2b02      	cmp	r3, #2
 8003282:	d009      	beq.n	8003298 <RCCEx_PLLSAI2_Config+0x74>
 8003284:	e020      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003286:	4b55      	ldr	r3, [pc, #340]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11d      	bne.n	80032ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003296:	e01a      	b.n	80032ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003298:	4b50      	ldr	r3, [pc, #320]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d116      	bne.n	80032d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a8:	e013      	b.n	80032d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032aa:	4b4c      	ldr	r3, [pc, #304]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032b6:	4b49      	ldr	r3, [pc, #292]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032c6:	e006      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e004      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032de:	4b3f      	ldr	r3, [pc, #252]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	430b      	orrs	r3, r1
 80032f4:	4939      	ldr	r1, [pc, #228]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d167      	bne.n	80033d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003300:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a35      	ldr	r2, [pc, #212]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fe fa70 	bl	80017f0 <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003312:	e009      	b.n	8003328 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003314:	f7fe fa6c 	bl	80017f0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d902      	bls.n	8003328 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	73fb      	strb	r3, [r7, #15]
        break;
 8003326:	e005      	b.n	8003334 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003328:	4b2c      	ldr	r3, [pc, #176]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ef      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d14a      	bne.n	80033d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d111      	bne.n	8003364 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003340:	4b26      	ldr	r3, [pc, #152]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6892      	ldr	r2, [r2, #8]
 8003350:	0211      	lsls	r1, r2, #8
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68d2      	ldr	r2, [r2, #12]
 8003356:	0912      	lsrs	r2, r2, #4
 8003358:	0452      	lsls	r2, r2, #17
 800335a:	430a      	orrs	r2, r1
 800335c:	491f      	ldr	r1, [pc, #124]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	614b      	str	r3, [r1, #20]
 8003362:	e011      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003364:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800336c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6892      	ldr	r2, [r2, #8]
 8003374:	0211      	lsls	r1, r2, #8
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6912      	ldr	r2, [r2, #16]
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	430a      	orrs	r2, r1
 8003382:	4916      	ldr	r1, [pc, #88]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003388:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a13      	ldr	r2, [pc, #76]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fa2c 	bl	80017f0 <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800339c:	f7fe fa28 	bl	80017f0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
          break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033b0:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4904      	ldr	r1, [pc, #16]	@ (80033dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e095      	b.n	800351e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003402:	d009      	beq.n	8003418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
 800340a:	e005      	b.n	8003418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd ff9c 	bl	8001370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800344e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003458:	d902      	bls.n	8003460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e002      	b.n	8003466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800346e:	d007      	beq.n	8003480 <HAL_SPI_Init+0xa0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	ea42 0103 	orr.w	r1, r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	f003 0204 	and.w	r2, r3, #4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b088      	sub	sp, #32
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003536:	f7fe f95b 	bl	80017f0 <HAL_GetTick>
 800353a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d001      	beq.n	8003550 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
 800354e:	e15c      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_SPI_Transmit+0x36>
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e154      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_SPI_Transmit+0x48>
 800356a:	2302      	movs	r3, #2
 800356c:	e14d      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2203      	movs	r2, #3
 800357a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c0:	d10f      	bne.n	80035e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b40      	cmp	r3, #64	@ 0x40
 80035ee:	d007      	beq.n	8003600 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003608:	d952      	bls.n	80036b0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_Transmit+0xf2>
 8003612:	8b7b      	ldrh	r3, [r7, #26]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d145      	bne.n	80036a4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800363c:	e032      	b.n	80036a4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d112      	bne.n	8003672 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003670:	e018      	b.n	80036a4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003672:	f7fe f8bd 	bl	80017f0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d803      	bhi.n	800368a <HAL_SPI_Transmit+0x164>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d102      	bne.n	8003690 <HAL_SPI_Transmit+0x16a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0b2      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1c7      	bne.n	800363e <HAL_SPI_Transmit+0x118>
 80036ae:	e083      	b.n	80037b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_Transmit+0x198>
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d177      	bne.n	80037ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d912      	bls.n	80036ee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b02      	subs	r3, #2
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ec:	e05f      	b.n	80037ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003714:	e04b      	b.n	80037ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d12b      	bne.n	800377c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d912      	bls.n	8003754 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b02      	subs	r3, #2
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003752:	e02c      	b.n	80037ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800377a:	e018      	b.n	80037ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377c:	f7fe f838 	bl	80017f0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d803      	bhi.n	8003794 <HAL_SPI_Transmit+0x26e>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x274>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e02d      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ae      	bne.n	8003716 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f947 	bl	8003a50 <SPI_EndRxTxTransaction>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003808:	2300      	movs	r3, #0
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003824:	f7fd ffe4 	bl	80017f0 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003834:	f7fd ffdc 	bl	80017f0 <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	015b      	lsls	r3, r3, #5
 8003840:	0d1b      	lsrs	r3, r3, #20
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384a:	e054      	b.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d050      	beq.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003854:	f7fd ffcc 	bl	80017f0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d902      	bls.n	800386a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d13d      	bne.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003882:	d111      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800388c:	d004      	beq.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d107      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b0:	d10f      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e017      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d19b      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000

08003924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	@ 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003936:	f7fd ff5b 	bl	80017f0 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	4413      	add	r3, r2
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003946:	f7fd ff53 	bl	80017f0 <HAL_GetTick>
 800394a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003954:	4b3d      	ldr	r3, [pc, #244]	@ (8003a4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	00da      	lsls	r2, r3, #3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	0d1b      	lsrs	r3, r3, #20
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800396c:	e060      	b.n	8003a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003974:	d107      	bne.n	8003986 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003984:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d050      	beq.n	8003a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800398e:	f7fd ff2f 	bl	80017f0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399a:	429a      	cmp	r2, r3
 800399c:	d902      	bls.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d13d      	bne.n	8003a20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039bc:	d111      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c6:	d004      	beq.n	80039d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d0:	d107      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ea:	d10f      	bne.n	8003a0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e010      	b.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d196      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3728      	adds	r7, #40	@ 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000000 	.word	0x20000000

08003a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff ff5b 	bl	8003924 <SPI_WaitFifoStateUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e027      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2180      	movs	r1, #128	@ 0x80
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fec0 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e014      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ff34 	bl	8003924 <SPI_WaitFifoStateUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e000      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e040      	b.n	8003b70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fc78 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	@ 0x24
 8003b08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fae0 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f825 	bl	8003b78 <UART_SetConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01b      	b.n	8003b70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb5f 	bl	800422c <UART_CheckIdleState>
 8003b6e:	4603      	mov	r3, r0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b08a      	sub	sp, #40	@ 0x28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8003e38 <UART_SetConfig+0x2c0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a99      	ldr	r2, [pc, #612]	@ (8003e3c <UART_SetConfig+0x2c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a90      	ldr	r2, [pc, #576]	@ (8003e40 <UART_SetConfig+0x2c8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d126      	bne.n	8003c50 <UART_SetConfig+0xd8>
 8003c02:	4b90      	ldr	r3, [pc, #576]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d81b      	bhi.n	8003c48 <UART_SetConfig+0xd0>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <UART_SetConfig+0xa0>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c41 	.word	0x08003c41
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e116      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c30:	2302      	movs	r3, #2
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e112      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e10e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c40:	2308      	movs	r3, #8
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e10a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4e:	e106      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7c      	ldr	r2, [pc, #496]	@ (8003e48 <UART_SetConfig+0x2d0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d138      	bne.n	8003ccc <UART_SetConfig+0x154>
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d82d      	bhi.n	8003cc4 <UART_SetConfig+0x14c>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0xf8>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003cc5 	.word	0x08003cc5
 8003c78:	08003cc5 	.word	0x08003cc5
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003cc5 	.word	0x08003cc5
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003cc5 	.word	0x08003cc5
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003cbd 	.word	0x08003cbd
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e0d8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e0d4      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e0d0      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e0cc      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e0c8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e4c <UART_SetConfig+0x2d4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d125      	bne.n	8003d22 <UART_SetConfig+0x1aa>
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ce0:	2b30      	cmp	r3, #48	@ 0x30
 8003ce2:	d016      	beq.n	8003d12 <UART_SetConfig+0x19a>
 8003ce4:	2b30      	cmp	r3, #48	@ 0x30
 8003ce6:	d818      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d00a      	beq.n	8003d02 <UART_SetConfig+0x18a>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d814      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <UART_SetConfig+0x182>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d008      	beq.n	8003d0a <UART_SetConfig+0x192>
 8003cf8:	e00f      	b.n	8003d1a <UART_SetConfig+0x1a2>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d00:	e0ad      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d02:	2302      	movs	r3, #2
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d08:	e0a9      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d10:	e0a5      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d12:	2308      	movs	r3, #8
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d18:	e0a1      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d20:	e09d      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	@ (8003e50 <UART_SetConfig+0x2d8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <UART_SetConfig+0x200>
 8003d2c:	4b45      	ldr	r3, [pc, #276]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d38:	d016      	beq.n	8003d68 <UART_SetConfig+0x1f0>
 8003d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d3c:	d818      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d3e:	2b80      	cmp	r3, #128	@ 0x80
 8003d40:	d00a      	beq.n	8003d58 <UART_SetConfig+0x1e0>
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d814      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <UART_SetConfig+0x1d8>
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d008      	beq.n	8003d60 <UART_SetConfig+0x1e8>
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x1f8>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e082      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e07e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e07a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e076      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e072      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	@ (8003e54 <UART_SetConfig+0x2dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12a      	bne.n	8003dd8 <UART_SetConfig+0x260>
 8003d82:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d90:	d01a      	beq.n	8003dc8 <UART_SetConfig+0x250>
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d9c:	d00c      	beq.n	8003db8 <UART_SetConfig+0x240>
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da2:	d815      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x238>
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x248>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x258>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e052      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	e04e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc6:	e04a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dce:	e046      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <UART_SetConfig+0x2c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d13a      	bne.n	8003e58 <UART_SetConfig+0x2e0>
 8003de2:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <UART_SetConfig+0x2cc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003df0:	d01a      	beq.n	8003e28 <UART_SetConfig+0x2b0>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003df6:	d81b      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0x2a0>
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e02:	d815      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x298>
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x2a8>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x2b8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e022      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e01e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e01a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e016      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e38:	efff69f3 	.word	0xefff69f3
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	40004c00 	.word	0x40004c00
 8003e54:	40005000 	.word	0x40005000
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a9f      	ldr	r2, [pc, #636]	@ (80040e0 <UART_SetConfig+0x568>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d17a      	bne.n	8003f5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d824      	bhi.n	8003eba <UART_SetConfig+0x342>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x300>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fd58 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b8f      	ldr	r3, [pc, #572]	@ (80040e4 <UART_SetConfig+0x56c>)
 8003ea6:	61fb      	str	r3, [r7, #28]
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fcb9 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80fb 	beq.w	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d305      	bcc.n	8003eea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d903      	bls.n	8003ef2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ef0:	e0e8      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	4615      	mov	r5, r2
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	022b      	lsls	r3, r5, #8
 8003f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f08:	0222      	lsls	r2, r4, #8
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	2000      	movs	r0, #0
 8003f12:	4688      	mov	r8, r1
 8003f14:	4681      	mov	r9, r0
 8003f16:	eb12 0a08 	adds.w	sl, r2, r8
 8003f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	4659      	mov	r1, fp
 8003f30:	f7fc feaa 	bl	8000c88 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f42:	d308      	bcc.n	8003f56 <UART_SetConfig+0x3de>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4a:	d204      	bcs.n	8003f56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e0b6      	b.n	80040c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f5c:	e0b2      	b.n	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f66:	d15e      	bne.n	8004026 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d828      	bhi.n	8003fc2 <UART_SetConfig+0x44a>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <UART_SetConfig+0x400>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fc3 	.word	0x08003fc3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fcd8 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e014      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe fcea 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e010      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b4d      	ldr	r3, [pc, #308]	@ (80040e4 <UART_SetConfig+0x56c>)
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e00d      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe fc35 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61f8      	str	r0, [r7, #28]
        break;
 8003fb8:	e009      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e005      	b.n	8003fce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d077      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005a      	lsls	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d916      	bls.n	800401e <UART_SetConfig+0x4a6>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d212      	bcs.n	800401e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	b29a      	uxth	r2, r3
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	4313      	orrs	r3, r2
 8004012:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	8afa      	ldrh	r2, [r7, #22]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e052      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004024:	e04e      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800402a:	2b08      	cmp	r3, #8
 800402c:	d827      	bhi.n	800407e <UART_SetConfig+0x506>
 800402e:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <UART_SetConfig+0x4bc>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	0800407f 	.word	0x0800407f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
 8004054:	08004077 	.word	0x08004077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fc7a 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 800405c:	61f8      	str	r0, [r7, #28]
        break;
 800405e:	e014      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe fc8c 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8004064:	61f8      	str	r0, [r7, #28]
        break;
 8004066:	e010      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <UART_SetConfig+0x56c>)
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e00d      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe fbd7 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8004072:	61f8      	str	r0, [r7, #28]
        break;
 8004074:	e009      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407a:	61fb      	str	r3, [r7, #28]
        break;
 800407c:	e005      	b.n	800408a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004088:	bf00      	nop
    }

    if (pclk != 0U)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085a      	lsrs	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d909      	bls.n	80040be <UART_SetConfig+0x546>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b0:	d205      	bcs.n	80040be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	e002      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40008000 	.word	0x40008000
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b098      	sub	sp, #96	@ 0x60
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fd fad8 	bl	80017f0 <HAL_GetTick>
 8004240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d12e      	bne.n	80042ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88c 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d021      	beq.n	80042ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800428e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e6      	bne.n	800426a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e062      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d149      	bne.n	8004350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f856 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d03c      	beq.n	8004350 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	623b      	str	r3, [r7, #32]
   return(result);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e6      	bne.n	80042d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	617b      	str	r3, [r7, #20]
   return(result);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e011      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3758      	adds	r7, #88	@ 0x58
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e04f      	b.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d04b      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fd fa2b 	bl	80017f0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e04e      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d037      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b80      	cmp	r3, #128	@ 0x80
 80043c2:	d034      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d031      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d110      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2208      	movs	r2, #8
 80043de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f838 	bl	8004456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2208      	movs	r2, #8
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e029      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004408:	d111      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f81e 	bl	8004456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e00f      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	429a      	cmp	r2, r3
 800444a:	d0a0      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004456:	b480      	push	{r7}
 8004458:	b095      	sub	sp, #84	@ 0x54
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
 800447e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d118      	bne.n	80044fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f023 0310 	bic.w	r3, r3, #16
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	613b      	str	r3, [r7, #16]
   return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e6      	bne.n	80044cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004512:	bf00      	nop
 8004514:	3754      	adds	r7, #84	@ 0x54
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <__cvt>:
 800451e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004522:	ec57 6b10 	vmov	r6, r7, d0
 8004526:	2f00      	cmp	r7, #0
 8004528:	460c      	mov	r4, r1
 800452a:	4619      	mov	r1, r3
 800452c:	463b      	mov	r3, r7
 800452e:	bfbb      	ittet	lt
 8004530:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004534:	461f      	movlt	r7, r3
 8004536:	2300      	movge	r3, #0
 8004538:	232d      	movlt	r3, #45	@ 0x2d
 800453a:	700b      	strb	r3, [r1, #0]
 800453c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800453e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004542:	4691      	mov	r9, r2
 8004544:	f023 0820 	bic.w	r8, r3, #32
 8004548:	bfbc      	itt	lt
 800454a:	4632      	movlt	r2, r6
 800454c:	4616      	movlt	r6, r2
 800454e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004552:	d005      	beq.n	8004560 <__cvt+0x42>
 8004554:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004558:	d100      	bne.n	800455c <__cvt+0x3e>
 800455a:	3401      	adds	r4, #1
 800455c:	2102      	movs	r1, #2
 800455e:	e000      	b.n	8004562 <__cvt+0x44>
 8004560:	2103      	movs	r1, #3
 8004562:	ab03      	add	r3, sp, #12
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	ab02      	add	r3, sp, #8
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	ec47 6b10 	vmov	d0, r6, r7
 800456e:	4653      	mov	r3, sl
 8004570:	4622      	mov	r2, r4
 8004572:	f001 f875 	bl	8005660 <_dtoa_r>
 8004576:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800457a:	4605      	mov	r5, r0
 800457c:	d119      	bne.n	80045b2 <__cvt+0x94>
 800457e:	f019 0f01 	tst.w	r9, #1
 8004582:	d00e      	beq.n	80045a2 <__cvt+0x84>
 8004584:	eb00 0904 	add.w	r9, r0, r4
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	4630      	mov	r0, r6
 800458e:	4639      	mov	r1, r7
 8004590:	f7fc fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004594:	b108      	cbz	r0, 800459a <__cvt+0x7c>
 8004596:	f8cd 900c 	str.w	r9, [sp, #12]
 800459a:	2230      	movs	r2, #48	@ 0x30
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	454b      	cmp	r3, r9
 80045a0:	d31e      	bcc.n	80045e0 <__cvt+0xc2>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045a6:	1b5b      	subs	r3, r3, r5
 80045a8:	4628      	mov	r0, r5
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	b004      	add	sp, #16
 80045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045b6:	eb00 0904 	add.w	r9, r0, r4
 80045ba:	d1e5      	bne.n	8004588 <__cvt+0x6a>
 80045bc:	7803      	ldrb	r3, [r0, #0]
 80045be:	2b30      	cmp	r3, #48	@ 0x30
 80045c0:	d10a      	bne.n	80045d8 <__cvt+0xba>
 80045c2:	2200      	movs	r2, #0
 80045c4:	2300      	movs	r3, #0
 80045c6:	4630      	mov	r0, r6
 80045c8:	4639      	mov	r1, r7
 80045ca:	f7fc fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80045ce:	b918      	cbnz	r0, 80045d8 <__cvt+0xba>
 80045d0:	f1c4 0401 	rsb	r4, r4, #1
 80045d4:	f8ca 4000 	str.w	r4, [sl]
 80045d8:	f8da 3000 	ldr.w	r3, [sl]
 80045dc:	4499      	add	r9, r3
 80045de:	e7d3      	b.n	8004588 <__cvt+0x6a>
 80045e0:	1c59      	adds	r1, r3, #1
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e7d9      	b.n	800459c <__cvt+0x7e>

080045e8 <__exponent>:
 80045e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ea:	2900      	cmp	r1, #0
 80045ec:	bfba      	itte	lt
 80045ee:	4249      	neglt	r1, r1
 80045f0:	232d      	movlt	r3, #45	@ 0x2d
 80045f2:	232b      	movge	r3, #43	@ 0x2b
 80045f4:	2909      	cmp	r1, #9
 80045f6:	7002      	strb	r2, [r0, #0]
 80045f8:	7043      	strb	r3, [r0, #1]
 80045fa:	dd29      	ble.n	8004650 <__exponent+0x68>
 80045fc:	f10d 0307 	add.w	r3, sp, #7
 8004600:	461d      	mov	r5, r3
 8004602:	270a      	movs	r7, #10
 8004604:	461a      	mov	r2, r3
 8004606:	fbb1 f6f7 	udiv	r6, r1, r7
 800460a:	fb07 1416 	mls	r4, r7, r6, r1
 800460e:	3430      	adds	r4, #48	@ 0x30
 8004610:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004614:	460c      	mov	r4, r1
 8004616:	2c63      	cmp	r4, #99	@ 0x63
 8004618:	f103 33ff 	add.w	r3, r3, #4294967295
 800461c:	4631      	mov	r1, r6
 800461e:	dcf1      	bgt.n	8004604 <__exponent+0x1c>
 8004620:	3130      	adds	r1, #48	@ 0x30
 8004622:	1e94      	subs	r4, r2, #2
 8004624:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004628:	1c41      	adds	r1, r0, #1
 800462a:	4623      	mov	r3, r4
 800462c:	42ab      	cmp	r3, r5
 800462e:	d30a      	bcc.n	8004646 <__exponent+0x5e>
 8004630:	f10d 0309 	add.w	r3, sp, #9
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	42ac      	cmp	r4, r5
 8004638:	bf88      	it	hi
 800463a:	2300      	movhi	r3, #0
 800463c:	3302      	adds	r3, #2
 800463e:	4403      	add	r3, r0
 8004640:	1a18      	subs	r0, r3, r0
 8004642:	b003      	add	sp, #12
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	f813 6b01 	ldrb.w	r6, [r3], #1
 800464a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800464e:	e7ed      	b.n	800462c <__exponent+0x44>
 8004650:	2330      	movs	r3, #48	@ 0x30
 8004652:	3130      	adds	r1, #48	@ 0x30
 8004654:	7083      	strb	r3, [r0, #2]
 8004656:	70c1      	strb	r1, [r0, #3]
 8004658:	1d03      	adds	r3, r0, #4
 800465a:	e7f1      	b.n	8004640 <__exponent+0x58>

0800465c <_printf_float>:
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004660:	b08d      	sub	sp, #52	@ 0x34
 8004662:	460c      	mov	r4, r1
 8004664:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004668:	4616      	mov	r6, r2
 800466a:	461f      	mov	r7, r3
 800466c:	4605      	mov	r5, r0
 800466e:	f000 feef 	bl	8005450 <_localeconv_r>
 8004672:	6803      	ldr	r3, [r0, #0]
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb fdfa 	bl	8000270 <strlen>
 800467c:	2300      	movs	r3, #0
 800467e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004680:	f8d8 3000 	ldr.w	r3, [r8]
 8004684:	9005      	str	r0, [sp, #20]
 8004686:	3307      	adds	r3, #7
 8004688:	f023 0307 	bic.w	r3, r3, #7
 800468c:	f103 0208 	add.w	r2, r3, #8
 8004690:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004694:	f8d4 b000 	ldr.w	fp, [r4]
 8004698:	f8c8 2000 	str.w	r2, [r8]
 800469c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046a4:	9307      	str	r3, [sp, #28]
 80046a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80046aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b2:	4b9c      	ldr	r3, [pc, #624]	@ (8004924 <_printf_float+0x2c8>)
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	f7fc fa38 	bl	8000b2c <__aeabi_dcmpun>
 80046bc:	bb70      	cbnz	r0, 800471c <_printf_float+0xc0>
 80046be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046c2:	4b98      	ldr	r3, [pc, #608]	@ (8004924 <_printf_float+0x2c8>)
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	f7fc fa12 	bl	8000af0 <__aeabi_dcmple>
 80046cc:	bb30      	cbnz	r0, 800471c <_printf_float+0xc0>
 80046ce:	2200      	movs	r2, #0
 80046d0:	2300      	movs	r3, #0
 80046d2:	4640      	mov	r0, r8
 80046d4:	4649      	mov	r1, r9
 80046d6:	f7fc fa01 	bl	8000adc <__aeabi_dcmplt>
 80046da:	b110      	cbz	r0, 80046e2 <_printf_float+0x86>
 80046dc:	232d      	movs	r3, #45	@ 0x2d
 80046de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e2:	4a91      	ldr	r2, [pc, #580]	@ (8004928 <_printf_float+0x2cc>)
 80046e4:	4b91      	ldr	r3, [pc, #580]	@ (800492c <_printf_float+0x2d0>)
 80046e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046ea:	bf94      	ite	ls
 80046ec:	4690      	movls	r8, r2
 80046ee:	4698      	movhi	r8, r3
 80046f0:	2303      	movs	r3, #3
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	f02b 0304 	bic.w	r3, fp, #4
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	f04f 0900 	mov.w	r9, #0
 80046fe:	9700      	str	r7, [sp, #0]
 8004700:	4633      	mov	r3, r6
 8004702:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004704:	4621      	mov	r1, r4
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f9d2 	bl	8004ab0 <_printf_common>
 800470c:	3001      	adds	r0, #1
 800470e:	f040 808d 	bne.w	800482c <_printf_float+0x1d0>
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	b00d      	add	sp, #52	@ 0x34
 8004718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	4640      	mov	r0, r8
 8004722:	4649      	mov	r1, r9
 8004724:	f7fc fa02 	bl	8000b2c <__aeabi_dcmpun>
 8004728:	b140      	cbz	r0, 800473c <_printf_float+0xe0>
 800472a:	464b      	mov	r3, r9
 800472c:	2b00      	cmp	r3, #0
 800472e:	bfbc      	itt	lt
 8004730:	232d      	movlt	r3, #45	@ 0x2d
 8004732:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004736:	4a7e      	ldr	r2, [pc, #504]	@ (8004930 <_printf_float+0x2d4>)
 8004738:	4b7e      	ldr	r3, [pc, #504]	@ (8004934 <_printf_float+0x2d8>)
 800473a:	e7d4      	b.n	80046e6 <_printf_float+0x8a>
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004742:	9206      	str	r2, [sp, #24]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	d13b      	bne.n	80047c0 <_printf_float+0x164>
 8004748:	2306      	movs	r3, #6
 800474a:	6063      	str	r3, [r4, #4]
 800474c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004750:	2300      	movs	r3, #0
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	ab0a      	add	r3, sp, #40	@ 0x28
 8004758:	e9cd a301 	strd	sl, r3, [sp, #4]
 800475c:	ab09      	add	r3, sp, #36	@ 0x24
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	6861      	ldr	r1, [r4, #4]
 8004762:	ec49 8b10 	vmov	d0, r8, r9
 8004766:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800476a:	4628      	mov	r0, r5
 800476c:	f7ff fed7 	bl	800451e <__cvt>
 8004770:	9b06      	ldr	r3, [sp, #24]
 8004772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004774:	2b47      	cmp	r3, #71	@ 0x47
 8004776:	4680      	mov	r8, r0
 8004778:	d129      	bne.n	80047ce <_printf_float+0x172>
 800477a:	1cc8      	adds	r0, r1, #3
 800477c:	db02      	blt.n	8004784 <_printf_float+0x128>
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	4299      	cmp	r1, r3
 8004782:	dd41      	ble.n	8004808 <_printf_float+0x1ac>
 8004784:	f1aa 0a02 	sub.w	sl, sl, #2
 8004788:	fa5f fa8a 	uxtb.w	sl, sl
 800478c:	3901      	subs	r1, #1
 800478e:	4652      	mov	r2, sl
 8004790:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004794:	9109      	str	r1, [sp, #36]	@ 0x24
 8004796:	f7ff ff27 	bl	80045e8 <__exponent>
 800479a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800479c:	1813      	adds	r3, r2, r0
 800479e:	2a01      	cmp	r2, #1
 80047a0:	4681      	mov	r9, r0
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	dc02      	bgt.n	80047ac <_printf_float+0x150>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	07d2      	lsls	r2, r2, #31
 80047aa:	d501      	bpl.n	80047b0 <_printf_float+0x154>
 80047ac:	3301      	adds	r3, #1
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0a2      	beq.n	80046fe <_printf_float+0xa2>
 80047b8:	232d      	movs	r3, #45	@ 0x2d
 80047ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047be:	e79e      	b.n	80046fe <_printf_float+0xa2>
 80047c0:	9a06      	ldr	r2, [sp, #24]
 80047c2:	2a47      	cmp	r2, #71	@ 0x47
 80047c4:	d1c2      	bne.n	800474c <_printf_float+0xf0>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1c0      	bne.n	800474c <_printf_float+0xf0>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e7bd      	b.n	800474a <_printf_float+0xee>
 80047ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047d2:	d9db      	bls.n	800478c <_printf_float+0x130>
 80047d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047d8:	d118      	bne.n	800480c <_printf_float+0x1b0>
 80047da:	2900      	cmp	r1, #0
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	dd0b      	ble.n	80047f8 <_printf_float+0x19c>
 80047e0:	6121      	str	r1, [r4, #16]
 80047e2:	b913      	cbnz	r3, 80047ea <_printf_float+0x18e>
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	07d0      	lsls	r0, r2, #31
 80047e8:	d502      	bpl.n	80047f0 <_printf_float+0x194>
 80047ea:	3301      	adds	r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047f2:	f04f 0900 	mov.w	r9, #0
 80047f6:	e7db      	b.n	80047b0 <_printf_float+0x154>
 80047f8:	b913      	cbnz	r3, 8004800 <_printf_float+0x1a4>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	07d2      	lsls	r2, r2, #31
 80047fe:	d501      	bpl.n	8004804 <_printf_float+0x1a8>
 8004800:	3302      	adds	r3, #2
 8004802:	e7f4      	b.n	80047ee <_printf_float+0x192>
 8004804:	2301      	movs	r3, #1
 8004806:	e7f2      	b.n	80047ee <_printf_float+0x192>
 8004808:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800480c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800480e:	4299      	cmp	r1, r3
 8004810:	db05      	blt.n	800481e <_printf_float+0x1c2>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	6121      	str	r1, [r4, #16]
 8004816:	07d8      	lsls	r0, r3, #31
 8004818:	d5ea      	bpl.n	80047f0 <_printf_float+0x194>
 800481a:	1c4b      	adds	r3, r1, #1
 800481c:	e7e7      	b.n	80047ee <_printf_float+0x192>
 800481e:	2900      	cmp	r1, #0
 8004820:	bfd4      	ite	le
 8004822:	f1c1 0202 	rsble	r2, r1, #2
 8004826:	2201      	movgt	r2, #1
 8004828:	4413      	add	r3, r2
 800482a:	e7e0      	b.n	80047ee <_printf_float+0x192>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	055a      	lsls	r2, r3, #21
 8004830:	d407      	bmi.n	8004842 <_printf_float+0x1e6>
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	4642      	mov	r2, r8
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	d12b      	bne.n	8004898 <_printf_float+0x23c>
 8004840:	e767      	b.n	8004712 <_printf_float+0xb6>
 8004842:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004846:	f240 80dd 	bls.w	8004a04 <_printf_float+0x3a8>
 800484a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800484e:	2200      	movs	r2, #0
 8004850:	2300      	movs	r3, #0
 8004852:	f7fc f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8004856:	2800      	cmp	r0, #0
 8004858:	d033      	beq.n	80048c2 <_printf_float+0x266>
 800485a:	4a37      	ldr	r2, [pc, #220]	@ (8004938 <_printf_float+0x2dc>)
 800485c:	2301      	movs	r3, #1
 800485e:	4631      	mov	r1, r6
 8004860:	4628      	mov	r0, r5
 8004862:	47b8      	blx	r7
 8004864:	3001      	adds	r0, #1
 8004866:	f43f af54 	beq.w	8004712 <_printf_float+0xb6>
 800486a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800486e:	4543      	cmp	r3, r8
 8004870:	db02      	blt.n	8004878 <_printf_float+0x21c>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	07d8      	lsls	r0, r3, #31
 8004876:	d50f      	bpl.n	8004898 <_printf_float+0x23c>
 8004878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f af45 	beq.w	8004712 <_printf_float+0xb6>
 8004888:	f04f 0900 	mov.w	r9, #0
 800488c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004890:	f104 0a1a 	add.w	sl, r4, #26
 8004894:	45c8      	cmp	r8, r9
 8004896:	dc09      	bgt.n	80048ac <_printf_float+0x250>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	079b      	lsls	r3, r3, #30
 800489c:	f100 8103 	bmi.w	8004aa6 <_printf_float+0x44a>
 80048a0:	68e0      	ldr	r0, [r4, #12]
 80048a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048a4:	4298      	cmp	r0, r3
 80048a6:	bfb8      	it	lt
 80048a8:	4618      	movlt	r0, r3
 80048aa:	e734      	b.n	8004716 <_printf_float+0xba>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4652      	mov	r2, sl
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af2b 	beq.w	8004712 <_printf_float+0xb6>
 80048bc:	f109 0901 	add.w	r9, r9, #1
 80048c0:	e7e8      	b.n	8004894 <_printf_float+0x238>
 80048c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc39      	bgt.n	800493c <_printf_float+0x2e0>
 80048c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004938 <_printf_float+0x2dc>)
 80048ca:	2301      	movs	r3, #1
 80048cc:	4631      	mov	r1, r6
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	f43f af1d 	beq.w	8004712 <_printf_float+0xb6>
 80048d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80048dc:	ea59 0303 	orrs.w	r3, r9, r3
 80048e0:	d102      	bne.n	80048e8 <_printf_float+0x28c>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	d5d7      	bpl.n	8004898 <_printf_float+0x23c>
 80048e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f af0d 	beq.w	8004712 <_printf_float+0xb6>
 80048f8:	f04f 0a00 	mov.w	sl, #0
 80048fc:	f104 0b1a 	add.w	fp, r4, #26
 8004900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004902:	425b      	negs	r3, r3
 8004904:	4553      	cmp	r3, sl
 8004906:	dc01      	bgt.n	800490c <_printf_float+0x2b0>
 8004908:	464b      	mov	r3, r9
 800490a:	e793      	b.n	8004834 <_printf_float+0x1d8>
 800490c:	2301      	movs	r3, #1
 800490e:	465a      	mov	r2, fp
 8004910:	4631      	mov	r1, r6
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	f43f aefb 	beq.w	8004712 <_printf_float+0xb6>
 800491c:	f10a 0a01 	add.w	sl, sl, #1
 8004920:	e7ee      	b.n	8004900 <_printf_float+0x2a4>
 8004922:	bf00      	nop
 8004924:	7fefffff 	.word	0x7fefffff
 8004928:	08008c50 	.word	0x08008c50
 800492c:	08008c54 	.word	0x08008c54
 8004930:	08008c58 	.word	0x08008c58
 8004934:	08008c5c 	.word	0x08008c5c
 8004938:	08008c60 	.word	0x08008c60
 800493c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800493e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004942:	4553      	cmp	r3, sl
 8004944:	bfa8      	it	ge
 8004946:	4653      	movge	r3, sl
 8004948:	2b00      	cmp	r3, #0
 800494a:	4699      	mov	r9, r3
 800494c:	dc36      	bgt.n	80049bc <_printf_float+0x360>
 800494e:	f04f 0b00 	mov.w	fp, #0
 8004952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004956:	f104 021a 	add.w	r2, r4, #26
 800495a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800495c:	9306      	str	r3, [sp, #24]
 800495e:	eba3 0309 	sub.w	r3, r3, r9
 8004962:	455b      	cmp	r3, fp
 8004964:	dc31      	bgt.n	80049ca <_printf_float+0x36e>
 8004966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004968:	459a      	cmp	sl, r3
 800496a:	dc3a      	bgt.n	80049e2 <_printf_float+0x386>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07da      	lsls	r2, r3, #31
 8004970:	d437      	bmi.n	80049e2 <_printf_float+0x386>
 8004972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004974:	ebaa 0903 	sub.w	r9, sl, r3
 8004978:	9b06      	ldr	r3, [sp, #24]
 800497a:	ebaa 0303 	sub.w	r3, sl, r3
 800497e:	4599      	cmp	r9, r3
 8004980:	bfa8      	it	ge
 8004982:	4699      	movge	r9, r3
 8004984:	f1b9 0f00 	cmp.w	r9, #0
 8004988:	dc33      	bgt.n	80049f2 <_printf_float+0x396>
 800498a:	f04f 0800 	mov.w	r8, #0
 800498e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004992:	f104 0b1a 	add.w	fp, r4, #26
 8004996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004998:	ebaa 0303 	sub.w	r3, sl, r3
 800499c:	eba3 0309 	sub.w	r3, r3, r9
 80049a0:	4543      	cmp	r3, r8
 80049a2:	f77f af79 	ble.w	8004898 <_printf_float+0x23c>
 80049a6:	2301      	movs	r3, #1
 80049a8:	465a      	mov	r2, fp
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f aeae 	beq.w	8004712 <_printf_float+0xb6>
 80049b6:	f108 0801 	add.w	r8, r8, #1
 80049ba:	e7ec      	b.n	8004996 <_printf_float+0x33a>
 80049bc:	4642      	mov	r2, r8
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	d1c2      	bne.n	800494e <_printf_float+0x2f2>
 80049c8:	e6a3      	b.n	8004712 <_printf_float+0xb6>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	9206      	str	r2, [sp, #24]
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f ae9c 	beq.w	8004712 <_printf_float+0xb6>
 80049da:	9a06      	ldr	r2, [sp, #24]
 80049dc:	f10b 0b01 	add.w	fp, fp, #1
 80049e0:	e7bb      	b.n	800495a <_printf_float+0x2fe>
 80049e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	d1c0      	bne.n	8004972 <_printf_float+0x316>
 80049f0:	e68f      	b.n	8004712 <_printf_float+0xb6>
 80049f2:	9a06      	ldr	r2, [sp, #24]
 80049f4:	464b      	mov	r3, r9
 80049f6:	4442      	add	r2, r8
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	d1c3      	bne.n	800498a <_printf_float+0x32e>
 8004a02:	e686      	b.n	8004712 <_printf_float+0xb6>
 8004a04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a08:	f1ba 0f01 	cmp.w	sl, #1
 8004a0c:	dc01      	bgt.n	8004a12 <_printf_float+0x3b6>
 8004a0e:	07db      	lsls	r3, r3, #31
 8004a10:	d536      	bpl.n	8004a80 <_printf_float+0x424>
 8004a12:	2301      	movs	r3, #1
 8004a14:	4642      	mov	r2, r8
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f43f ae78 	beq.w	8004712 <_printf_float+0xb6>
 8004a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f ae70 	beq.w	8004712 <_printf_float+0xb6>
 8004a32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a36:	2200      	movs	r2, #0
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a3e:	f7fc f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a42:	b9c0      	cbnz	r0, 8004a76 <_printf_float+0x41a>
 8004a44:	4653      	mov	r3, sl
 8004a46:	f108 0201 	add.w	r2, r8, #1
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	d10c      	bne.n	8004a6e <_printf_float+0x412>
 8004a54:	e65d      	b.n	8004712 <_printf_float+0xb6>
 8004a56:	2301      	movs	r3, #1
 8004a58:	465a      	mov	r2, fp
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	f43f ae56 	beq.w	8004712 <_printf_float+0xb6>
 8004a66:	f108 0801 	add.w	r8, r8, #1
 8004a6a:	45d0      	cmp	r8, sl
 8004a6c:	dbf3      	blt.n	8004a56 <_printf_float+0x3fa>
 8004a6e:	464b      	mov	r3, r9
 8004a70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a74:	e6df      	b.n	8004836 <_printf_float+0x1da>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	f104 0b1a 	add.w	fp, r4, #26
 8004a7e:	e7f4      	b.n	8004a6a <_printf_float+0x40e>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4642      	mov	r2, r8
 8004a84:	e7e1      	b.n	8004a4a <_printf_float+0x3ee>
 8004a86:	2301      	movs	r3, #1
 8004a88:	464a      	mov	r2, r9
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f ae3e 	beq.w	8004712 <_printf_float+0xb6>
 8004a96:	f108 0801 	add.w	r8, r8, #1
 8004a9a:	68e3      	ldr	r3, [r4, #12]
 8004a9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a9e:	1a5b      	subs	r3, r3, r1
 8004aa0:	4543      	cmp	r3, r8
 8004aa2:	dcf0      	bgt.n	8004a86 <_printf_float+0x42a>
 8004aa4:	e6fc      	b.n	80048a0 <_printf_float+0x244>
 8004aa6:	f04f 0800 	mov.w	r8, #0
 8004aaa:	f104 0919 	add.w	r9, r4, #25
 8004aae:	e7f4      	b.n	8004a9a <_printf_float+0x43e>

08004ab0 <_printf_common>:
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	688a      	ldr	r2, [r1, #8]
 8004aba:	690b      	ldr	r3, [r1, #16]
 8004abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bfb8      	it	lt
 8004ac4:	4613      	movlt	r3, r2
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004acc:	4607      	mov	r7, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_printf_common+0x26>
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	0699      	lsls	r1, r3, #26
 8004ada:	bf42      	ittt	mi
 8004adc:	6833      	ldrmi	r3, [r6, #0]
 8004ade:	3302      	addmi	r3, #2
 8004ae0:	6033      	strmi	r3, [r6, #0]
 8004ae2:	6825      	ldr	r5, [r4, #0]
 8004ae4:	f015 0506 	ands.w	r5, r5, #6
 8004ae8:	d106      	bne.n	8004af8 <_printf_common+0x48>
 8004aea:	f104 0a19 	add.w	sl, r4, #25
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dc26      	bgt.n	8004b46 <_printf_common+0x96>
 8004af8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	3b00      	subs	r3, #0
 8004b00:	bf18      	it	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	0692      	lsls	r2, r2, #26
 8004b06:	d42b      	bmi.n	8004b60 <_printf_common+0xb0>
 8004b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c8      	blx	r9
 8004b12:	3001      	adds	r0, #1
 8004b14:	d01e      	beq.n	8004b54 <_printf_common+0xa4>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf02      	ittt	eq
 8004b22:	68e5      	ldreq	r5, [r4, #12]
 8004b24:	6833      	ldreq	r3, [r6, #0]
 8004b26:	1aed      	subeq	r5, r5, r3
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	bf0c      	ite	eq
 8004b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b30:	2500      	movne	r5, #0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	bfc4      	itt	gt
 8004b36:	1a9b      	subgt	r3, r3, r2
 8004b38:	18ed      	addgt	r5, r5, r3
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	341a      	adds	r4, #26
 8004b3e:	42b5      	cmp	r5, r6
 8004b40:	d11a      	bne.n	8004b78 <_printf_common+0xc8>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e008      	b.n	8004b58 <_printf_common+0xa8>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4652      	mov	r2, sl
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	47c8      	blx	r9
 8004b50:	3001      	adds	r0, #1
 8004b52:	d103      	bne.n	8004b5c <_printf_common+0xac>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	e7c6      	b.n	8004aee <_printf_common+0x3e>
 8004b60:	18e1      	adds	r1, r4, r3
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	2030      	movs	r0, #48	@ 0x30
 8004b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b6a:	4422      	add	r2, r4
 8004b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b74:	3302      	adds	r3, #2
 8004b76:	e7c7      	b.n	8004b08 <_printf_common+0x58>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	4638      	mov	r0, r7
 8004b80:	47c8      	blx	r9
 8004b82:	3001      	adds	r0, #1
 8004b84:	d0e6      	beq.n	8004b54 <_printf_common+0xa4>
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7d9      	b.n	8004b3e <_printf_common+0x8e>
	...

08004b8c <_printf_i>:
 8004b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	7e0f      	ldrb	r7, [r1, #24]
 8004b92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b94:	2f78      	cmp	r7, #120	@ 0x78
 8004b96:	4691      	mov	r9, r2
 8004b98:	4680      	mov	r8, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ba2:	d807      	bhi.n	8004bb4 <_printf_i+0x28>
 8004ba4:	2f62      	cmp	r7, #98	@ 0x62
 8004ba6:	d80a      	bhi.n	8004bbe <_printf_i+0x32>
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	f000 80d2 	beq.w	8004d52 <_printf_i+0x1c6>
 8004bae:	2f58      	cmp	r7, #88	@ 0x58
 8004bb0:	f000 80b9 	beq.w	8004d26 <_printf_i+0x19a>
 8004bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bbc:	e03a      	b.n	8004c34 <_printf_i+0xa8>
 8004bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bc2:	2b15      	cmp	r3, #21
 8004bc4:	d8f6      	bhi.n	8004bb4 <_printf_i+0x28>
 8004bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bcc <_printf_i+0x40>)
 8004bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004bb5 	.word	0x08004bb5
 8004bd8:	08004bb5 	.word	0x08004bb5
 8004bdc:	08004bb5 	.word	0x08004bb5
 8004be0:	08004bb5 	.word	0x08004bb5
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004bb5 	.word	0x08004bb5
 8004bec:	08004bb5 	.word	0x08004bb5
 8004bf0:	08004bb5 	.word	0x08004bb5
 8004bf4:	08004bb5 	.word	0x08004bb5
 8004bf8:	08004d39 	.word	0x08004d39
 8004bfc:	08004c63 	.word	0x08004c63
 8004c00:	08004cf3 	.word	0x08004cf3
 8004c04:	08004bb5 	.word	0x08004bb5
 8004c08:	08004bb5 	.word	0x08004bb5
 8004c0c:	08004d5b 	.word	0x08004d5b
 8004c10:	08004bb5 	.word	0x08004bb5
 8004c14:	08004c63 	.word	0x08004c63
 8004c18:	08004bb5 	.word	0x08004bb5
 8004c1c:	08004bb5 	.word	0x08004bb5
 8004c20:	08004cfb 	.word	0x08004cfb
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6032      	str	r2, [r6, #0]
 8004c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c34:	2301      	movs	r3, #1
 8004c36:	e09d      	b.n	8004d74 <_printf_i+0x1e8>
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6031      	str	r1, [r6, #0]
 8004c40:	0606      	lsls	r6, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xbc>
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	e003      	b.n	8004c50 <_printf_i+0xc4>
 8004c48:	0645      	lsls	r5, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xb8>
 8004c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	da03      	bge.n	8004c5c <_printf_i+0xd0>
 8004c54:	232d      	movs	r3, #45	@ 0x2d
 8004c56:	426d      	negs	r5, r5
 8004c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c5c:	4859      	ldr	r0, [pc, #356]	@ (8004dc4 <_printf_i+0x238>)
 8004c5e:	230a      	movs	r3, #10
 8004c60:	e011      	b.n	8004c86 <_printf_i+0xfa>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	6833      	ldr	r3, [r6, #0]
 8004c66:	0608      	lsls	r0, r1, #24
 8004c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c6c:	d402      	bmi.n	8004c74 <_printf_i+0xe8>
 8004c6e:	0649      	lsls	r1, r1, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2ad      	uxthmi	r5, r5
 8004c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c76:	4853      	ldr	r0, [pc, #332]	@ (8004dc4 <_printf_i+0x238>)
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	bf14      	ite	ne
 8004c7c:	230a      	movne	r3, #10
 8004c7e:	2308      	moveq	r3, #8
 8004c80:	2100      	movs	r1, #0
 8004c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c86:	6866      	ldr	r6, [r4, #4]
 8004c88:	60a6      	str	r6, [r4, #8]
 8004c8a:	2e00      	cmp	r6, #0
 8004c8c:	bfa2      	ittt	ge
 8004c8e:	6821      	ldrge	r1, [r4, #0]
 8004c90:	f021 0104 	bicge.w	r1, r1, #4
 8004c94:	6021      	strge	r1, [r4, #0]
 8004c96:	b90d      	cbnz	r5, 8004c9c <_printf_i+0x110>
 8004c98:	2e00      	cmp	r6, #0
 8004c9a:	d04b      	beq.n	8004d34 <_printf_i+0x1a8>
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ca2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ca6:	5dc7      	ldrb	r7, [r0, r7]
 8004ca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cac:	462f      	mov	r7, r5
 8004cae:	42bb      	cmp	r3, r7
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	d9f4      	bls.n	8004c9e <_printf_i+0x112>
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d10b      	bne.n	8004cd0 <_printf_i+0x144>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	07df      	lsls	r7, r3, #31
 8004cbc:	d508      	bpl.n	8004cd0 <_printf_i+0x144>
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	6861      	ldr	r1, [r4, #4]
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	bfde      	ittt	le
 8004cc6:	2330      	movle	r3, #48	@ 0x30
 8004cc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cd0:	1b92      	subs	r2, r2, r6
 8004cd2:	6122      	str	r2, [r4, #16]
 8004cd4:	f8cd a000 	str.w	sl, [sp]
 8004cd8:	464b      	mov	r3, r9
 8004cda:	aa03      	add	r2, sp, #12
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f7ff fee6 	bl	8004ab0 <_printf_common>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d14a      	bne.n	8004d7e <_printf_i+0x1f2>
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	b004      	add	sp, #16
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	f043 0320 	orr.w	r3, r3, #32
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	4833      	ldr	r0, [pc, #204]	@ (8004dc8 <_printf_i+0x23c>)
 8004cfc:	2778      	movs	r7, #120	@ 0x78
 8004cfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	6831      	ldr	r1, [r6, #0]
 8004d06:	061f      	lsls	r7, r3, #24
 8004d08:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d0c:	d402      	bmi.n	8004d14 <_printf_i+0x188>
 8004d0e:	065f      	lsls	r7, r3, #25
 8004d10:	bf48      	it	mi
 8004d12:	b2ad      	uxthmi	r5, r5
 8004d14:	6031      	str	r1, [r6, #0]
 8004d16:	07d9      	lsls	r1, r3, #31
 8004d18:	bf44      	itt	mi
 8004d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d1e:	6023      	strmi	r3, [r4, #0]
 8004d20:	b11d      	cbz	r5, 8004d2a <_printf_i+0x19e>
 8004d22:	2310      	movs	r3, #16
 8004d24:	e7ac      	b.n	8004c80 <_printf_i+0xf4>
 8004d26:	4827      	ldr	r0, [pc, #156]	@ (8004dc4 <_printf_i+0x238>)
 8004d28:	e7e9      	b.n	8004cfe <_printf_i+0x172>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f023 0320 	bic.w	r3, r3, #32
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	e7f6      	b.n	8004d22 <_printf_i+0x196>
 8004d34:	4616      	mov	r6, r2
 8004d36:	e7bd      	b.n	8004cb4 <_printf_i+0x128>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	6825      	ldr	r5, [r4, #0]
 8004d3c:	6961      	ldr	r1, [r4, #20]
 8004d3e:	1d18      	adds	r0, r3, #4
 8004d40:	6030      	str	r0, [r6, #0]
 8004d42:	062e      	lsls	r6, r5, #24
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0x1c0>
 8004d48:	6019      	str	r1, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0x1c6>
 8004d4c:	0668      	lsls	r0, r5, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0x1bc>
 8004d50:	8019      	strh	r1, [r3, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	4616      	mov	r6, r2
 8004d58:	e7bc      	b.n	8004cd4 <_printf_i+0x148>
 8004d5a:	6833      	ldr	r3, [r6, #0]
 8004d5c:	1d1a      	adds	r2, r3, #4
 8004d5e:	6032      	str	r2, [r6, #0]
 8004d60:	681e      	ldr	r6, [r3, #0]
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	2100      	movs	r1, #0
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7fb fa32 	bl	80001d0 <memchr>
 8004d6c:	b108      	cbz	r0, 8004d72 <_printf_i+0x1e6>
 8004d6e:	1b80      	subs	r0, r0, r6
 8004d70:	6060      	str	r0, [r4, #4]
 8004d72:	6863      	ldr	r3, [r4, #4]
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	2300      	movs	r3, #0
 8004d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d7c:	e7aa      	b.n	8004cd4 <_printf_i+0x148>
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	4632      	mov	r2, r6
 8004d82:	4649      	mov	r1, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	47d0      	blx	sl
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d0ad      	beq.n	8004ce8 <_printf_i+0x15c>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	079b      	lsls	r3, r3, #30
 8004d90:	d413      	bmi.n	8004dba <_printf_i+0x22e>
 8004d92:	68e0      	ldr	r0, [r4, #12]
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	4298      	cmp	r0, r3
 8004d98:	bfb8      	it	lt
 8004d9a:	4618      	movlt	r0, r3
 8004d9c:	e7a6      	b.n	8004cec <_printf_i+0x160>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4632      	mov	r2, r6
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	47d0      	blx	sl
 8004da8:	3001      	adds	r0, #1
 8004daa:	d09d      	beq.n	8004ce8 <_printf_i+0x15c>
 8004dac:	3501      	adds	r5, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	9903      	ldr	r1, [sp, #12]
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dcf2      	bgt.n	8004d9e <_printf_i+0x212>
 8004db8:	e7eb      	b.n	8004d92 <_printf_i+0x206>
 8004dba:	2500      	movs	r5, #0
 8004dbc:	f104 0619 	add.w	r6, r4, #25
 8004dc0:	e7f5      	b.n	8004dae <_printf_i+0x222>
 8004dc2:	bf00      	nop
 8004dc4:	08008c62 	.word	0x08008c62
 8004dc8:	08008c73 	.word	0x08008c73

08004dcc <_scanf_float>:
 8004dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd0:	b087      	sub	sp, #28
 8004dd2:	4617      	mov	r7, r2
 8004dd4:	9303      	str	r3, [sp, #12]
 8004dd6:	688b      	ldr	r3, [r1, #8]
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004dde:	bf81      	itttt	hi
 8004de0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004de4:	eb03 0b05 	addhi.w	fp, r3, r5
 8004de8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004dec:	608b      	strhi	r3, [r1, #8]
 8004dee:	680b      	ldr	r3, [r1, #0]
 8004df0:	460a      	mov	r2, r1
 8004df2:	f04f 0500 	mov.w	r5, #0
 8004df6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004dfa:	f842 3b1c 	str.w	r3, [r2], #28
 8004dfe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e02:	4680      	mov	r8, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	bf98      	it	ls
 8004e08:	f04f 0b00 	movls.w	fp, #0
 8004e0c:	9201      	str	r2, [sp, #4]
 8004e0e:	4616      	mov	r6, r2
 8004e10:	46aa      	mov	sl, r5
 8004e12:	46a9      	mov	r9, r5
 8004e14:	9502      	str	r5, [sp, #8]
 8004e16:	68a2      	ldr	r2, [r4, #8]
 8004e18:	b152      	cbz	r2, 8004e30 <_scanf_float+0x64>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e20:	d864      	bhi.n	8004eec <_scanf_float+0x120>
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d83c      	bhi.n	8004ea0 <_scanf_float+0xd4>
 8004e26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e2a:	b2c8      	uxtb	r0, r1
 8004e2c:	280e      	cmp	r0, #14
 8004e2e:	d93a      	bls.n	8004ea6 <_scanf_float+0xda>
 8004e30:	f1b9 0f00 	cmp.w	r9, #0
 8004e34:	d003      	beq.n	8004e3e <_scanf_float+0x72>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e42:	f1ba 0f01 	cmp.w	sl, #1
 8004e46:	f200 8117 	bhi.w	8005078 <_scanf_float+0x2ac>
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	429e      	cmp	r6, r3
 8004e4e:	f200 8108 	bhi.w	8005062 <_scanf_float+0x296>
 8004e52:	2001      	movs	r0, #1
 8004e54:	b007      	add	sp, #28
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e5e:	2a0d      	cmp	r2, #13
 8004e60:	d8e6      	bhi.n	8004e30 <_scanf_float+0x64>
 8004e62:	a101      	add	r1, pc, #4	@ (adr r1, 8004e68 <_scanf_float+0x9c>)
 8004e64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e68:	08004faf 	.word	0x08004faf
 8004e6c:	08004e31 	.word	0x08004e31
 8004e70:	08004e31 	.word	0x08004e31
 8004e74:	08004e31 	.word	0x08004e31
 8004e78:	0800500f 	.word	0x0800500f
 8004e7c:	08004fe7 	.word	0x08004fe7
 8004e80:	08004e31 	.word	0x08004e31
 8004e84:	08004e31 	.word	0x08004e31
 8004e88:	08004fbd 	.word	0x08004fbd
 8004e8c:	08004e31 	.word	0x08004e31
 8004e90:	08004e31 	.word	0x08004e31
 8004e94:	08004e31 	.word	0x08004e31
 8004e98:	08004e31 	.word	0x08004e31
 8004e9c:	08004f75 	.word	0x08004f75
 8004ea0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004ea4:	e7db      	b.n	8004e5e <_scanf_float+0x92>
 8004ea6:	290e      	cmp	r1, #14
 8004ea8:	d8c2      	bhi.n	8004e30 <_scanf_float+0x64>
 8004eaa:	a001      	add	r0, pc, #4	@ (adr r0, 8004eb0 <_scanf_float+0xe4>)
 8004eac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004eb0:	08004f65 	.word	0x08004f65
 8004eb4:	08004e31 	.word	0x08004e31
 8004eb8:	08004f65 	.word	0x08004f65
 8004ebc:	08004ffb 	.word	0x08004ffb
 8004ec0:	08004e31 	.word	0x08004e31
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f4b 	.word	0x08004f4b
 8004ecc:	08004f4b 	.word	0x08004f4b
 8004ed0:	08004f4b 	.word	0x08004f4b
 8004ed4:	08004f4b 	.word	0x08004f4b
 8004ed8:	08004f4b 	.word	0x08004f4b
 8004edc:	08004f4b 	.word	0x08004f4b
 8004ee0:	08004f4b 	.word	0x08004f4b
 8004ee4:	08004f4b 	.word	0x08004f4b
 8004ee8:	08004f4b 	.word	0x08004f4b
 8004eec:	2b6e      	cmp	r3, #110	@ 0x6e
 8004eee:	d809      	bhi.n	8004f04 <_scanf_float+0x138>
 8004ef0:	2b60      	cmp	r3, #96	@ 0x60
 8004ef2:	d8b2      	bhi.n	8004e5a <_scanf_float+0x8e>
 8004ef4:	2b54      	cmp	r3, #84	@ 0x54
 8004ef6:	d07b      	beq.n	8004ff0 <_scanf_float+0x224>
 8004ef8:	2b59      	cmp	r3, #89	@ 0x59
 8004efa:	d199      	bne.n	8004e30 <_scanf_float+0x64>
 8004efc:	2d07      	cmp	r5, #7
 8004efe:	d197      	bne.n	8004e30 <_scanf_float+0x64>
 8004f00:	2508      	movs	r5, #8
 8004f02:	e02c      	b.n	8004f5e <_scanf_float+0x192>
 8004f04:	2b74      	cmp	r3, #116	@ 0x74
 8004f06:	d073      	beq.n	8004ff0 <_scanf_float+0x224>
 8004f08:	2b79      	cmp	r3, #121	@ 0x79
 8004f0a:	e7f6      	b.n	8004efa <_scanf_float+0x12e>
 8004f0c:	6821      	ldr	r1, [r4, #0]
 8004f0e:	05c8      	lsls	r0, r1, #23
 8004f10:	d51b      	bpl.n	8004f4a <_scanf_float+0x17e>
 8004f12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	f109 0901 	add.w	r9, r9, #1
 8004f1c:	f1bb 0f00 	cmp.w	fp, #0
 8004f20:	d003      	beq.n	8004f2a <_scanf_float+0x15e>
 8004f22:	3201      	adds	r2, #1
 8004f24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f28:	60a2      	str	r2, [r4, #8]
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60a3      	str	r3, [r4, #8]
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	3301      	adds	r3, #1
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	f340 8087 	ble.w	8005050 <_scanf_float+0x284>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	e765      	b.n	8004e16 <_scanf_float+0x4a>
 8004f4a:	eb1a 0105 	adds.w	r1, sl, r5
 8004f4e:	f47f af6f 	bne.w	8004e30 <_scanf_float+0x64>
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	468a      	mov	sl, r1
 8004f5e:	f806 3b01 	strb.w	r3, [r6], #1
 8004f62:	e7e2      	b.n	8004f2a <_scanf_float+0x15e>
 8004f64:	6822      	ldr	r2, [r4, #0]
 8004f66:	0610      	lsls	r0, r2, #24
 8004f68:	f57f af62 	bpl.w	8004e30 <_scanf_float+0x64>
 8004f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	e7f4      	b.n	8004f5e <_scanf_float+0x192>
 8004f74:	f1ba 0f00 	cmp.w	sl, #0
 8004f78:	d10e      	bne.n	8004f98 <_scanf_float+0x1cc>
 8004f7a:	f1b9 0f00 	cmp.w	r9, #0
 8004f7e:	d10e      	bne.n	8004f9e <_scanf_float+0x1d2>
 8004f80:	6822      	ldr	r2, [r4, #0]
 8004f82:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f86:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f8a:	d108      	bne.n	8004f9e <_scanf_float+0x1d2>
 8004f8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	f04f 0a01 	mov.w	sl, #1
 8004f96:	e7e2      	b.n	8004f5e <_scanf_float+0x192>
 8004f98:	f1ba 0f02 	cmp.w	sl, #2
 8004f9c:	d055      	beq.n	800504a <_scanf_float+0x27e>
 8004f9e:	2d01      	cmp	r5, #1
 8004fa0:	d002      	beq.n	8004fa8 <_scanf_float+0x1dc>
 8004fa2:	2d04      	cmp	r5, #4
 8004fa4:	f47f af44 	bne.w	8004e30 <_scanf_float+0x64>
 8004fa8:	3501      	adds	r5, #1
 8004faa:	b2ed      	uxtb	r5, r5
 8004fac:	e7d7      	b.n	8004f5e <_scanf_float+0x192>
 8004fae:	f1ba 0f01 	cmp.w	sl, #1
 8004fb2:	f47f af3d 	bne.w	8004e30 <_scanf_float+0x64>
 8004fb6:	f04f 0a02 	mov.w	sl, #2
 8004fba:	e7d0      	b.n	8004f5e <_scanf_float+0x192>
 8004fbc:	b97d      	cbnz	r5, 8004fde <_scanf_float+0x212>
 8004fbe:	f1b9 0f00 	cmp.w	r9, #0
 8004fc2:	f47f af38 	bne.w	8004e36 <_scanf_float+0x6a>
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004fd0:	f040 8108 	bne.w	80051e4 <_scanf_float+0x418>
 8004fd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	2501      	movs	r5, #1
 8004fdc:	e7bf      	b.n	8004f5e <_scanf_float+0x192>
 8004fde:	2d03      	cmp	r5, #3
 8004fe0:	d0e2      	beq.n	8004fa8 <_scanf_float+0x1dc>
 8004fe2:	2d05      	cmp	r5, #5
 8004fe4:	e7de      	b.n	8004fa4 <_scanf_float+0x1d8>
 8004fe6:	2d02      	cmp	r5, #2
 8004fe8:	f47f af22 	bne.w	8004e30 <_scanf_float+0x64>
 8004fec:	2503      	movs	r5, #3
 8004fee:	e7b6      	b.n	8004f5e <_scanf_float+0x192>
 8004ff0:	2d06      	cmp	r5, #6
 8004ff2:	f47f af1d 	bne.w	8004e30 <_scanf_float+0x64>
 8004ff6:	2507      	movs	r5, #7
 8004ff8:	e7b1      	b.n	8004f5e <_scanf_float+0x192>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	0591      	lsls	r1, r2, #22
 8004ffe:	f57f af17 	bpl.w	8004e30 <_scanf_float+0x64>
 8005002:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005006:	6022      	str	r2, [r4, #0]
 8005008:	f8cd 9008 	str.w	r9, [sp, #8]
 800500c:	e7a7      	b.n	8004f5e <_scanf_float+0x192>
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005014:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005018:	d006      	beq.n	8005028 <_scanf_float+0x25c>
 800501a:	0550      	lsls	r0, r2, #21
 800501c:	f57f af08 	bpl.w	8004e30 <_scanf_float+0x64>
 8005020:	f1b9 0f00 	cmp.w	r9, #0
 8005024:	f000 80de 	beq.w	80051e4 <_scanf_float+0x418>
 8005028:	0591      	lsls	r1, r2, #22
 800502a:	bf58      	it	pl
 800502c:	9902      	ldrpl	r1, [sp, #8]
 800502e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005032:	bf58      	it	pl
 8005034:	eba9 0101 	subpl.w	r1, r9, r1
 8005038:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800503c:	bf58      	it	pl
 800503e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	f04f 0900 	mov.w	r9, #0
 8005048:	e789      	b.n	8004f5e <_scanf_float+0x192>
 800504a:	f04f 0a03 	mov.w	sl, #3
 800504e:	e786      	b.n	8004f5e <_scanf_float+0x192>
 8005050:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005054:	4639      	mov	r1, r7
 8005056:	4640      	mov	r0, r8
 8005058:	4798      	blx	r3
 800505a:	2800      	cmp	r0, #0
 800505c:	f43f aedb 	beq.w	8004e16 <_scanf_float+0x4a>
 8005060:	e6e6      	b.n	8004e30 <_scanf_float+0x64>
 8005062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800506a:	463a      	mov	r2, r7
 800506c:	4640      	mov	r0, r8
 800506e:	4798      	blx	r3
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	3b01      	subs	r3, #1
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	e6e8      	b.n	8004e4a <_scanf_float+0x7e>
 8005078:	1e6b      	subs	r3, r5, #1
 800507a:	2b06      	cmp	r3, #6
 800507c:	d824      	bhi.n	80050c8 <_scanf_float+0x2fc>
 800507e:	2d02      	cmp	r5, #2
 8005080:	d836      	bhi.n	80050f0 <_scanf_float+0x324>
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	429e      	cmp	r6, r3
 8005086:	f67f aee4 	bls.w	8004e52 <_scanf_float+0x86>
 800508a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800508e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005092:	463a      	mov	r2, r7
 8005094:	4640      	mov	r0, r8
 8005096:	4798      	blx	r3
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	3b01      	subs	r3, #1
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	e7f0      	b.n	8005082 <_scanf_float+0x2b6>
 80050a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80050a8:	463a      	mov	r2, r7
 80050aa:	4640      	mov	r0, r8
 80050ac:	4798      	blx	r3
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	6123      	str	r3, [r4, #16]
 80050b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050b8:	fa5f fa8a 	uxtb.w	sl, sl
 80050bc:	f1ba 0f02 	cmp.w	sl, #2
 80050c0:	d1ee      	bne.n	80050a0 <_scanf_float+0x2d4>
 80050c2:	3d03      	subs	r5, #3
 80050c4:	b2ed      	uxtb	r5, r5
 80050c6:	1b76      	subs	r6, r6, r5
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	05da      	lsls	r2, r3, #23
 80050cc:	d530      	bpl.n	8005130 <_scanf_float+0x364>
 80050ce:	055b      	lsls	r3, r3, #21
 80050d0:	d511      	bpl.n	80050f6 <_scanf_float+0x32a>
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	429e      	cmp	r6, r3
 80050d6:	f67f aebc 	bls.w	8004e52 <_scanf_float+0x86>
 80050da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050e2:	463a      	mov	r2, r7
 80050e4:	4640      	mov	r0, r8
 80050e6:	4798      	blx	r3
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	e7f0      	b.n	80050d2 <_scanf_float+0x306>
 80050f0:	46aa      	mov	sl, r5
 80050f2:	46b3      	mov	fp, r6
 80050f4:	e7de      	b.n	80050b4 <_scanf_float+0x2e8>
 80050f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	2965      	cmp	r1, #101	@ 0x65
 80050fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005102:	f106 35ff 	add.w	r5, r6, #4294967295
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	d00c      	beq.n	8005124 <_scanf_float+0x358>
 800510a:	2945      	cmp	r1, #69	@ 0x45
 800510c:	d00a      	beq.n	8005124 <_scanf_float+0x358>
 800510e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005112:	463a      	mov	r2, r7
 8005114:	4640      	mov	r0, r8
 8005116:	4798      	blx	r3
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800511e:	3b01      	subs	r3, #1
 8005120:	1eb5      	subs	r5, r6, #2
 8005122:	6123      	str	r3, [r4, #16]
 8005124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005128:	463a      	mov	r2, r7
 800512a:	4640      	mov	r0, r8
 800512c:	4798      	blx	r3
 800512e:	462e      	mov	r6, r5
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	f012 0210 	ands.w	r2, r2, #16
 8005136:	d001      	beq.n	800513c <_scanf_float+0x370>
 8005138:	2000      	movs	r0, #0
 800513a:	e68b      	b.n	8004e54 <_scanf_float+0x88>
 800513c:	7032      	strb	r2, [r6, #0]
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005148:	d11c      	bne.n	8005184 <_scanf_float+0x3b8>
 800514a:	9b02      	ldr	r3, [sp, #8]
 800514c:	454b      	cmp	r3, r9
 800514e:	eba3 0209 	sub.w	r2, r3, r9
 8005152:	d123      	bne.n	800519c <_scanf_float+0x3d0>
 8005154:	9901      	ldr	r1, [sp, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	4640      	mov	r0, r8
 800515a:	f002 fbf9 	bl	8007950 <_strtod_r>
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	6821      	ldr	r1, [r4, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f011 0f02 	tst.w	r1, #2
 8005168:	ec57 6b10 	vmov	r6, r7, d0
 800516c:	f103 0204 	add.w	r2, r3, #4
 8005170:	d01f      	beq.n	80051b2 <_scanf_float+0x3e6>
 8005172:	9903      	ldr	r1, [sp, #12]
 8005174:	600a      	str	r2, [r1, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	e9c3 6700 	strd	r6, r7, [r3]
 800517c:	68e3      	ldr	r3, [r4, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	60e3      	str	r3, [r4, #12]
 8005182:	e7d9      	b.n	8005138 <_scanf_float+0x36c>
 8005184:	9b04      	ldr	r3, [sp, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0e4      	beq.n	8005154 <_scanf_float+0x388>
 800518a:	9905      	ldr	r1, [sp, #20]
 800518c:	230a      	movs	r3, #10
 800518e:	3101      	adds	r1, #1
 8005190:	4640      	mov	r0, r8
 8005192:	f002 fc5d 	bl	8007a50 <_strtol_r>
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	9e05      	ldr	r6, [sp, #20]
 800519a:	1ac2      	subs	r2, r0, r3
 800519c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80051a0:	429e      	cmp	r6, r3
 80051a2:	bf28      	it	cs
 80051a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80051a8:	4910      	ldr	r1, [pc, #64]	@ (80051ec <_scanf_float+0x420>)
 80051aa:	4630      	mov	r0, r6
 80051ac:	f000 f8e4 	bl	8005378 <siprintf>
 80051b0:	e7d0      	b.n	8005154 <_scanf_float+0x388>
 80051b2:	f011 0f04 	tst.w	r1, #4
 80051b6:	9903      	ldr	r1, [sp, #12]
 80051b8:	600a      	str	r2, [r1, #0]
 80051ba:	d1dc      	bne.n	8005176 <_scanf_float+0x3aa>
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	4632      	mov	r2, r6
 80051c0:	463b      	mov	r3, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	4639      	mov	r1, r7
 80051c6:	f7fb fcb1 	bl	8000b2c <__aeabi_dcmpun>
 80051ca:	b128      	cbz	r0, 80051d8 <_scanf_float+0x40c>
 80051cc:	4808      	ldr	r0, [pc, #32]	@ (80051f0 <_scanf_float+0x424>)
 80051ce:	f000 f9b7 	bl	8005540 <nanf>
 80051d2:	ed85 0a00 	vstr	s0, [r5]
 80051d6:	e7d1      	b.n	800517c <_scanf_float+0x3b0>
 80051d8:	4630      	mov	r0, r6
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fb fd04 	bl	8000be8 <__aeabi_d2f>
 80051e0:	6028      	str	r0, [r5, #0]
 80051e2:	e7cb      	b.n	800517c <_scanf_float+0x3b0>
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	e629      	b.n	8004e3e <_scanf_float+0x72>
 80051ea:	bf00      	nop
 80051ec:	08008c84 	.word	0x08008c84
 80051f0:	0800901d 	.word	0x0800901d

080051f4 <std>:
 80051f4:	2300      	movs	r3, #0
 80051f6:	b510      	push	{r4, lr}
 80051f8:	4604      	mov	r4, r0
 80051fa:	e9c0 3300 	strd	r3, r3, [r0]
 80051fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005202:	6083      	str	r3, [r0, #8]
 8005204:	8181      	strh	r1, [r0, #12]
 8005206:	6643      	str	r3, [r0, #100]	@ 0x64
 8005208:	81c2      	strh	r2, [r0, #14]
 800520a:	6183      	str	r3, [r0, #24]
 800520c:	4619      	mov	r1, r3
 800520e:	2208      	movs	r2, #8
 8005210:	305c      	adds	r0, #92	@ 0x5c
 8005212:	f000 f914 	bl	800543e <memset>
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <std+0x58>)
 8005218:	6263      	str	r3, [r4, #36]	@ 0x24
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <std+0x5c>)
 800521c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <std+0x60>)
 8005220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <std+0x64>)
 8005224:	6323      	str	r3, [r4, #48]	@ 0x30
 8005226:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <std+0x68>)
 8005228:	6224      	str	r4, [r4, #32]
 800522a:	429c      	cmp	r4, r3
 800522c:	d006      	beq.n	800523c <std+0x48>
 800522e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005232:	4294      	cmp	r4, r2
 8005234:	d002      	beq.n	800523c <std+0x48>
 8005236:	33d0      	adds	r3, #208	@ 0xd0
 8005238:	429c      	cmp	r4, r3
 800523a:	d105      	bne.n	8005248 <std+0x54>
 800523c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005244:	f000 b978 	b.w	8005538 <__retarget_lock_init_recursive>
 8005248:	bd10      	pop	{r4, pc}
 800524a:	bf00      	nop
 800524c:	080053b9 	.word	0x080053b9
 8005250:	080053db 	.word	0x080053db
 8005254:	08005413 	.word	0x08005413
 8005258:	08005437 	.word	0x08005437
 800525c:	200002e4 	.word	0x200002e4

08005260 <stdio_exit_handler>:
 8005260:	4a02      	ldr	r2, [pc, #8]	@ (800526c <stdio_exit_handler+0xc>)
 8005262:	4903      	ldr	r1, [pc, #12]	@ (8005270 <stdio_exit_handler+0x10>)
 8005264:	4803      	ldr	r0, [pc, #12]	@ (8005274 <stdio_exit_handler+0x14>)
 8005266:	f000 b869 	b.w	800533c <_fwalk_sglue>
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c
 8005270:	08007e0d 	.word	0x08007e0d
 8005274:	2000001c 	.word	0x2000001c

08005278 <cleanup_stdio>:
 8005278:	6841      	ldr	r1, [r0, #4]
 800527a:	4b0c      	ldr	r3, [pc, #48]	@ (80052ac <cleanup_stdio+0x34>)
 800527c:	4299      	cmp	r1, r3
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
 8005282:	d001      	beq.n	8005288 <cleanup_stdio+0x10>
 8005284:	f002 fdc2 	bl	8007e0c <_fflush_r>
 8005288:	68a1      	ldr	r1, [r4, #8]
 800528a:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <cleanup_stdio+0x38>)
 800528c:	4299      	cmp	r1, r3
 800528e:	d002      	beq.n	8005296 <cleanup_stdio+0x1e>
 8005290:	4620      	mov	r0, r4
 8005292:	f002 fdbb 	bl	8007e0c <_fflush_r>
 8005296:	68e1      	ldr	r1, [r4, #12]
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <cleanup_stdio+0x3c>)
 800529a:	4299      	cmp	r1, r3
 800529c:	d004      	beq.n	80052a8 <cleanup_stdio+0x30>
 800529e:	4620      	mov	r0, r4
 80052a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a4:	f002 bdb2 	b.w	8007e0c <_fflush_r>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	200002e4 	.word	0x200002e4
 80052b0:	2000034c 	.word	0x2000034c
 80052b4:	200003b4 	.word	0x200003b4

080052b8 <global_stdio_init.part.0>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <global_stdio_init.part.0+0x30>)
 80052bc:	4c0b      	ldr	r4, [pc, #44]	@ (80052ec <global_stdio_init.part.0+0x34>)
 80052be:	4a0c      	ldr	r2, [pc, #48]	@ (80052f0 <global_stdio_init.part.0+0x38>)
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	4620      	mov	r0, r4
 80052c4:	2200      	movs	r2, #0
 80052c6:	2104      	movs	r1, #4
 80052c8:	f7ff ff94 	bl	80051f4 <std>
 80052cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052d0:	2201      	movs	r2, #1
 80052d2:	2109      	movs	r1, #9
 80052d4:	f7ff ff8e 	bl	80051f4 <std>
 80052d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052dc:	2202      	movs	r2, #2
 80052de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e2:	2112      	movs	r1, #18
 80052e4:	f7ff bf86 	b.w	80051f4 <std>
 80052e8:	2000041c 	.word	0x2000041c
 80052ec:	200002e4 	.word	0x200002e4
 80052f0:	08005261 	.word	0x08005261

080052f4 <__sfp_lock_acquire>:
 80052f4:	4801      	ldr	r0, [pc, #4]	@ (80052fc <__sfp_lock_acquire+0x8>)
 80052f6:	f000 b920 	b.w	800553a <__retarget_lock_acquire_recursive>
 80052fa:	bf00      	nop
 80052fc:	20000425 	.word	0x20000425

08005300 <__sfp_lock_release>:
 8005300:	4801      	ldr	r0, [pc, #4]	@ (8005308 <__sfp_lock_release+0x8>)
 8005302:	f000 b91b 	b.w	800553c <__retarget_lock_release_recursive>
 8005306:	bf00      	nop
 8005308:	20000425 	.word	0x20000425

0800530c <__sinit>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	f7ff fff0 	bl	80052f4 <__sfp_lock_acquire>
 8005314:	6a23      	ldr	r3, [r4, #32]
 8005316:	b11b      	cbz	r3, 8005320 <__sinit+0x14>
 8005318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531c:	f7ff bff0 	b.w	8005300 <__sfp_lock_release>
 8005320:	4b04      	ldr	r3, [pc, #16]	@ (8005334 <__sinit+0x28>)
 8005322:	6223      	str	r3, [r4, #32]
 8005324:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <__sinit+0x2c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f5      	bne.n	8005318 <__sinit+0xc>
 800532c:	f7ff ffc4 	bl	80052b8 <global_stdio_init.part.0>
 8005330:	e7f2      	b.n	8005318 <__sinit+0xc>
 8005332:	bf00      	nop
 8005334:	08005279 	.word	0x08005279
 8005338:	2000041c 	.word	0x2000041c

0800533c <_fwalk_sglue>:
 800533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005340:	4607      	mov	r7, r0
 8005342:	4688      	mov	r8, r1
 8005344:	4614      	mov	r4, r2
 8005346:	2600      	movs	r6, #0
 8005348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800534c:	f1b9 0901 	subs.w	r9, r9, #1
 8005350:	d505      	bpl.n	800535e <_fwalk_sglue+0x22>
 8005352:	6824      	ldr	r4, [r4, #0]
 8005354:	2c00      	cmp	r4, #0
 8005356:	d1f7      	bne.n	8005348 <_fwalk_sglue+0xc>
 8005358:	4630      	mov	r0, r6
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d907      	bls.n	8005374 <_fwalk_sglue+0x38>
 8005364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005368:	3301      	adds	r3, #1
 800536a:	d003      	beq.n	8005374 <_fwalk_sglue+0x38>
 800536c:	4629      	mov	r1, r5
 800536e:	4638      	mov	r0, r7
 8005370:	47c0      	blx	r8
 8005372:	4306      	orrs	r6, r0
 8005374:	3568      	adds	r5, #104	@ 0x68
 8005376:	e7e9      	b.n	800534c <_fwalk_sglue+0x10>

08005378 <siprintf>:
 8005378:	b40e      	push	{r1, r2, r3}
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	@ 0x70
 800537e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005388:	4809      	ldr	r0, [pc, #36]	@ (80053b0 <siprintf+0x38>)
 800538a:	9107      	str	r1, [sp, #28]
 800538c:	9104      	str	r1, [sp, #16]
 800538e:	4909      	ldr	r1, [pc, #36]	@ (80053b4 <siprintf+0x3c>)
 8005390:	f853 2b04 	ldr.w	r2, [r3], #4
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	a902      	add	r1, sp, #8
 800539c:	f002 fbb6 	bl	8007b0c <_svfiprintf_r>
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	b01c      	add	sp, #112	@ 0x70
 80053a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ac:	b003      	add	sp, #12
 80053ae:	4770      	bx	lr
 80053b0:	20000018 	.word	0x20000018
 80053b4:	ffff0208 	.word	0xffff0208

080053b8 <__sread>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	460c      	mov	r4, r1
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	f000 f86c 	bl	800549c <_read_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	bfab      	itete	ge
 80053c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ca:	89a3      	ldrhlt	r3, [r4, #12]
 80053cc:	181b      	addge	r3, r3, r0
 80053ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053d2:	bfac      	ite	ge
 80053d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053d6:	81a3      	strhlt	r3, [r4, #12]
 80053d8:	bd10      	pop	{r4, pc}

080053da <__swrite>:
 80053da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	461f      	mov	r7, r3
 80053e0:	898b      	ldrh	r3, [r1, #12]
 80053e2:	05db      	lsls	r3, r3, #23
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	4616      	mov	r6, r2
 80053ea:	d505      	bpl.n	80053f8 <__swrite+0x1e>
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	2302      	movs	r3, #2
 80053f2:	2200      	movs	r2, #0
 80053f4:	f000 f840 	bl	8005478 <_lseek_r>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	4628      	mov	r0, r5
 800540a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	f000 b857 	b.w	80054c0 <_write_r>

08005412 <__sseek>:
 8005412:	b510      	push	{r4, lr}
 8005414:	460c      	mov	r4, r1
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 f82d 	bl	8005478 <_lseek_r>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	bf15      	itete	ne
 8005424:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800542a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800542e:	81a3      	strheq	r3, [r4, #12]
 8005430:	bf18      	it	ne
 8005432:	81a3      	strhne	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__sclose>:
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 b80d 	b.w	8005458 <_close_r>

0800543e <memset>:
 800543e:	4402      	add	r2, r0
 8005440:	4603      	mov	r3, r0
 8005442:	4293      	cmp	r3, r2
 8005444:	d100      	bne.n	8005448 <memset+0xa>
 8005446:	4770      	bx	lr
 8005448:	f803 1b01 	strb.w	r1, [r3], #1
 800544c:	e7f9      	b.n	8005442 <memset+0x4>
	...

08005450 <_localeconv_r>:
 8005450:	4800      	ldr	r0, [pc, #0]	@ (8005454 <_localeconv_r+0x4>)
 8005452:	4770      	bx	lr
 8005454:	20000158 	.word	0x20000158

08005458 <_close_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_close_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fc f8ad 	bl	80015c2 <_close>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_close_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_close_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000420 	.word	0x20000420

08005478 <_lseek_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d07      	ldr	r5, [pc, #28]	@ (8005498 <_lseek_r+0x20>)
 800547c:	4604      	mov	r4, r0
 800547e:	4608      	mov	r0, r1
 8005480:	4611      	mov	r1, r2
 8005482:	2200      	movs	r2, #0
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fc f8c2 	bl	8001610 <_lseek>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_lseek_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_lseek_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000420 	.word	0x20000420

0800549c <_read_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	@ (80054bc <_read_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fc f850 	bl	8001550 <_read>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_read_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_read_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20000420 	.word	0x20000420

080054c0 <_write_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d07      	ldr	r5, [pc, #28]	@ (80054e0 <_write_r+0x20>)
 80054c4:	4604      	mov	r4, r0
 80054c6:	4608      	mov	r0, r1
 80054c8:	4611      	mov	r1, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	602a      	str	r2, [r5, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f7fc f85b 	bl	800158a <_write>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d102      	bne.n	80054de <_write_r+0x1e>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	b103      	cbz	r3, 80054de <_write_r+0x1e>
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	bd38      	pop	{r3, r4, r5, pc}
 80054e0:	20000420 	.word	0x20000420

080054e4 <__errno>:
 80054e4:	4b01      	ldr	r3, [pc, #4]	@ (80054ec <__errno+0x8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20000018 	.word	0x20000018

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005528 <__libc_init_array+0x38>)
 80054f4:	4c0d      	ldr	r4, [pc, #52]	@ (800552c <__libc_init_array+0x3c>)
 80054f6:	1b64      	subs	r4, r4, r5
 80054f8:	10a4      	asrs	r4, r4, #2
 80054fa:	2600      	movs	r6, #0
 80054fc:	42a6      	cmp	r6, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	4d0b      	ldr	r5, [pc, #44]	@ (8005530 <__libc_init_array+0x40>)
 8005502:	4c0c      	ldr	r4, [pc, #48]	@ (8005534 <__libc_init_array+0x44>)
 8005504:	f003 fb72 	bl	8008bec <_init>
 8005508:	1b64      	subs	r4, r4, r5
 800550a:	10a4      	asrs	r4, r4, #2
 800550c:	2600      	movs	r6, #0
 800550e:	42a6      	cmp	r6, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	f855 3b04 	ldr.w	r3, [r5], #4
 8005518:	4798      	blx	r3
 800551a:	3601      	adds	r6, #1
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005522:	4798      	blx	r3
 8005524:	3601      	adds	r6, #1
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	08009088 	.word	0x08009088
 800552c:	08009088 	.word	0x08009088
 8005530:	08009088 	.word	0x08009088
 8005534:	0800908c 	.word	0x0800908c

08005538 <__retarget_lock_init_recursive>:
 8005538:	4770      	bx	lr

0800553a <__retarget_lock_acquire_recursive>:
 800553a:	4770      	bx	lr

0800553c <__retarget_lock_release_recursive>:
 800553c:	4770      	bx	lr
	...

08005540 <nanf>:
 8005540:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005548 <nanf+0x8>
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	7fc00000 	.word	0x7fc00000

0800554c <quorem>:
 800554c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	6903      	ldr	r3, [r0, #16]
 8005552:	690c      	ldr	r4, [r1, #16]
 8005554:	42a3      	cmp	r3, r4
 8005556:	4607      	mov	r7, r0
 8005558:	db7e      	blt.n	8005658 <quorem+0x10c>
 800555a:	3c01      	subs	r4, #1
 800555c:	f101 0814 	add.w	r8, r1, #20
 8005560:	00a3      	lsls	r3, r4, #2
 8005562:	f100 0514 	add.w	r5, r0, #20
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005576:	3301      	adds	r3, #1
 8005578:	429a      	cmp	r2, r3
 800557a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800557e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005582:	d32e      	bcc.n	80055e2 <quorem+0x96>
 8005584:	f04f 0a00 	mov.w	sl, #0
 8005588:	46c4      	mov	ip, r8
 800558a:	46ae      	mov	lr, r5
 800558c:	46d3      	mov	fp, sl
 800558e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005592:	b298      	uxth	r0, r3
 8005594:	fb06 a000 	mla	r0, r6, r0, sl
 8005598:	0c02      	lsrs	r2, r0, #16
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	fb06 2303 	mla	r3, r6, r3, r2
 80055a0:	f8de 2000 	ldr.w	r2, [lr]
 80055a4:	b280      	uxth	r0, r0
 80055a6:	b292      	uxth	r2, r2
 80055a8:	1a12      	subs	r2, r2, r0
 80055aa:	445a      	add	r2, fp
 80055ac:	f8de 0000 	ldr.w	r0, [lr]
 80055b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055be:	b292      	uxth	r2, r2
 80055c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055c4:	45e1      	cmp	r9, ip
 80055c6:	f84e 2b04 	str.w	r2, [lr], #4
 80055ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055ce:	d2de      	bcs.n	800558e <quorem+0x42>
 80055d0:	9b00      	ldr	r3, [sp, #0]
 80055d2:	58eb      	ldr	r3, [r5, r3]
 80055d4:	b92b      	cbnz	r3, 80055e2 <quorem+0x96>
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	3b04      	subs	r3, #4
 80055da:	429d      	cmp	r5, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	d32f      	bcc.n	8005640 <quorem+0xf4>
 80055e0:	613c      	str	r4, [r7, #16]
 80055e2:	4638      	mov	r0, r7
 80055e4:	f001 f9c4 	bl	8006970 <__mcmp>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	db25      	blt.n	8005638 <quorem+0xec>
 80055ec:	4629      	mov	r1, r5
 80055ee:	2000      	movs	r0, #0
 80055f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80055f4:	f8d1 c000 	ldr.w	ip, [r1]
 80055f8:	fa1f fe82 	uxth.w	lr, r2
 80055fc:	fa1f f38c 	uxth.w	r3, ip
 8005600:	eba3 030e 	sub.w	r3, r3, lr
 8005604:	4403      	add	r3, r0
 8005606:	0c12      	lsrs	r2, r2, #16
 8005608:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800560c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005610:	b29b      	uxth	r3, r3
 8005612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005616:	45c1      	cmp	r9, r8
 8005618:	f841 3b04 	str.w	r3, [r1], #4
 800561c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005620:	d2e6      	bcs.n	80055f0 <quorem+0xa4>
 8005622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800562a:	b922      	cbnz	r2, 8005636 <quorem+0xea>
 800562c:	3b04      	subs	r3, #4
 800562e:	429d      	cmp	r5, r3
 8005630:	461a      	mov	r2, r3
 8005632:	d30b      	bcc.n	800564c <quorem+0x100>
 8005634:	613c      	str	r4, [r7, #16]
 8005636:	3601      	adds	r6, #1
 8005638:	4630      	mov	r0, r6
 800563a:	b003      	add	sp, #12
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	3b04      	subs	r3, #4
 8005644:	2a00      	cmp	r2, #0
 8005646:	d1cb      	bne.n	80055e0 <quorem+0x94>
 8005648:	3c01      	subs	r4, #1
 800564a:	e7c6      	b.n	80055da <quorem+0x8e>
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	3b04      	subs	r3, #4
 8005650:	2a00      	cmp	r2, #0
 8005652:	d1ef      	bne.n	8005634 <quorem+0xe8>
 8005654:	3c01      	subs	r4, #1
 8005656:	e7ea      	b.n	800562e <quorem+0xe2>
 8005658:	2000      	movs	r0, #0
 800565a:	e7ee      	b.n	800563a <quorem+0xee>
 800565c:	0000      	movs	r0, r0
	...

08005660 <_dtoa_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	69c7      	ldr	r7, [r0, #28]
 8005666:	b099      	sub	sp, #100	@ 0x64
 8005668:	ed8d 0b02 	vstr	d0, [sp, #8]
 800566c:	ec55 4b10 	vmov	r4, r5, d0
 8005670:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005672:	9109      	str	r1, [sp, #36]	@ 0x24
 8005674:	4683      	mov	fp, r0
 8005676:	920e      	str	r2, [sp, #56]	@ 0x38
 8005678:	9313      	str	r3, [sp, #76]	@ 0x4c
 800567a:	b97f      	cbnz	r7, 800569c <_dtoa_r+0x3c>
 800567c:	2010      	movs	r0, #16
 800567e:	f000 fdfd 	bl	800627c <malloc>
 8005682:	4602      	mov	r2, r0
 8005684:	f8cb 001c 	str.w	r0, [fp, #28]
 8005688:	b920      	cbnz	r0, 8005694 <_dtoa_r+0x34>
 800568a:	4ba7      	ldr	r3, [pc, #668]	@ (8005928 <_dtoa_r+0x2c8>)
 800568c:	21ef      	movs	r1, #239	@ 0xef
 800568e:	48a7      	ldr	r0, [pc, #668]	@ (800592c <_dtoa_r+0x2cc>)
 8005690:	f002 fc36 	bl	8007f00 <__assert_func>
 8005694:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005698:	6007      	str	r7, [r0, #0]
 800569a:	60c7      	str	r7, [r0, #12]
 800569c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	b159      	cbz	r1, 80056bc <_dtoa_r+0x5c>
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	604a      	str	r2, [r1, #4]
 80056a8:	2301      	movs	r3, #1
 80056aa:	4093      	lsls	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	4658      	mov	r0, fp
 80056b0:	f000 feda 	bl	8006468 <_Bfree>
 80056b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	1e2b      	subs	r3, r5, #0
 80056be:	bfb9      	ittee	lt
 80056c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056c4:	9303      	strlt	r3, [sp, #12]
 80056c6:	2300      	movge	r3, #0
 80056c8:	6033      	strge	r3, [r6, #0]
 80056ca:	9f03      	ldr	r7, [sp, #12]
 80056cc:	4b98      	ldr	r3, [pc, #608]	@ (8005930 <_dtoa_r+0x2d0>)
 80056ce:	bfbc      	itt	lt
 80056d0:	2201      	movlt	r2, #1
 80056d2:	6032      	strlt	r2, [r6, #0]
 80056d4:	43bb      	bics	r3, r7
 80056d6:	d112      	bne.n	80056fe <_dtoa_r+0x9e>
 80056d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056e4:	4323      	orrs	r3, r4
 80056e6:	f000 854d 	beq.w	8006184 <_dtoa_r+0xb24>
 80056ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005944 <_dtoa_r+0x2e4>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 854f 	beq.w	8006194 <_dtoa_r+0xb34>
 80056f6:	f10a 0303 	add.w	r3, sl, #3
 80056fa:	f000 bd49 	b.w	8006190 <_dtoa_r+0xb30>
 80056fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	ec51 0b17 	vmov	r0, r1, d7
 8005708:	2300      	movs	r3, #0
 800570a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800570e:	f7fb f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005712:	4680      	mov	r8, r0
 8005714:	b158      	cbz	r0, 800572e <_dtoa_r+0xce>
 8005716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005718:	2301      	movs	r3, #1
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800571e:	b113      	cbz	r3, 8005726 <_dtoa_r+0xc6>
 8005720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005722:	4b84      	ldr	r3, [pc, #528]	@ (8005934 <_dtoa_r+0x2d4>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005948 <_dtoa_r+0x2e8>
 800572a:	f000 bd33 	b.w	8006194 <_dtoa_r+0xb34>
 800572e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005732:	aa16      	add	r2, sp, #88	@ 0x58
 8005734:	a917      	add	r1, sp, #92	@ 0x5c
 8005736:	4658      	mov	r0, fp
 8005738:	f001 fa3a 	bl	8006bb0 <__d2b>
 800573c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005740:	4681      	mov	r9, r0
 8005742:	2e00      	cmp	r6, #0
 8005744:	d077      	beq.n	8005836 <_dtoa_r+0x1d6>
 8005746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005748:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800574c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005754:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005758:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800575c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005760:	4619      	mov	r1, r3
 8005762:	2200      	movs	r2, #0
 8005764:	4b74      	ldr	r3, [pc, #464]	@ (8005938 <_dtoa_r+0x2d8>)
 8005766:	f7fa fd8f 	bl	8000288 <__aeabi_dsub>
 800576a:	a369      	add	r3, pc, #420	@ (adr r3, 8005910 <_dtoa_r+0x2b0>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa ff42 	bl	80005f8 <__aeabi_dmul>
 8005774:	a368      	add	r3, pc, #416	@ (adr r3, 8005918 <_dtoa_r+0x2b8>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fd87 	bl	800028c <__adddf3>
 800577e:	4604      	mov	r4, r0
 8005780:	4630      	mov	r0, r6
 8005782:	460d      	mov	r5, r1
 8005784:	f7fa fece 	bl	8000524 <__aeabi_i2d>
 8005788:	a365      	add	r3, pc, #404	@ (adr r3, 8005920 <_dtoa_r+0x2c0>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa ff33 	bl	80005f8 <__aeabi_dmul>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fa fd77 	bl	800028c <__adddf3>
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	f7fb f9d9 	bl	8000b58 <__aeabi_d2iz>
 80057a6:	2200      	movs	r2, #0
 80057a8:	4607      	mov	r7, r0
 80057aa:	2300      	movs	r3, #0
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fb f994 	bl	8000adc <__aeabi_dcmplt>
 80057b4:	b140      	cbz	r0, 80057c8 <_dtoa_r+0x168>
 80057b6:	4638      	mov	r0, r7
 80057b8:	f7fa feb4 	bl	8000524 <__aeabi_i2d>
 80057bc:	4622      	mov	r2, r4
 80057be:	462b      	mov	r3, r5
 80057c0:	f7fb f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80057c4:	b900      	cbnz	r0, 80057c8 <_dtoa_r+0x168>
 80057c6:	3f01      	subs	r7, #1
 80057c8:	2f16      	cmp	r7, #22
 80057ca:	d851      	bhi.n	8005870 <_dtoa_r+0x210>
 80057cc:	4b5b      	ldr	r3, [pc, #364]	@ (800593c <_dtoa_r+0x2dc>)
 80057ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057da:	f7fb f97f 	bl	8000adc <__aeabi_dcmplt>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d048      	beq.n	8005874 <_dtoa_r+0x214>
 80057e2:	3f01      	subs	r7, #1
 80057e4:	2300      	movs	r3, #0
 80057e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80057e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057ea:	1b9b      	subs	r3, r3, r6
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	bf44      	itt	mi
 80057f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80057f4:	2300      	movmi	r3, #0
 80057f6:	9208      	str	r2, [sp, #32]
 80057f8:	bf54      	ite	pl
 80057fa:	f04f 0800 	movpl.w	r8, #0
 80057fe:	9308      	strmi	r3, [sp, #32]
 8005800:	2f00      	cmp	r7, #0
 8005802:	db39      	blt.n	8005878 <_dtoa_r+0x218>
 8005804:	9b08      	ldr	r3, [sp, #32]
 8005806:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005808:	443b      	add	r3, r7
 800580a:	9308      	str	r3, [sp, #32]
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005812:	2b09      	cmp	r3, #9
 8005814:	d864      	bhi.n	80058e0 <_dtoa_r+0x280>
 8005816:	2b05      	cmp	r3, #5
 8005818:	bfc4      	itt	gt
 800581a:	3b04      	subgt	r3, #4
 800581c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	f1a3 0302 	sub.w	r3, r3, #2
 8005824:	bfcc      	ite	gt
 8005826:	2400      	movgt	r4, #0
 8005828:	2401      	movle	r4, #1
 800582a:	2b03      	cmp	r3, #3
 800582c:	d863      	bhi.n	80058f6 <_dtoa_r+0x296>
 800582e:	e8df f003 	tbb	[pc, r3]
 8005832:	372a      	.short	0x372a
 8005834:	5535      	.short	0x5535
 8005836:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800583a:	441e      	add	r6, r3
 800583c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005840:	2b20      	cmp	r3, #32
 8005842:	bfc1      	itttt	gt
 8005844:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005848:	409f      	lslgt	r7, r3
 800584a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800584e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005852:	bfd6      	itet	le
 8005854:	f1c3 0320 	rsble	r3, r3, #32
 8005858:	ea47 0003 	orrgt.w	r0, r7, r3
 800585c:	fa04 f003 	lslle.w	r0, r4, r3
 8005860:	f7fa fe50 	bl	8000504 <__aeabi_ui2d>
 8005864:	2201      	movs	r2, #1
 8005866:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800586a:	3e01      	subs	r6, #1
 800586c:	9214      	str	r2, [sp, #80]	@ 0x50
 800586e:	e777      	b.n	8005760 <_dtoa_r+0x100>
 8005870:	2301      	movs	r3, #1
 8005872:	e7b8      	b.n	80057e6 <_dtoa_r+0x186>
 8005874:	9012      	str	r0, [sp, #72]	@ 0x48
 8005876:	e7b7      	b.n	80057e8 <_dtoa_r+0x188>
 8005878:	427b      	negs	r3, r7
 800587a:	930a      	str	r3, [sp, #40]	@ 0x28
 800587c:	2300      	movs	r3, #0
 800587e:	eba8 0807 	sub.w	r8, r8, r7
 8005882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005884:	e7c4      	b.n	8005810 <_dtoa_r+0x1b0>
 8005886:	2300      	movs	r3, #0
 8005888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800588a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	dc35      	bgt.n	80058fc <_dtoa_r+0x29c>
 8005890:	2301      	movs	r3, #1
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	461a      	mov	r2, r3
 8005898:	920e      	str	r2, [sp, #56]	@ 0x38
 800589a:	e00b      	b.n	80058b4 <_dtoa_r+0x254>
 800589c:	2301      	movs	r3, #1
 800589e:	e7f3      	b.n	8005888 <_dtoa_r+0x228>
 80058a0:	2300      	movs	r3, #0
 80058a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	bfb8      	it	lt
 80058b2:	2301      	movlt	r3, #1
 80058b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058b8:	2100      	movs	r1, #0
 80058ba:	2204      	movs	r2, #4
 80058bc:	f102 0514 	add.w	r5, r2, #20
 80058c0:	429d      	cmp	r5, r3
 80058c2:	d91f      	bls.n	8005904 <_dtoa_r+0x2a4>
 80058c4:	6041      	str	r1, [r0, #4]
 80058c6:	4658      	mov	r0, fp
 80058c8:	f000 fd8e 	bl	80063e8 <_Balloc>
 80058cc:	4682      	mov	sl, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d13c      	bne.n	800594c <_dtoa_r+0x2ec>
 80058d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <_dtoa_r+0x2e0>)
 80058d4:	4602      	mov	r2, r0
 80058d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058da:	e6d8      	b.n	800568e <_dtoa_r+0x2e>
 80058dc:	2301      	movs	r3, #1
 80058de:	e7e0      	b.n	80058a2 <_dtoa_r+0x242>
 80058e0:	2401      	movs	r4, #1
 80058e2:	2300      	movs	r3, #0
 80058e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2312      	movs	r3, #18
 80058f4:	e7d0      	b.n	8005898 <_dtoa_r+0x238>
 80058f6:	2301      	movs	r3, #1
 80058f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058fa:	e7f5      	b.n	80058e8 <_dtoa_r+0x288>
 80058fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	e7d7      	b.n	80058b4 <_dtoa_r+0x254>
 8005904:	3101      	adds	r1, #1
 8005906:	0052      	lsls	r2, r2, #1
 8005908:	e7d8      	b.n	80058bc <_dtoa_r+0x25c>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
 8005910:	636f4361 	.word	0x636f4361
 8005914:	3fd287a7 	.word	0x3fd287a7
 8005918:	8b60c8b3 	.word	0x8b60c8b3
 800591c:	3fc68a28 	.word	0x3fc68a28
 8005920:	509f79fb 	.word	0x509f79fb
 8005924:	3fd34413 	.word	0x3fd34413
 8005928:	08008c96 	.word	0x08008c96
 800592c:	08008cad 	.word	0x08008cad
 8005930:	7ff00000 	.word	0x7ff00000
 8005934:	08008c61 	.word	0x08008c61
 8005938:	3ff80000 	.word	0x3ff80000
 800593c:	08008da8 	.word	0x08008da8
 8005940:	08008d05 	.word	0x08008d05
 8005944:	08008c92 	.word	0x08008c92
 8005948:	08008c60 	.word	0x08008c60
 800594c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005950:	6018      	str	r0, [r3, #0]
 8005952:	9b07      	ldr	r3, [sp, #28]
 8005954:	2b0e      	cmp	r3, #14
 8005956:	f200 80a4 	bhi.w	8005aa2 <_dtoa_r+0x442>
 800595a:	2c00      	cmp	r4, #0
 800595c:	f000 80a1 	beq.w	8005aa2 <_dtoa_r+0x442>
 8005960:	2f00      	cmp	r7, #0
 8005962:	dd33      	ble.n	80059cc <_dtoa_r+0x36c>
 8005964:	4bad      	ldr	r3, [pc, #692]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005966:	f007 020f 	and.w	r2, r7, #15
 800596a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800596e:	ed93 7b00 	vldr	d7, [r3]
 8005972:	05f8      	lsls	r0, r7, #23
 8005974:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800597c:	d516      	bpl.n	80059ac <_dtoa_r+0x34c>
 800597e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c20 <_dtoa_r+0x5c0>)
 8005980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005988:	f7fa ff60 	bl	800084c <__aeabi_ddiv>
 800598c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005990:	f004 040f 	and.w	r4, r4, #15
 8005994:	2603      	movs	r6, #3
 8005996:	4da2      	ldr	r5, [pc, #648]	@ (8005c20 <_dtoa_r+0x5c0>)
 8005998:	b954      	cbnz	r4, 80059b0 <_dtoa_r+0x350>
 800599a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a2:	f7fa ff53 	bl	800084c <__aeabi_ddiv>
 80059a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059aa:	e028      	b.n	80059fe <_dtoa_r+0x39e>
 80059ac:	2602      	movs	r6, #2
 80059ae:	e7f2      	b.n	8005996 <_dtoa_r+0x336>
 80059b0:	07e1      	lsls	r1, r4, #31
 80059b2:	d508      	bpl.n	80059c6 <_dtoa_r+0x366>
 80059b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059bc:	f7fa fe1c 	bl	80005f8 <__aeabi_dmul>
 80059c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c4:	3601      	adds	r6, #1
 80059c6:	1064      	asrs	r4, r4, #1
 80059c8:	3508      	adds	r5, #8
 80059ca:	e7e5      	b.n	8005998 <_dtoa_r+0x338>
 80059cc:	f000 80d2 	beq.w	8005b74 <_dtoa_r+0x514>
 80059d0:	427c      	negs	r4, r7
 80059d2:	4b92      	ldr	r3, [pc, #584]	@ (8005c1c <_dtoa_r+0x5bc>)
 80059d4:	4d92      	ldr	r5, [pc, #584]	@ (8005c20 <_dtoa_r+0x5c0>)
 80059d6:	f004 020f 	and.w	r2, r4, #15
 80059da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059e6:	f7fa fe07 	bl	80005f8 <__aeabi_dmul>
 80059ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ee:	1124      	asrs	r4, r4, #4
 80059f0:	2300      	movs	r3, #0
 80059f2:	2602      	movs	r6, #2
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	f040 80b2 	bne.w	8005b5e <_dtoa_r+0x4fe>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d3      	bne.n	80059a6 <_dtoa_r+0x346>
 80059fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80b7 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a0a:	4b86      	ldr	r3, [pc, #536]	@ (8005c24 <_dtoa_r+0x5c4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fb f863 	bl	8000adc <__aeabi_dcmplt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f000 80ae 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80aa 	beq.w	8005b78 <_dtoa_r+0x518>
 8005a24:	9b00      	ldr	r3, [sp, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd37      	ble.n	8005a9a <_dtoa_r+0x43a>
 8005a2a:	1e7b      	subs	r3, r7, #1
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4b7d      	ldr	r3, [pc, #500]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7fa fddf 	bl	80005f8 <__aeabi_dmul>
 8005a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3e:	9c00      	ldr	r4, [sp, #0]
 8005a40:	3601      	adds	r6, #1
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fa fd6e 	bl	8000524 <__aeabi_i2d>
 8005a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a4c:	f7fa fdd4 	bl	80005f8 <__aeabi_dmul>
 8005a50:	4b76      	ldr	r3, [pc, #472]	@ (8005c2c <_dtoa_r+0x5cc>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f7fa fc1a 	bl	800028c <__adddf3>
 8005a58:	4605      	mov	r5, r0
 8005a5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	f040 808d 	bne.w	8005b7e <_dtoa_r+0x51e>
 8005a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a68:	4b71      	ldr	r3, [pc, #452]	@ (8005c30 <_dtoa_r+0x5d0>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f7fa fc0c 	bl	8000288 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4633      	mov	r3, r6
 8005a7c:	f7fb f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f040 828b 	bne.w	8005f9c <_dtoa_r+0x93c>
 8005a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8a:	462a      	mov	r2, r5
 8005a8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a90:	f7fb f824 	bl	8000adc <__aeabi_dcmplt>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f040 8128 	bne.w	8005cea <_dtoa_r+0x68a>
 8005a9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f2c0 815a 	blt.w	8005d5e <_dtoa_r+0x6fe>
 8005aaa:	2f0e      	cmp	r7, #14
 8005aac:	f300 8157 	bgt.w	8005d5e <_dtoa_r+0x6fe>
 8005ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005ab2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ab6:	ed93 7b00 	vldr	d7, [r3]
 8005aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	ed8d 7b00 	vstr	d7, [sp]
 8005ac2:	da03      	bge.n	8005acc <_dtoa_r+0x46c>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f340 8101 	ble.w	8005cce <_dtoa_r+0x66e>
 8005acc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ad0:	4656      	mov	r6, sl
 8005ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa feb7 	bl	800084c <__aeabi_ddiv>
 8005ade:	f7fb f83b 	bl	8000b58 <__aeabi_d2iz>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	f7fa fd1e 	bl	8000524 <__aeabi_i2d>
 8005ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005afc:	f7fa fbc4 	bl	8000288 <__aeabi_dsub>
 8005b00:	f806 4b01 	strb.w	r4, [r6], #1
 8005b04:	9d07      	ldr	r5, [sp, #28]
 8005b06:	eba6 040a 	sub.w	r4, r6, sl
 8005b0a:	42a5      	cmp	r5, r4
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	f040 8117 	bne.w	8005d42 <_dtoa_r+0x6e2>
 8005b14:	f7fa fbba 	bl	800028c <__adddf3>
 8005b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	f7fa fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	f040 80f9 	bne.w	8005d1c <_dtoa_r+0x6bc>
 8005b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fa ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b36:	b118      	cbz	r0, 8005b40 <_dtoa_r+0x4e0>
 8005b38:	f018 0f01 	tst.w	r8, #1
 8005b3c:	f040 80ee 	bne.w	8005d1c <_dtoa_r+0x6bc>
 8005b40:	4649      	mov	r1, r9
 8005b42:	4658      	mov	r0, fp
 8005b44:	f000 fc90 	bl	8006468 <_Bfree>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	7033      	strb	r3, [r6, #0]
 8005b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b4e:	3701      	adds	r7, #1
 8005b50:	601f      	str	r7, [r3, #0]
 8005b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 831d 	beq.w	8006194 <_dtoa_r+0xb34>
 8005b5a:	601e      	str	r6, [r3, #0]
 8005b5c:	e31a      	b.n	8006194 <_dtoa_r+0xb34>
 8005b5e:	07e2      	lsls	r2, r4, #31
 8005b60:	d505      	bpl.n	8005b6e <_dtoa_r+0x50e>
 8005b62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b66:	f7fa fd47 	bl	80005f8 <__aeabi_dmul>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	1064      	asrs	r4, r4, #1
 8005b70:	3508      	adds	r5, #8
 8005b72:	e73f      	b.n	80059f4 <_dtoa_r+0x394>
 8005b74:	2602      	movs	r6, #2
 8005b76:	e742      	b.n	80059fe <_dtoa_r+0x39e>
 8005b78:	9c07      	ldr	r4, [sp, #28]
 8005b7a:	9704      	str	r7, [sp, #16]
 8005b7c:	e761      	b.n	8005a42 <_dtoa_r+0x3e2>
 8005b7e:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <_dtoa_r+0x5bc>)
 8005b80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8a:	4454      	add	r4, sl
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d053      	beq.n	8005c38 <_dtoa_r+0x5d8>
 8005b90:	4928      	ldr	r1, [pc, #160]	@ (8005c34 <_dtoa_r+0x5d4>)
 8005b92:	2000      	movs	r0, #0
 8005b94:	f7fa fe5a 	bl	800084c <__aeabi_ddiv>
 8005b98:	4633      	mov	r3, r6
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ba4:	4656      	mov	r6, sl
 8005ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005baa:	f7fa ffd5 	bl	8000b58 <__aeabi_d2iz>
 8005bae:	4605      	mov	r5, r0
 8005bb0:	f7fa fcb8 	bl	8000524 <__aeabi_i2d>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bbc:	f7fa fb64 	bl	8000288 <__aeabi_dsub>
 8005bc0:	3530      	adds	r5, #48	@ 0x30
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bca:	f806 5b01 	strb.w	r5, [r6], #1
 8005bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd2:	f7fa ff83 	bl	8000adc <__aeabi_dcmplt>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d171      	bne.n	8005cbe <_dtoa_r+0x65e>
 8005bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bde:	4911      	ldr	r1, [pc, #68]	@ (8005c24 <_dtoa_r+0x5c4>)
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7fa fb51 	bl	8000288 <__aeabi_dsub>
 8005be6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bea:	f7fa ff77 	bl	8000adc <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f040 8095 	bne.w	8005d1e <_dtoa_r+0x6be>
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	f43f af50 	beq.w	8005a9a <_dtoa_r+0x43a>
 8005bfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	4b08      	ldr	r3, [pc, #32]	@ (8005c28 <_dtoa_r+0x5c8>)
 8005c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	f7fa fcf1 	bl	80005f8 <__aeabi_dmul>
 8005c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c1a:	e7c4      	b.n	8005ba6 <_dtoa_r+0x546>
 8005c1c:	08008da8 	.word	0x08008da8
 8005c20:	08008d80 	.word	0x08008d80
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	401c0000 	.word	0x401c0000
 8005c30:	40140000 	.word	0x40140000
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7fa fcdc 	bl	80005f8 <__aeabi_dmul>
 8005c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c44:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c46:	4656      	mov	r6, sl
 8005c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4c:	f7fa ff84 	bl	8000b58 <__aeabi_d2iz>
 8005c50:	4605      	mov	r5, r0
 8005c52:	f7fa fc67 	bl	8000524 <__aeabi_i2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5e:	f7fa fb13 	bl	8000288 <__aeabi_dsub>
 8005c62:	3530      	adds	r5, #48	@ 0x30
 8005c64:	f806 5b01 	strb.w	r5, [r6], #1
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	d124      	bne.n	8005cc2 <_dtoa_r+0x662>
 8005c78:	4bac      	ldr	r3, [pc, #688]	@ (8005f2c <_dtoa_r+0x8cc>)
 8005c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c7e:	f7fa fb05 	bl	800028c <__adddf3>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	f7fa ff45 	bl	8000b18 <__aeabi_dcmpgt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d145      	bne.n	8005d1e <_dtoa_r+0x6be>
 8005c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c96:	49a5      	ldr	r1, [pc, #660]	@ (8005f2c <_dtoa_r+0x8cc>)
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f7fa faf5 	bl	8000288 <__aeabi_dsub>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca6:	f7fa ff19 	bl	8000adc <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f43f aef5 	beq.w	8005a9a <_dtoa_r+0x43a>
 8005cb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cb2:	1e73      	subs	r3, r6, #1
 8005cb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d0f8      	beq.n	8005cb0 <_dtoa_r+0x650>
 8005cbe:	9f04      	ldr	r7, [sp, #16]
 8005cc0:	e73e      	b.n	8005b40 <_dtoa_r+0x4e0>
 8005cc2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f30 <_dtoa_r+0x8d0>)
 8005cc4:	f7fa fc98 	bl	80005f8 <__aeabi_dmul>
 8005cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ccc:	e7bc      	b.n	8005c48 <_dtoa_r+0x5e8>
 8005cce:	d10c      	bne.n	8005cea <_dtoa_r+0x68a>
 8005cd0:	4b98      	ldr	r3, [pc, #608]	@ (8005f34 <_dtoa_r+0x8d4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cd8:	f7fa fc8e 	bl	80005f8 <__aeabi_dmul>
 8005cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce0:	f7fa ff10 	bl	8000b04 <__aeabi_dcmpge>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f000 8157 	beq.w	8005f98 <_dtoa_r+0x938>
 8005cea:	2400      	movs	r4, #0
 8005cec:	4625      	mov	r5, r4
 8005cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	4656      	mov	r6, sl
 8005cf6:	2700      	movs	r7, #0
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4658      	mov	r0, fp
 8005cfc:	f000 fbb4 	bl	8006468 <_Bfree>
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	d0dc      	beq.n	8005cbe <_dtoa_r+0x65e>
 8005d04:	b12f      	cbz	r7, 8005d12 <_dtoa_r+0x6b2>
 8005d06:	42af      	cmp	r7, r5
 8005d08:	d003      	beq.n	8005d12 <_dtoa_r+0x6b2>
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f000 fbab 	bl	8006468 <_Bfree>
 8005d12:	4629      	mov	r1, r5
 8005d14:	4658      	mov	r0, fp
 8005d16:	f000 fba7 	bl	8006468 <_Bfree>
 8005d1a:	e7d0      	b.n	8005cbe <_dtoa_r+0x65e>
 8005d1c:	9704      	str	r7, [sp, #16]
 8005d1e:	4633      	mov	r3, r6
 8005d20:	461e      	mov	r6, r3
 8005d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d26:	2a39      	cmp	r2, #57	@ 0x39
 8005d28:	d107      	bne.n	8005d3a <_dtoa_r+0x6da>
 8005d2a:	459a      	cmp	sl, r3
 8005d2c:	d1f8      	bne.n	8005d20 <_dtoa_r+0x6c0>
 8005d2e:	9a04      	ldr	r2, [sp, #16]
 8005d30:	3201      	adds	r2, #1
 8005d32:	9204      	str	r2, [sp, #16]
 8005d34:	2230      	movs	r2, #48	@ 0x30
 8005d36:	f88a 2000 	strb.w	r2, [sl]
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	3201      	adds	r2, #1
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e7bd      	b.n	8005cbe <_dtoa_r+0x65e>
 8005d42:	4b7b      	ldr	r3, [pc, #492]	@ (8005f30 <_dtoa_r+0x8d0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	f7fa fc57 	bl	80005f8 <__aeabi_dmul>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460d      	mov	r5, r1
 8005d52:	f7fa feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f aebb 	beq.w	8005ad2 <_dtoa_r+0x472>
 8005d5c:	e6f0      	b.n	8005b40 <_dtoa_r+0x4e0>
 8005d5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	f000 80db 	beq.w	8005f1c <_dtoa_r+0x8bc>
 8005d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d68:	2a01      	cmp	r2, #1
 8005d6a:	f300 80bf 	bgt.w	8005eec <_dtoa_r+0x88c>
 8005d6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	f000 80b7 	beq.w	8005ee4 <_dtoa_r+0x884>
 8005d76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d7c:	4646      	mov	r6, r8
 8005d7e:	9a08      	ldr	r2, [sp, #32]
 8005d80:	2101      	movs	r1, #1
 8005d82:	441a      	add	r2, r3
 8005d84:	4658      	mov	r0, fp
 8005d86:	4498      	add	r8, r3
 8005d88:	9208      	str	r2, [sp, #32]
 8005d8a:	f000 fc6b 	bl	8006664 <__i2b>
 8005d8e:	4605      	mov	r5, r0
 8005d90:	b15e      	cbz	r6, 8005daa <_dtoa_r+0x74a>
 8005d92:	9b08      	ldr	r3, [sp, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dd08      	ble.n	8005daa <_dtoa_r+0x74a>
 8005d98:	42b3      	cmp	r3, r6
 8005d9a:	9a08      	ldr	r2, [sp, #32]
 8005d9c:	bfa8      	it	ge
 8005d9e:	4633      	movge	r3, r6
 8005da0:	eba8 0803 	sub.w	r8, r8, r3
 8005da4:	1af6      	subs	r6, r6, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dac:	b1f3      	cbz	r3, 8005dec <_dtoa_r+0x78c>
 8005dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80b7 	beq.w	8005f24 <_dtoa_r+0x8c4>
 8005db6:	b18c      	cbz	r4, 8005ddc <_dtoa_r+0x77c>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4658      	mov	r0, fp
 8005dbe:	f000 fd11 	bl	80067e4 <__pow5mult>
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4658      	mov	r0, fp
 8005dca:	f000 fc61 	bl	8006690 <__multiply>
 8005dce:	4649      	mov	r1, r9
 8005dd0:	9004      	str	r0, [sp, #16]
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f000 fb48 	bl	8006468 <_Bfree>
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	4699      	mov	r9, r3
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dde:	1b1a      	subs	r2, r3, r4
 8005de0:	d004      	beq.n	8005dec <_dtoa_r+0x78c>
 8005de2:	4649      	mov	r1, r9
 8005de4:	4658      	mov	r0, fp
 8005de6:	f000 fcfd 	bl	80067e4 <__pow5mult>
 8005dea:	4681      	mov	r9, r0
 8005dec:	2101      	movs	r1, #1
 8005dee:	4658      	mov	r0, fp
 8005df0:	f000 fc38 	bl	8006664 <__i2b>
 8005df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005df6:	4604      	mov	r4, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 81cf 	beq.w	800619c <_dtoa_r+0xb3c>
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4601      	mov	r1, r0
 8005e02:	4658      	mov	r0, fp
 8005e04:	f000 fcee 	bl	80067e4 <__pow5mult>
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	f300 8095 	bgt.w	8005f3c <_dtoa_r+0x8dc>
 8005e12:	9b02      	ldr	r3, [sp, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 8087 	bne.w	8005f28 <_dtoa_r+0x8c8>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8089 	bne.w	8005f38 <_dtoa_r+0x8d8>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e2c:	0d1b      	lsrs	r3, r3, #20
 8005e2e:	051b      	lsls	r3, r3, #20
 8005e30:	b12b      	cbz	r3, 8005e3e <_dtoa_r+0x7de>
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	3301      	adds	r3, #1
 8005e36:	9308      	str	r3, [sp, #32]
 8005e38:	f108 0801 	add.w	r8, r8, #1
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 81b0 	beq.w	80061a8 <_dtoa_r+0xb48>
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e4e:	6918      	ldr	r0, [r3, #16]
 8005e50:	f000 fbbc 	bl	80065cc <__hi0bits>
 8005e54:	f1c0 0020 	rsb	r0, r0, #32
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	4418      	add	r0, r3
 8005e5c:	f010 001f 	ands.w	r0, r0, #31
 8005e60:	d077      	beq.n	8005f52 <_dtoa_r+0x8f2>
 8005e62:	f1c0 0320 	rsb	r3, r0, #32
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	dd6b      	ble.n	8005f42 <_dtoa_r+0x8e2>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	f1c0 001c 	rsb	r0, r0, #28
 8005e70:	4403      	add	r3, r0
 8005e72:	4480      	add	r8, r0
 8005e74:	4406      	add	r6, r0
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	f1b8 0f00 	cmp.w	r8, #0
 8005e7c:	dd05      	ble.n	8005e8a <_dtoa_r+0x82a>
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4642      	mov	r2, r8
 8005e82:	4658      	mov	r0, fp
 8005e84:	f000 fd08 	bl	8006898 <__lshift>
 8005e88:	4681      	mov	r9, r0
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dd05      	ble.n	8005e9c <_dtoa_r+0x83c>
 8005e90:	4621      	mov	r1, r4
 8005e92:	461a      	mov	r2, r3
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fcff 	bl	8006898 <__lshift>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d059      	beq.n	8005f56 <_dtoa_r+0x8f6>
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4648      	mov	r0, r9
 8005ea6:	f000 fd63 	bl	8006970 <__mcmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	da53      	bge.n	8005f56 <_dtoa_r+0x8f6>
 8005eae:	1e7b      	subs	r3, r7, #1
 8005eb0:	9304      	str	r3, [sp, #16]
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	4658      	mov	r0, fp
 8005eba:	f000 faf7 	bl	80064ac <__multadd>
 8005ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8172 	beq.w	80061ac <_dtoa_r+0xb4c>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4629      	mov	r1, r5
 8005ecc:	220a      	movs	r2, #10
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f000 faec 	bl	80064ac <__multadd>
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	4605      	mov	r5, r0
 8005eda:	dc67      	bgt.n	8005fac <_dtoa_r+0x94c>
 8005edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	dc41      	bgt.n	8005f66 <_dtoa_r+0x906>
 8005ee2:	e063      	b.n	8005fac <_dtoa_r+0x94c>
 8005ee4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eea:	e746      	b.n	8005d7a <_dtoa_r+0x71a>
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	1e5c      	subs	r4, r3, #1
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	bfbf      	itttt	lt
 8005ef6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ef8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005efa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005efc:	1ae3      	sublt	r3, r4, r3
 8005efe:	bfb4      	ite	lt
 8005f00:	18d2      	addlt	r2, r2, r3
 8005f02:	1b1c      	subge	r4, r3, r4
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	bfbc      	itt	lt
 8005f08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f0a:	2400      	movlt	r4, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bfb5      	itete	lt
 8005f10:	eba8 0603 	sublt.w	r6, r8, r3
 8005f14:	9b07      	ldrge	r3, [sp, #28]
 8005f16:	2300      	movlt	r3, #0
 8005f18:	4646      	movge	r6, r8
 8005f1a:	e730      	b.n	8005d7e <_dtoa_r+0x71e>
 8005f1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f20:	4646      	mov	r6, r8
 8005f22:	e735      	b.n	8005d90 <_dtoa_r+0x730>
 8005f24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f26:	e75c      	b.n	8005de2 <_dtoa_r+0x782>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e788      	b.n	8005e3e <_dtoa_r+0x7de>
 8005f2c:	3fe00000 	.word	0x3fe00000
 8005f30:	40240000 	.word	0x40240000
 8005f34:	40140000 	.word	0x40140000
 8005f38:	9b02      	ldr	r3, [sp, #8]
 8005f3a:	e780      	b.n	8005e3e <_dtoa_r+0x7de>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f40:	e782      	b.n	8005e48 <_dtoa_r+0x7e8>
 8005f42:	d099      	beq.n	8005e78 <_dtoa_r+0x818>
 8005f44:	9a08      	ldr	r2, [sp, #32]
 8005f46:	331c      	adds	r3, #28
 8005f48:	441a      	add	r2, r3
 8005f4a:	4498      	add	r8, r3
 8005f4c:	441e      	add	r6, r3
 8005f4e:	9208      	str	r2, [sp, #32]
 8005f50:	e792      	b.n	8005e78 <_dtoa_r+0x818>
 8005f52:	4603      	mov	r3, r0
 8005f54:	e7f6      	b.n	8005f44 <_dtoa_r+0x8e4>
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	9704      	str	r7, [sp, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc20      	bgt.n	8005fa0 <_dtoa_r+0x940>
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dd1e      	ble.n	8005fa4 <_dtoa_r+0x944>
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f aec0 	bne.w	8005cee <_dtoa_r+0x68e>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	2205      	movs	r2, #5
 8005f72:	4658      	mov	r0, fp
 8005f74:	f000 fa9a 	bl	80064ac <__multadd>
 8005f78:	4601      	mov	r1, r0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 fcf7 	bl	8006970 <__mcmp>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f77f aeb3 	ble.w	8005cee <_dtoa_r+0x68e>
 8005f88:	4656      	mov	r6, sl
 8005f8a:	2331      	movs	r3, #49	@ 0x31
 8005f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f90:	9b04      	ldr	r3, [sp, #16]
 8005f92:	3301      	adds	r3, #1
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	e6ae      	b.n	8005cf6 <_dtoa_r+0x696>
 8005f98:	9c07      	ldr	r4, [sp, #28]
 8005f9a:	9704      	str	r7, [sp, #16]
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	e7f3      	b.n	8005f88 <_dtoa_r+0x928>
 8005fa0:	9b07      	ldr	r3, [sp, #28]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8104 	beq.w	80061b4 <_dtoa_r+0xb54>
 8005fac:	2e00      	cmp	r6, #0
 8005fae:	dd05      	ble.n	8005fbc <_dtoa_r+0x95c>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 fc6f 	bl	8006898 <__lshift>
 8005fba:	4605      	mov	r5, r0
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d05a      	beq.n	8006078 <_dtoa_r+0xa18>
 8005fc2:	6869      	ldr	r1, [r5, #4]
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	f000 fa0f 	bl	80063e8 <_Balloc>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	b928      	cbnz	r0, 8005fda <_dtoa_r+0x97a>
 8005fce:	4b84      	ldr	r3, [pc, #528]	@ (80061e0 <_dtoa_r+0xb80>)
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fd6:	f7ff bb5a 	b.w	800568e <_dtoa_r+0x2e>
 8005fda:	692a      	ldr	r2, [r5, #16]
 8005fdc:	3202      	adds	r2, #2
 8005fde:	0092      	lsls	r2, r2, #2
 8005fe0:	f105 010c 	add.w	r1, r5, #12
 8005fe4:	300c      	adds	r0, #12
 8005fe6:	f001 ff75 	bl	8007ed4 <memcpy>
 8005fea:	2201      	movs	r2, #1
 8005fec:	4631      	mov	r1, r6
 8005fee:	4658      	mov	r0, fp
 8005ff0:	f000 fc52 	bl	8006898 <__lshift>
 8005ff4:	f10a 0301 	add.w	r3, sl, #1
 8005ff8:	9307      	str	r3, [sp, #28]
 8005ffa:	9b00      	ldr	r3, [sp, #0]
 8005ffc:	4453      	add	r3, sl
 8005ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	462f      	mov	r7, r5
 8006008:	930a      	str	r3, [sp, #40]	@ 0x28
 800600a:	4605      	mov	r5, r0
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	4621      	mov	r1, r4
 8006010:	3b01      	subs	r3, #1
 8006012:	4648      	mov	r0, r9
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	f7ff fa99 	bl	800554c <quorem>
 800601a:	4639      	mov	r1, r7
 800601c:	9002      	str	r0, [sp, #8]
 800601e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006022:	4648      	mov	r0, r9
 8006024:	f000 fca4 	bl	8006970 <__mcmp>
 8006028:	462a      	mov	r2, r5
 800602a:	9008      	str	r0, [sp, #32]
 800602c:	4621      	mov	r1, r4
 800602e:	4658      	mov	r0, fp
 8006030:	f000 fcba 	bl	80069a8 <__mdiff>
 8006034:	68c2      	ldr	r2, [r0, #12]
 8006036:	4606      	mov	r6, r0
 8006038:	bb02      	cbnz	r2, 800607c <_dtoa_r+0xa1c>
 800603a:	4601      	mov	r1, r0
 800603c:	4648      	mov	r0, r9
 800603e:	f000 fc97 	bl	8006970 <__mcmp>
 8006042:	4602      	mov	r2, r0
 8006044:	4631      	mov	r1, r6
 8006046:	4658      	mov	r0, fp
 8006048:	920e      	str	r2, [sp, #56]	@ 0x38
 800604a:	f000 fa0d 	bl	8006468 <_Bfree>
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006052:	9e07      	ldr	r6, [sp, #28]
 8006054:	ea43 0102 	orr.w	r1, r3, r2
 8006058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605a:	4319      	orrs	r1, r3
 800605c:	d110      	bne.n	8006080 <_dtoa_r+0xa20>
 800605e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006062:	d029      	beq.n	80060b8 <_dtoa_r+0xa58>
 8006064:	9b08      	ldr	r3, [sp, #32]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd02      	ble.n	8006070 <_dtoa_r+0xa10>
 800606a:	9b02      	ldr	r3, [sp, #8]
 800606c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	f883 8000 	strb.w	r8, [r3]
 8006076:	e63f      	b.n	8005cf8 <_dtoa_r+0x698>
 8006078:	4628      	mov	r0, r5
 800607a:	e7bb      	b.n	8005ff4 <_dtoa_r+0x994>
 800607c:	2201      	movs	r2, #1
 800607e:	e7e1      	b.n	8006044 <_dtoa_r+0x9e4>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	db04      	blt.n	8006090 <_dtoa_r+0xa30>
 8006086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006088:	430b      	orrs	r3, r1
 800608a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800608c:	430b      	orrs	r3, r1
 800608e:	d120      	bne.n	80060d2 <_dtoa_r+0xa72>
 8006090:	2a00      	cmp	r2, #0
 8006092:	dded      	ble.n	8006070 <_dtoa_r+0xa10>
 8006094:	4649      	mov	r1, r9
 8006096:	2201      	movs	r2, #1
 8006098:	4658      	mov	r0, fp
 800609a:	f000 fbfd 	bl	8006898 <__lshift>
 800609e:	4621      	mov	r1, r4
 80060a0:	4681      	mov	r9, r0
 80060a2:	f000 fc65 	bl	8006970 <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	dc03      	bgt.n	80060b2 <_dtoa_r+0xa52>
 80060aa:	d1e1      	bne.n	8006070 <_dtoa_r+0xa10>
 80060ac:	f018 0f01 	tst.w	r8, #1
 80060b0:	d0de      	beq.n	8006070 <_dtoa_r+0xa10>
 80060b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060b6:	d1d8      	bne.n	800606a <_dtoa_r+0xa0a>
 80060b8:	9a00      	ldr	r2, [sp, #0]
 80060ba:	2339      	movs	r3, #57	@ 0x39
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	4633      	mov	r3, r6
 80060c0:	461e      	mov	r6, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060c8:	2a39      	cmp	r2, #57	@ 0x39
 80060ca:	d052      	beq.n	8006172 <_dtoa_r+0xb12>
 80060cc:	3201      	adds	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e612      	b.n	8005cf8 <_dtoa_r+0x698>
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	dd07      	ble.n	80060e6 <_dtoa_r+0xa86>
 80060d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060da:	d0ed      	beq.n	80060b8 <_dtoa_r+0xa58>
 80060dc:	9a00      	ldr	r2, [sp, #0]
 80060de:	f108 0301 	add.w	r3, r8, #1
 80060e2:	7013      	strb	r3, [r2, #0]
 80060e4:	e608      	b.n	8005cf8 <_dtoa_r+0x698>
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	9a07      	ldr	r2, [sp, #28]
 80060ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80060ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d028      	beq.n	8006146 <_dtoa_r+0xae6>
 80060f4:	4649      	mov	r1, r9
 80060f6:	2300      	movs	r3, #0
 80060f8:	220a      	movs	r2, #10
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 f9d6 	bl	80064ac <__multadd>
 8006100:	42af      	cmp	r7, r5
 8006102:	4681      	mov	r9, r0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	f04f 020a 	mov.w	r2, #10
 800610c:	4639      	mov	r1, r7
 800610e:	4658      	mov	r0, fp
 8006110:	d107      	bne.n	8006122 <_dtoa_r+0xac2>
 8006112:	f000 f9cb 	bl	80064ac <__multadd>
 8006116:	4607      	mov	r7, r0
 8006118:	4605      	mov	r5, r0
 800611a:	9b07      	ldr	r3, [sp, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	e774      	b.n	800600c <_dtoa_r+0x9ac>
 8006122:	f000 f9c3 	bl	80064ac <__multadd>
 8006126:	4629      	mov	r1, r5
 8006128:	4607      	mov	r7, r0
 800612a:	2300      	movs	r3, #0
 800612c:	220a      	movs	r2, #10
 800612e:	4658      	mov	r0, fp
 8006130:	f000 f9bc 	bl	80064ac <__multadd>
 8006134:	4605      	mov	r5, r0
 8006136:	e7f0      	b.n	800611a <_dtoa_r+0xaba>
 8006138:	9b00      	ldr	r3, [sp, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bfcc      	ite	gt
 800613e:	461e      	movgt	r6, r3
 8006140:	2601      	movle	r6, #1
 8006142:	4456      	add	r6, sl
 8006144:	2700      	movs	r7, #0
 8006146:	4649      	mov	r1, r9
 8006148:	2201      	movs	r2, #1
 800614a:	4658      	mov	r0, fp
 800614c:	f000 fba4 	bl	8006898 <__lshift>
 8006150:	4621      	mov	r1, r4
 8006152:	4681      	mov	r9, r0
 8006154:	f000 fc0c 	bl	8006970 <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	dcb0      	bgt.n	80060be <_dtoa_r+0xa5e>
 800615c:	d102      	bne.n	8006164 <_dtoa_r+0xb04>
 800615e:	f018 0f01 	tst.w	r8, #1
 8006162:	d1ac      	bne.n	80060be <_dtoa_r+0xa5e>
 8006164:	4633      	mov	r3, r6
 8006166:	461e      	mov	r6, r3
 8006168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616c:	2a30      	cmp	r2, #48	@ 0x30
 800616e:	d0fa      	beq.n	8006166 <_dtoa_r+0xb06>
 8006170:	e5c2      	b.n	8005cf8 <_dtoa_r+0x698>
 8006172:	459a      	cmp	sl, r3
 8006174:	d1a4      	bne.n	80060c0 <_dtoa_r+0xa60>
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	3301      	adds	r3, #1
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	2331      	movs	r3, #49	@ 0x31
 800617e:	f88a 3000 	strb.w	r3, [sl]
 8006182:	e5b9      	b.n	8005cf8 <_dtoa_r+0x698>
 8006184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006186:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80061e4 <_dtoa_r+0xb84>
 800618a:	b11b      	cbz	r3, 8006194 <_dtoa_r+0xb34>
 800618c:	f10a 0308 	add.w	r3, sl, #8
 8006190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	4650      	mov	r0, sl
 8006196:	b019      	add	sp, #100	@ 0x64
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800619e:	2b01      	cmp	r3, #1
 80061a0:	f77f ae37 	ble.w	8005e12 <_dtoa_r+0x7b2>
 80061a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061a8:	2001      	movs	r0, #1
 80061aa:	e655      	b.n	8005e58 <_dtoa_r+0x7f8>
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f77f aed6 	ble.w	8005f60 <_dtoa_r+0x900>
 80061b4:	4656      	mov	r6, sl
 80061b6:	4621      	mov	r1, r4
 80061b8:	4648      	mov	r0, r9
 80061ba:	f7ff f9c7 	bl	800554c <quorem>
 80061be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061c2:	f806 8b01 	strb.w	r8, [r6], #1
 80061c6:	9b00      	ldr	r3, [sp, #0]
 80061c8:	eba6 020a 	sub.w	r2, r6, sl
 80061cc:	4293      	cmp	r3, r2
 80061ce:	ddb3      	ble.n	8006138 <_dtoa_r+0xad8>
 80061d0:	4649      	mov	r1, r9
 80061d2:	2300      	movs	r3, #0
 80061d4:	220a      	movs	r2, #10
 80061d6:	4658      	mov	r0, fp
 80061d8:	f000 f968 	bl	80064ac <__multadd>
 80061dc:	4681      	mov	r9, r0
 80061de:	e7ea      	b.n	80061b6 <_dtoa_r+0xb56>
 80061e0:	08008d05 	.word	0x08008d05
 80061e4:	08008c89 	.word	0x08008c89

080061e8 <_free_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d041      	beq.n	8006274 <_free_r+0x8c>
 80061f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f4:	1f0c      	subs	r4, r1, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfb8      	it	lt
 80061fa:	18e4      	addlt	r4, r4, r3
 80061fc:	f000 f8e8 	bl	80063d0 <__malloc_lock>
 8006200:	4a1d      	ldr	r2, [pc, #116]	@ (8006278 <_free_r+0x90>)
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	b933      	cbnz	r3, 8006214 <_free_r+0x2c>
 8006206:	6063      	str	r3, [r4, #4]
 8006208:	6014      	str	r4, [r2, #0]
 800620a:	4628      	mov	r0, r5
 800620c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006210:	f000 b8e4 	b.w	80063dc <__malloc_unlock>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d908      	bls.n	800622a <_free_r+0x42>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	1821      	adds	r1, r4, r0
 800621c:	428b      	cmp	r3, r1
 800621e:	bf01      	itttt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	1809      	addeq	r1, r1, r0
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	e7ed      	b.n	8006206 <_free_r+0x1e>
 800622a:	461a      	mov	r2, r3
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b10b      	cbz	r3, 8006234 <_free_r+0x4c>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d9fa      	bls.n	800622a <_free_r+0x42>
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	1850      	adds	r0, r2, r1
 8006238:	42a0      	cmp	r0, r4
 800623a:	d10b      	bne.n	8006254 <_free_r+0x6c>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	4401      	add	r1, r0
 8006240:	1850      	adds	r0, r2, r1
 8006242:	4283      	cmp	r3, r0
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	d1e0      	bne.n	800620a <_free_r+0x22>
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	6053      	str	r3, [r2, #4]
 800624e:	4408      	add	r0, r1
 8006250:	6010      	str	r0, [r2, #0]
 8006252:	e7da      	b.n	800620a <_free_r+0x22>
 8006254:	d902      	bls.n	800625c <_free_r+0x74>
 8006256:	230c      	movs	r3, #12
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	e7d6      	b.n	800620a <_free_r+0x22>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	1821      	adds	r1, r4, r0
 8006260:	428b      	cmp	r3, r1
 8006262:	bf04      	itt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	bf04      	itt	eq
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6054      	str	r4, [r2, #4]
 8006272:	e7ca      	b.n	800620a <_free_r+0x22>
 8006274:	bd38      	pop	{r3, r4, r5, pc}
 8006276:	bf00      	nop
 8006278:	2000042c 	.word	0x2000042c

0800627c <malloc>:
 800627c:	4b02      	ldr	r3, [pc, #8]	@ (8006288 <malloc+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 b825 	b.w	80062d0 <_malloc_r>
 8006286:	bf00      	nop
 8006288:	20000018 	.word	0x20000018

0800628c <sbrk_aligned>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4e0f      	ldr	r6, [pc, #60]	@ (80062cc <sbrk_aligned+0x40>)
 8006290:	460c      	mov	r4, r1
 8006292:	6831      	ldr	r1, [r6, #0]
 8006294:	4605      	mov	r5, r0
 8006296:	b911      	cbnz	r1, 800629e <sbrk_aligned+0x12>
 8006298:	f001 fe0c 	bl	8007eb4 <_sbrk_r>
 800629c:	6030      	str	r0, [r6, #0]
 800629e:	4621      	mov	r1, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	f001 fe07 	bl	8007eb4 <_sbrk_r>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	d103      	bne.n	80062b2 <sbrk_aligned+0x26>
 80062aa:	f04f 34ff 	mov.w	r4, #4294967295
 80062ae:	4620      	mov	r0, r4
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	1cc4      	adds	r4, r0, #3
 80062b4:	f024 0403 	bic.w	r4, r4, #3
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d0f8      	beq.n	80062ae <sbrk_aligned+0x22>
 80062bc:	1a21      	subs	r1, r4, r0
 80062be:	4628      	mov	r0, r5
 80062c0:	f001 fdf8 	bl	8007eb4 <_sbrk_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1f2      	bne.n	80062ae <sbrk_aligned+0x22>
 80062c8:	e7ef      	b.n	80062aa <sbrk_aligned+0x1e>
 80062ca:	bf00      	nop
 80062cc:	20000428 	.word	0x20000428

080062d0 <_malloc_r>:
 80062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	1ccd      	adds	r5, r1, #3
 80062d6:	f025 0503 	bic.w	r5, r5, #3
 80062da:	3508      	adds	r5, #8
 80062dc:	2d0c      	cmp	r5, #12
 80062de:	bf38      	it	cc
 80062e0:	250c      	movcc	r5, #12
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	4606      	mov	r6, r0
 80062e6:	db01      	blt.n	80062ec <_malloc_r+0x1c>
 80062e8:	42a9      	cmp	r1, r5
 80062ea:	d904      	bls.n	80062f6 <_malloc_r+0x26>
 80062ec:	230c      	movs	r3, #12
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	2000      	movs	r0, #0
 80062f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063cc <_malloc_r+0xfc>
 80062fa:	f000 f869 	bl	80063d0 <__malloc_lock>
 80062fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006302:	461c      	mov	r4, r3
 8006304:	bb44      	cbnz	r4, 8006358 <_malloc_r+0x88>
 8006306:	4629      	mov	r1, r5
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff ffbf 	bl	800628c <sbrk_aligned>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	4604      	mov	r4, r0
 8006312:	d158      	bne.n	80063c6 <_malloc_r+0xf6>
 8006314:	f8d8 4000 	ldr.w	r4, [r8]
 8006318:	4627      	mov	r7, r4
 800631a:	2f00      	cmp	r7, #0
 800631c:	d143      	bne.n	80063a6 <_malloc_r+0xd6>
 800631e:	2c00      	cmp	r4, #0
 8006320:	d04b      	beq.n	80063ba <_malloc_r+0xea>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	4639      	mov	r1, r7
 8006326:	4630      	mov	r0, r6
 8006328:	eb04 0903 	add.w	r9, r4, r3
 800632c:	f001 fdc2 	bl	8007eb4 <_sbrk_r>
 8006330:	4581      	cmp	r9, r0
 8006332:	d142      	bne.n	80063ba <_malloc_r+0xea>
 8006334:	6821      	ldr	r1, [r4, #0]
 8006336:	1a6d      	subs	r5, r5, r1
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f7ff ffa6 	bl	800628c <sbrk_aligned>
 8006340:	3001      	adds	r0, #1
 8006342:	d03a      	beq.n	80063ba <_malloc_r+0xea>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	442b      	add	r3, r5
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	f8d8 3000 	ldr.w	r3, [r8]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	bb62      	cbnz	r2, 80063ac <_malloc_r+0xdc>
 8006352:	f8c8 7000 	str.w	r7, [r8]
 8006356:	e00f      	b.n	8006378 <_malloc_r+0xa8>
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	1b52      	subs	r2, r2, r5
 800635c:	d420      	bmi.n	80063a0 <_malloc_r+0xd0>
 800635e:	2a0b      	cmp	r2, #11
 8006360:	d917      	bls.n	8006392 <_malloc_r+0xc2>
 8006362:	1961      	adds	r1, r4, r5
 8006364:	42a3      	cmp	r3, r4
 8006366:	6025      	str	r5, [r4, #0]
 8006368:	bf18      	it	ne
 800636a:	6059      	strne	r1, [r3, #4]
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	bf08      	it	eq
 8006370:	f8c8 1000 	streq.w	r1, [r8]
 8006374:	5162      	str	r2, [r4, r5]
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f82f 	bl	80063dc <__malloc_unlock>
 800637e:	f104 000b 	add.w	r0, r4, #11
 8006382:	1d23      	adds	r3, r4, #4
 8006384:	f020 0007 	bic.w	r0, r0, #7
 8006388:	1ac2      	subs	r2, r0, r3
 800638a:	bf1c      	itt	ne
 800638c:	1a1b      	subne	r3, r3, r0
 800638e:	50a3      	strne	r3, [r4, r2]
 8006390:	e7af      	b.n	80062f2 <_malloc_r+0x22>
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	42a3      	cmp	r3, r4
 8006396:	bf0c      	ite	eq
 8006398:	f8c8 2000 	streq.w	r2, [r8]
 800639c:	605a      	strne	r2, [r3, #4]
 800639e:	e7eb      	b.n	8006378 <_malloc_r+0xa8>
 80063a0:	4623      	mov	r3, r4
 80063a2:	6864      	ldr	r4, [r4, #4]
 80063a4:	e7ae      	b.n	8006304 <_malloc_r+0x34>
 80063a6:	463c      	mov	r4, r7
 80063a8:	687f      	ldr	r7, [r7, #4]
 80063aa:	e7b6      	b.n	800631a <_malloc_r+0x4a>
 80063ac:	461a      	mov	r2, r3
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d1fb      	bne.n	80063ac <_malloc_r+0xdc>
 80063b4:	2300      	movs	r3, #0
 80063b6:	6053      	str	r3, [r2, #4]
 80063b8:	e7de      	b.n	8006378 <_malloc_r+0xa8>
 80063ba:	230c      	movs	r3, #12
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 f80c 	bl	80063dc <__malloc_unlock>
 80063c4:	e794      	b.n	80062f0 <_malloc_r+0x20>
 80063c6:	6005      	str	r5, [r0, #0]
 80063c8:	e7d6      	b.n	8006378 <_malloc_r+0xa8>
 80063ca:	bf00      	nop
 80063cc:	2000042c 	.word	0x2000042c

080063d0 <__malloc_lock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	@ (80063d8 <__malloc_lock+0x8>)
 80063d2:	f7ff b8b2 	b.w	800553a <__retarget_lock_acquire_recursive>
 80063d6:	bf00      	nop
 80063d8:	20000424 	.word	0x20000424

080063dc <__malloc_unlock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	@ (80063e4 <__malloc_unlock+0x8>)
 80063de:	f7ff b8ad 	b.w	800553c <__retarget_lock_release_recursive>
 80063e2:	bf00      	nop
 80063e4:	20000424 	.word	0x20000424

080063e8 <_Balloc>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	69c6      	ldr	r6, [r0, #28]
 80063ec:	4604      	mov	r4, r0
 80063ee:	460d      	mov	r5, r1
 80063f0:	b976      	cbnz	r6, 8006410 <_Balloc+0x28>
 80063f2:	2010      	movs	r0, #16
 80063f4:	f7ff ff42 	bl	800627c <malloc>
 80063f8:	4602      	mov	r2, r0
 80063fa:	61e0      	str	r0, [r4, #28]
 80063fc:	b920      	cbnz	r0, 8006408 <_Balloc+0x20>
 80063fe:	4b18      	ldr	r3, [pc, #96]	@ (8006460 <_Balloc+0x78>)
 8006400:	4818      	ldr	r0, [pc, #96]	@ (8006464 <_Balloc+0x7c>)
 8006402:	216b      	movs	r1, #107	@ 0x6b
 8006404:	f001 fd7c 	bl	8007f00 <__assert_func>
 8006408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800640c:	6006      	str	r6, [r0, #0]
 800640e:	60c6      	str	r6, [r0, #12]
 8006410:	69e6      	ldr	r6, [r4, #28]
 8006412:	68f3      	ldr	r3, [r6, #12]
 8006414:	b183      	cbz	r3, 8006438 <_Balloc+0x50>
 8006416:	69e3      	ldr	r3, [r4, #28]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800641e:	b9b8      	cbnz	r0, 8006450 <_Balloc+0x68>
 8006420:	2101      	movs	r1, #1
 8006422:	fa01 f605 	lsl.w	r6, r1, r5
 8006426:	1d72      	adds	r2, r6, #5
 8006428:	0092      	lsls	r2, r2, #2
 800642a:	4620      	mov	r0, r4
 800642c:	f001 fd86 	bl	8007f3c <_calloc_r>
 8006430:	b160      	cbz	r0, 800644c <_Balloc+0x64>
 8006432:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006436:	e00e      	b.n	8006456 <_Balloc+0x6e>
 8006438:	2221      	movs	r2, #33	@ 0x21
 800643a:	2104      	movs	r1, #4
 800643c:	4620      	mov	r0, r4
 800643e:	f001 fd7d 	bl	8007f3c <_calloc_r>
 8006442:	69e3      	ldr	r3, [r4, #28]
 8006444:	60f0      	str	r0, [r6, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e4      	bne.n	8006416 <_Balloc+0x2e>
 800644c:	2000      	movs	r0, #0
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	6802      	ldr	r2, [r0, #0]
 8006452:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006456:	2300      	movs	r3, #0
 8006458:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800645c:	e7f7      	b.n	800644e <_Balloc+0x66>
 800645e:	bf00      	nop
 8006460:	08008c96 	.word	0x08008c96
 8006464:	08008d16 	.word	0x08008d16

08006468 <_Bfree>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	69c6      	ldr	r6, [r0, #28]
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	b976      	cbnz	r6, 8006490 <_Bfree+0x28>
 8006472:	2010      	movs	r0, #16
 8006474:	f7ff ff02 	bl	800627c <malloc>
 8006478:	4602      	mov	r2, r0
 800647a:	61e8      	str	r0, [r5, #28]
 800647c:	b920      	cbnz	r0, 8006488 <_Bfree+0x20>
 800647e:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <_Bfree+0x3c>)
 8006480:	4809      	ldr	r0, [pc, #36]	@ (80064a8 <_Bfree+0x40>)
 8006482:	218f      	movs	r1, #143	@ 0x8f
 8006484:	f001 fd3c 	bl	8007f00 <__assert_func>
 8006488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800648c:	6006      	str	r6, [r0, #0]
 800648e:	60c6      	str	r6, [r0, #12]
 8006490:	b13c      	cbz	r4, 80064a2 <_Bfree+0x3a>
 8006492:	69eb      	ldr	r3, [r5, #28]
 8006494:	6862      	ldr	r2, [r4, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800649c:	6021      	str	r1, [r4, #0]
 800649e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	08008c96 	.word	0x08008c96
 80064a8:	08008d16 	.word	0x08008d16

080064ac <__multadd>:
 80064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	690d      	ldr	r5, [r1, #16]
 80064b2:	4607      	mov	r7, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	461e      	mov	r6, r3
 80064b8:	f101 0c14 	add.w	ip, r1, #20
 80064bc:	2000      	movs	r0, #0
 80064be:	f8dc 3000 	ldr.w	r3, [ip]
 80064c2:	b299      	uxth	r1, r3
 80064c4:	fb02 6101 	mla	r1, r2, r1, r6
 80064c8:	0c1e      	lsrs	r6, r3, #16
 80064ca:	0c0b      	lsrs	r3, r1, #16
 80064cc:	fb02 3306 	mla	r3, r2, r6, r3
 80064d0:	b289      	uxth	r1, r1
 80064d2:	3001      	adds	r0, #1
 80064d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064d8:	4285      	cmp	r5, r0
 80064da:	f84c 1b04 	str.w	r1, [ip], #4
 80064de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064e2:	dcec      	bgt.n	80064be <__multadd+0x12>
 80064e4:	b30e      	cbz	r6, 800652a <__multadd+0x7e>
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dc19      	bgt.n	8006520 <__multadd+0x74>
 80064ec:	6861      	ldr	r1, [r4, #4]
 80064ee:	4638      	mov	r0, r7
 80064f0:	3101      	adds	r1, #1
 80064f2:	f7ff ff79 	bl	80063e8 <_Balloc>
 80064f6:	4680      	mov	r8, r0
 80064f8:	b928      	cbnz	r0, 8006506 <__multadd+0x5a>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <__multadd+0x84>)
 80064fe:	480d      	ldr	r0, [pc, #52]	@ (8006534 <__multadd+0x88>)
 8006500:	21ba      	movs	r1, #186	@ 0xba
 8006502:	f001 fcfd 	bl	8007f00 <__assert_func>
 8006506:	6922      	ldr	r2, [r4, #16]
 8006508:	3202      	adds	r2, #2
 800650a:	f104 010c 	add.w	r1, r4, #12
 800650e:	0092      	lsls	r2, r2, #2
 8006510:	300c      	adds	r0, #12
 8006512:	f001 fcdf 	bl	8007ed4 <memcpy>
 8006516:	4621      	mov	r1, r4
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff ffa5 	bl	8006468 <_Bfree>
 800651e:	4644      	mov	r4, r8
 8006520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006524:	3501      	adds	r5, #1
 8006526:	615e      	str	r6, [r3, #20]
 8006528:	6125      	str	r5, [r4, #16]
 800652a:	4620      	mov	r0, r4
 800652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006530:	08008d05 	.word	0x08008d05
 8006534:	08008d16 	.word	0x08008d16

08006538 <__s2b>:
 8006538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	4615      	mov	r5, r2
 8006540:	461f      	mov	r7, r3
 8006542:	2209      	movs	r2, #9
 8006544:	3308      	adds	r3, #8
 8006546:	4606      	mov	r6, r0
 8006548:	fb93 f3f2 	sdiv	r3, r3, r2
 800654c:	2100      	movs	r1, #0
 800654e:	2201      	movs	r2, #1
 8006550:	429a      	cmp	r2, r3
 8006552:	db09      	blt.n	8006568 <__s2b+0x30>
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff ff47 	bl	80063e8 <_Balloc>
 800655a:	b940      	cbnz	r0, 800656e <__s2b+0x36>
 800655c:	4602      	mov	r2, r0
 800655e:	4b19      	ldr	r3, [pc, #100]	@ (80065c4 <__s2b+0x8c>)
 8006560:	4819      	ldr	r0, [pc, #100]	@ (80065c8 <__s2b+0x90>)
 8006562:	21d3      	movs	r1, #211	@ 0xd3
 8006564:	f001 fccc 	bl	8007f00 <__assert_func>
 8006568:	0052      	lsls	r2, r2, #1
 800656a:	3101      	adds	r1, #1
 800656c:	e7f0      	b.n	8006550 <__s2b+0x18>
 800656e:	9b08      	ldr	r3, [sp, #32]
 8006570:	6143      	str	r3, [r0, #20]
 8006572:	2d09      	cmp	r5, #9
 8006574:	f04f 0301 	mov.w	r3, #1
 8006578:	6103      	str	r3, [r0, #16]
 800657a:	dd16      	ble.n	80065aa <__s2b+0x72>
 800657c:	f104 0909 	add.w	r9, r4, #9
 8006580:	46c8      	mov	r8, r9
 8006582:	442c      	add	r4, r5
 8006584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006588:	4601      	mov	r1, r0
 800658a:	3b30      	subs	r3, #48	@ 0x30
 800658c:	220a      	movs	r2, #10
 800658e:	4630      	mov	r0, r6
 8006590:	f7ff ff8c 	bl	80064ac <__multadd>
 8006594:	45a0      	cmp	r8, r4
 8006596:	d1f5      	bne.n	8006584 <__s2b+0x4c>
 8006598:	f1a5 0408 	sub.w	r4, r5, #8
 800659c:	444c      	add	r4, r9
 800659e:	1b2d      	subs	r5, r5, r4
 80065a0:	1963      	adds	r3, r4, r5
 80065a2:	42bb      	cmp	r3, r7
 80065a4:	db04      	blt.n	80065b0 <__s2b+0x78>
 80065a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065aa:	340a      	adds	r4, #10
 80065ac:	2509      	movs	r5, #9
 80065ae:	e7f6      	b.n	800659e <__s2b+0x66>
 80065b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065b4:	4601      	mov	r1, r0
 80065b6:	3b30      	subs	r3, #48	@ 0x30
 80065b8:	220a      	movs	r2, #10
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ff76 	bl	80064ac <__multadd>
 80065c0:	e7ee      	b.n	80065a0 <__s2b+0x68>
 80065c2:	bf00      	nop
 80065c4:	08008d05 	.word	0x08008d05
 80065c8:	08008d16 	.word	0x08008d16

080065cc <__hi0bits>:
 80065cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065d0:	4603      	mov	r3, r0
 80065d2:	bf36      	itet	cc
 80065d4:	0403      	lslcc	r3, r0, #16
 80065d6:	2000      	movcs	r0, #0
 80065d8:	2010      	movcc	r0, #16
 80065da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065de:	bf3c      	itt	cc
 80065e0:	021b      	lslcc	r3, r3, #8
 80065e2:	3008      	addcc	r0, #8
 80065e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e8:	bf3c      	itt	cc
 80065ea:	011b      	lslcc	r3, r3, #4
 80065ec:	3004      	addcc	r0, #4
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f2:	bf3c      	itt	cc
 80065f4:	009b      	lslcc	r3, r3, #2
 80065f6:	3002      	addcc	r0, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	db05      	blt.n	8006608 <__hi0bits+0x3c>
 80065fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006600:	f100 0001 	add.w	r0, r0, #1
 8006604:	bf08      	it	eq
 8006606:	2020      	moveq	r0, #32
 8006608:	4770      	bx	lr

0800660a <__lo0bits>:
 800660a:	6803      	ldr	r3, [r0, #0]
 800660c:	4602      	mov	r2, r0
 800660e:	f013 0007 	ands.w	r0, r3, #7
 8006612:	d00b      	beq.n	800662c <__lo0bits+0x22>
 8006614:	07d9      	lsls	r1, r3, #31
 8006616:	d421      	bmi.n	800665c <__lo0bits+0x52>
 8006618:	0798      	lsls	r0, r3, #30
 800661a:	bf49      	itett	mi
 800661c:	085b      	lsrmi	r3, r3, #1
 800661e:	089b      	lsrpl	r3, r3, #2
 8006620:	2001      	movmi	r0, #1
 8006622:	6013      	strmi	r3, [r2, #0]
 8006624:	bf5c      	itt	pl
 8006626:	6013      	strpl	r3, [r2, #0]
 8006628:	2002      	movpl	r0, #2
 800662a:	4770      	bx	lr
 800662c:	b299      	uxth	r1, r3
 800662e:	b909      	cbnz	r1, 8006634 <__lo0bits+0x2a>
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	2010      	movs	r0, #16
 8006634:	b2d9      	uxtb	r1, r3
 8006636:	b909      	cbnz	r1, 800663c <__lo0bits+0x32>
 8006638:	3008      	adds	r0, #8
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	0719      	lsls	r1, r3, #28
 800663e:	bf04      	itt	eq
 8006640:	091b      	lsreq	r3, r3, #4
 8006642:	3004      	addeq	r0, #4
 8006644:	0799      	lsls	r1, r3, #30
 8006646:	bf04      	itt	eq
 8006648:	089b      	lsreq	r3, r3, #2
 800664a:	3002      	addeq	r0, #2
 800664c:	07d9      	lsls	r1, r3, #31
 800664e:	d403      	bmi.n	8006658 <__lo0bits+0x4e>
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	f100 0001 	add.w	r0, r0, #1
 8006656:	d003      	beq.n	8006660 <__lo0bits+0x56>
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4770      	bx	lr
 800665c:	2000      	movs	r0, #0
 800665e:	4770      	bx	lr
 8006660:	2020      	movs	r0, #32
 8006662:	4770      	bx	lr

08006664 <__i2b>:
 8006664:	b510      	push	{r4, lr}
 8006666:	460c      	mov	r4, r1
 8006668:	2101      	movs	r1, #1
 800666a:	f7ff febd 	bl	80063e8 <_Balloc>
 800666e:	4602      	mov	r2, r0
 8006670:	b928      	cbnz	r0, 800667e <__i2b+0x1a>
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <__i2b+0x24>)
 8006674:	4805      	ldr	r0, [pc, #20]	@ (800668c <__i2b+0x28>)
 8006676:	f240 1145 	movw	r1, #325	@ 0x145
 800667a:	f001 fc41 	bl	8007f00 <__assert_func>
 800667e:	2301      	movs	r3, #1
 8006680:	6144      	str	r4, [r0, #20]
 8006682:	6103      	str	r3, [r0, #16]
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	08008d05 	.word	0x08008d05
 800668c:	08008d16 	.word	0x08008d16

08006690 <__multiply>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	4614      	mov	r4, r2
 8006696:	690a      	ldr	r2, [r1, #16]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	bfa8      	it	ge
 800669e:	4623      	movge	r3, r4
 80066a0:	460f      	mov	r7, r1
 80066a2:	bfa4      	itt	ge
 80066a4:	460c      	movge	r4, r1
 80066a6:	461f      	movge	r7, r3
 80066a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	6861      	ldr	r1, [r4, #4]
 80066b4:	eb0a 0609 	add.w	r6, sl, r9
 80066b8:	42b3      	cmp	r3, r6
 80066ba:	b085      	sub	sp, #20
 80066bc:	bfb8      	it	lt
 80066be:	3101      	addlt	r1, #1
 80066c0:	f7ff fe92 	bl	80063e8 <_Balloc>
 80066c4:	b930      	cbnz	r0, 80066d4 <__multiply+0x44>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <__multiply+0x14c>)
 80066ca:	4845      	ldr	r0, [pc, #276]	@ (80067e0 <__multiply+0x150>)
 80066cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066d0:	f001 fc16 	bl	8007f00 <__assert_func>
 80066d4:	f100 0514 	add.w	r5, r0, #20
 80066d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066dc:	462b      	mov	r3, r5
 80066de:	2200      	movs	r2, #0
 80066e0:	4543      	cmp	r3, r8
 80066e2:	d321      	bcc.n	8006728 <__multiply+0x98>
 80066e4:	f107 0114 	add.w	r1, r7, #20
 80066e8:	f104 0214 	add.w	r2, r4, #20
 80066ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066f4:	9302      	str	r3, [sp, #8]
 80066f6:	1b13      	subs	r3, r2, r4
 80066f8:	3b15      	subs	r3, #21
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	3304      	adds	r3, #4
 8006700:	f104 0715 	add.w	r7, r4, #21
 8006704:	42ba      	cmp	r2, r7
 8006706:	bf38      	it	cc
 8006708:	2304      	movcc	r3, #4
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	9103      	str	r1, [sp, #12]
 8006710:	428b      	cmp	r3, r1
 8006712:	d80c      	bhi.n	800672e <__multiply+0x9e>
 8006714:	2e00      	cmp	r6, #0
 8006716:	dd03      	ble.n	8006720 <__multiply+0x90>
 8006718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05b      	beq.n	80067d8 <__multiply+0x148>
 8006720:	6106      	str	r6, [r0, #16]
 8006722:	b005      	add	sp, #20
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	f843 2b04 	str.w	r2, [r3], #4
 800672c:	e7d8      	b.n	80066e0 <__multiply+0x50>
 800672e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006732:	f1ba 0f00 	cmp.w	sl, #0
 8006736:	d024      	beq.n	8006782 <__multiply+0xf2>
 8006738:	f104 0e14 	add.w	lr, r4, #20
 800673c:	46a9      	mov	r9, r5
 800673e:	f04f 0c00 	mov.w	ip, #0
 8006742:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006746:	f8d9 3000 	ldr.w	r3, [r9]
 800674a:	fa1f fb87 	uxth.w	fp, r7
 800674e:	b29b      	uxth	r3, r3
 8006750:	fb0a 330b 	mla	r3, sl, fp, r3
 8006754:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006758:	f8d9 7000 	ldr.w	r7, [r9]
 800675c:	4463      	add	r3, ip
 800675e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006762:	fb0a c70b 	mla	r7, sl, fp, ip
 8006766:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006770:	4572      	cmp	r2, lr
 8006772:	f849 3b04 	str.w	r3, [r9], #4
 8006776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800677a:	d8e2      	bhi.n	8006742 <__multiply+0xb2>
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	f845 c003 	str.w	ip, [r5, r3]
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006788:	3104      	adds	r1, #4
 800678a:	f1b9 0f00 	cmp.w	r9, #0
 800678e:	d021      	beq.n	80067d4 <__multiply+0x144>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	f104 0c14 	add.w	ip, r4, #20
 8006796:	46ae      	mov	lr, r5
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	f8bc b000 	ldrh.w	fp, [ip]
 80067a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067a4:	fb09 770b 	mla	r7, r9, fp, r7
 80067a8:	4457      	add	r7, sl
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067b0:	f84e 3b04 	str.w	r3, [lr], #4
 80067b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067bc:	f8be 3000 	ldrh.w	r3, [lr]
 80067c0:	fb09 330a 	mla	r3, r9, sl, r3
 80067c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067c8:	4562      	cmp	r2, ip
 80067ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067ce:	d8e5      	bhi.n	800679c <__multiply+0x10c>
 80067d0:	9f01      	ldr	r7, [sp, #4]
 80067d2:	51eb      	str	r3, [r5, r7]
 80067d4:	3504      	adds	r5, #4
 80067d6:	e799      	b.n	800670c <__multiply+0x7c>
 80067d8:	3e01      	subs	r6, #1
 80067da:	e79b      	b.n	8006714 <__multiply+0x84>
 80067dc:	08008d05 	.word	0x08008d05
 80067e0:	08008d16 	.word	0x08008d16

080067e4 <__pow5mult>:
 80067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	4615      	mov	r5, r2
 80067ea:	f012 0203 	ands.w	r2, r2, #3
 80067ee:	4607      	mov	r7, r0
 80067f0:	460e      	mov	r6, r1
 80067f2:	d007      	beq.n	8006804 <__pow5mult+0x20>
 80067f4:	4c25      	ldr	r4, [pc, #148]	@ (800688c <__pow5mult+0xa8>)
 80067f6:	3a01      	subs	r2, #1
 80067f8:	2300      	movs	r3, #0
 80067fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067fe:	f7ff fe55 	bl	80064ac <__multadd>
 8006802:	4606      	mov	r6, r0
 8006804:	10ad      	asrs	r5, r5, #2
 8006806:	d03d      	beq.n	8006884 <__pow5mult+0xa0>
 8006808:	69fc      	ldr	r4, [r7, #28]
 800680a:	b97c      	cbnz	r4, 800682c <__pow5mult+0x48>
 800680c:	2010      	movs	r0, #16
 800680e:	f7ff fd35 	bl	800627c <malloc>
 8006812:	4602      	mov	r2, r0
 8006814:	61f8      	str	r0, [r7, #28]
 8006816:	b928      	cbnz	r0, 8006824 <__pow5mult+0x40>
 8006818:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <__pow5mult+0xac>)
 800681a:	481e      	ldr	r0, [pc, #120]	@ (8006894 <__pow5mult+0xb0>)
 800681c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006820:	f001 fb6e 	bl	8007f00 <__assert_func>
 8006824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006828:	6004      	str	r4, [r0, #0]
 800682a:	60c4      	str	r4, [r0, #12]
 800682c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006834:	b94c      	cbnz	r4, 800684a <__pow5mult+0x66>
 8006836:	f240 2171 	movw	r1, #625	@ 0x271
 800683a:	4638      	mov	r0, r7
 800683c:	f7ff ff12 	bl	8006664 <__i2b>
 8006840:	2300      	movs	r3, #0
 8006842:	f8c8 0008 	str.w	r0, [r8, #8]
 8006846:	4604      	mov	r4, r0
 8006848:	6003      	str	r3, [r0, #0]
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	07eb      	lsls	r3, r5, #31
 8006850:	d50a      	bpl.n	8006868 <__pow5mult+0x84>
 8006852:	4631      	mov	r1, r6
 8006854:	4622      	mov	r2, r4
 8006856:	4638      	mov	r0, r7
 8006858:	f7ff ff1a 	bl	8006690 <__multiply>
 800685c:	4631      	mov	r1, r6
 800685e:	4680      	mov	r8, r0
 8006860:	4638      	mov	r0, r7
 8006862:	f7ff fe01 	bl	8006468 <_Bfree>
 8006866:	4646      	mov	r6, r8
 8006868:	106d      	asrs	r5, r5, #1
 800686a:	d00b      	beq.n	8006884 <__pow5mult+0xa0>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	b938      	cbnz	r0, 8006880 <__pow5mult+0x9c>
 8006870:	4622      	mov	r2, r4
 8006872:	4621      	mov	r1, r4
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff ff0b 	bl	8006690 <__multiply>
 800687a:	6020      	str	r0, [r4, #0]
 800687c:	f8c0 9000 	str.w	r9, [r0]
 8006880:	4604      	mov	r4, r0
 8006882:	e7e4      	b.n	800684e <__pow5mult+0x6a>
 8006884:	4630      	mov	r0, r6
 8006886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688a:	bf00      	nop
 800688c:	08008d70 	.word	0x08008d70
 8006890:	08008c96 	.word	0x08008c96
 8006894:	08008d16 	.word	0x08008d16

08006898 <__lshift>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	460c      	mov	r4, r1
 800689e:	6849      	ldr	r1, [r1, #4]
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	4607      	mov	r7, r0
 80068aa:	4691      	mov	r9, r2
 80068ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068b0:	f108 0601 	add.w	r6, r8, #1
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	db0b      	blt.n	80068d0 <__lshift+0x38>
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff fd95 	bl	80063e8 <_Balloc>
 80068be:	4605      	mov	r5, r0
 80068c0:	b948      	cbnz	r0, 80068d6 <__lshift+0x3e>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b28      	ldr	r3, [pc, #160]	@ (8006968 <__lshift+0xd0>)
 80068c6:	4829      	ldr	r0, [pc, #164]	@ (800696c <__lshift+0xd4>)
 80068c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068cc:	f001 fb18 	bl	8007f00 <__assert_func>
 80068d0:	3101      	adds	r1, #1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	e7ee      	b.n	80068b4 <__lshift+0x1c>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f100 0114 	add.w	r1, r0, #20
 80068dc:	f100 0210 	add.w	r2, r0, #16
 80068e0:	4618      	mov	r0, r3
 80068e2:	4553      	cmp	r3, sl
 80068e4:	db33      	blt.n	800694e <__lshift+0xb6>
 80068e6:	6920      	ldr	r0, [r4, #16]
 80068e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068ec:	f104 0314 	add.w	r3, r4, #20
 80068f0:	f019 091f 	ands.w	r9, r9, #31
 80068f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068fc:	d02b      	beq.n	8006956 <__lshift+0xbe>
 80068fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006902:	468a      	mov	sl, r1
 8006904:	2200      	movs	r2, #0
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	fa00 f009 	lsl.w	r0, r0, r9
 800690c:	4310      	orrs	r0, r2
 800690e:	f84a 0b04 	str.w	r0, [sl], #4
 8006912:	f853 2b04 	ldr.w	r2, [r3], #4
 8006916:	459c      	cmp	ip, r3
 8006918:	fa22 f20e 	lsr.w	r2, r2, lr
 800691c:	d8f3      	bhi.n	8006906 <__lshift+0x6e>
 800691e:	ebac 0304 	sub.w	r3, ip, r4
 8006922:	3b15      	subs	r3, #21
 8006924:	f023 0303 	bic.w	r3, r3, #3
 8006928:	3304      	adds	r3, #4
 800692a:	f104 0015 	add.w	r0, r4, #21
 800692e:	4584      	cmp	ip, r0
 8006930:	bf38      	it	cc
 8006932:	2304      	movcc	r3, #4
 8006934:	50ca      	str	r2, [r1, r3]
 8006936:	b10a      	cbz	r2, 800693c <__lshift+0xa4>
 8006938:	f108 0602 	add.w	r6, r8, #2
 800693c:	3e01      	subs	r6, #1
 800693e:	4638      	mov	r0, r7
 8006940:	612e      	str	r6, [r5, #16]
 8006942:	4621      	mov	r1, r4
 8006944:	f7ff fd90 	bl	8006468 <_Bfree>
 8006948:	4628      	mov	r0, r5
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006952:	3301      	adds	r3, #1
 8006954:	e7c5      	b.n	80068e2 <__lshift+0x4a>
 8006956:	3904      	subs	r1, #4
 8006958:	f853 2b04 	ldr.w	r2, [r3], #4
 800695c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006960:	459c      	cmp	ip, r3
 8006962:	d8f9      	bhi.n	8006958 <__lshift+0xc0>
 8006964:	e7ea      	b.n	800693c <__lshift+0xa4>
 8006966:	bf00      	nop
 8006968:	08008d05 	.word	0x08008d05
 800696c:	08008d16 	.word	0x08008d16

08006970 <__mcmp>:
 8006970:	690a      	ldr	r2, [r1, #16]
 8006972:	4603      	mov	r3, r0
 8006974:	6900      	ldr	r0, [r0, #16]
 8006976:	1a80      	subs	r0, r0, r2
 8006978:	b530      	push	{r4, r5, lr}
 800697a:	d10e      	bne.n	800699a <__mcmp+0x2a>
 800697c:	3314      	adds	r3, #20
 800697e:	3114      	adds	r1, #20
 8006980:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006984:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006988:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800698c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006990:	4295      	cmp	r5, r2
 8006992:	d003      	beq.n	800699c <__mcmp+0x2c>
 8006994:	d205      	bcs.n	80069a2 <__mcmp+0x32>
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	bd30      	pop	{r4, r5, pc}
 800699c:	42a3      	cmp	r3, r4
 800699e:	d3f3      	bcc.n	8006988 <__mcmp+0x18>
 80069a0:	e7fb      	b.n	800699a <__mcmp+0x2a>
 80069a2:	2001      	movs	r0, #1
 80069a4:	e7f9      	b.n	800699a <__mcmp+0x2a>
	...

080069a8 <__mdiff>:
 80069a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	4689      	mov	r9, r1
 80069ae:	4606      	mov	r6, r0
 80069b0:	4611      	mov	r1, r2
 80069b2:	4648      	mov	r0, r9
 80069b4:	4614      	mov	r4, r2
 80069b6:	f7ff ffdb 	bl	8006970 <__mcmp>
 80069ba:	1e05      	subs	r5, r0, #0
 80069bc:	d112      	bne.n	80069e4 <__mdiff+0x3c>
 80069be:	4629      	mov	r1, r5
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7ff fd11 	bl	80063e8 <_Balloc>
 80069c6:	4602      	mov	r2, r0
 80069c8:	b928      	cbnz	r0, 80069d6 <__mdiff+0x2e>
 80069ca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac8 <__mdiff+0x120>)
 80069cc:	f240 2137 	movw	r1, #567	@ 0x237
 80069d0:	483e      	ldr	r0, [pc, #248]	@ (8006acc <__mdiff+0x124>)
 80069d2:	f001 fa95 	bl	8007f00 <__assert_func>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069dc:	4610      	mov	r0, r2
 80069de:	b003      	add	sp, #12
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	bfbc      	itt	lt
 80069e6:	464b      	movlt	r3, r9
 80069e8:	46a1      	movlt	r9, r4
 80069ea:	4630      	mov	r0, r6
 80069ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069f0:	bfba      	itte	lt
 80069f2:	461c      	movlt	r4, r3
 80069f4:	2501      	movlt	r5, #1
 80069f6:	2500      	movge	r5, #0
 80069f8:	f7ff fcf6 	bl	80063e8 <_Balloc>
 80069fc:	4602      	mov	r2, r0
 80069fe:	b918      	cbnz	r0, 8006a08 <__mdiff+0x60>
 8006a00:	4b31      	ldr	r3, [pc, #196]	@ (8006ac8 <__mdiff+0x120>)
 8006a02:	f240 2145 	movw	r1, #581	@ 0x245
 8006a06:	e7e3      	b.n	80069d0 <__mdiff+0x28>
 8006a08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a0c:	6926      	ldr	r6, [r4, #16]
 8006a0e:	60c5      	str	r5, [r0, #12]
 8006a10:	f109 0310 	add.w	r3, r9, #16
 8006a14:	f109 0514 	add.w	r5, r9, #20
 8006a18:	f104 0e14 	add.w	lr, r4, #20
 8006a1c:	f100 0b14 	add.w	fp, r0, #20
 8006a20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	46d9      	mov	r9, fp
 8006a2c:	f04f 0c00 	mov.w	ip, #0
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	fa1f f38a 	uxth.w	r3, sl
 8006a40:	4619      	mov	r1, r3
 8006a42:	b283      	uxth	r3, r0
 8006a44:	1acb      	subs	r3, r1, r3
 8006a46:	0c00      	lsrs	r0, r0, #16
 8006a48:	4463      	add	r3, ip
 8006a4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a58:	4576      	cmp	r6, lr
 8006a5a:	f849 3b04 	str.w	r3, [r9], #4
 8006a5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a62:	d8e5      	bhi.n	8006a30 <__mdiff+0x88>
 8006a64:	1b33      	subs	r3, r6, r4
 8006a66:	3b15      	subs	r3, #21
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	3415      	adds	r4, #21
 8006a6e:	3304      	adds	r3, #4
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	bf38      	it	cc
 8006a74:	2304      	movcc	r3, #4
 8006a76:	441d      	add	r5, r3
 8006a78:	445b      	add	r3, fp
 8006a7a:	461e      	mov	r6, r3
 8006a7c:	462c      	mov	r4, r5
 8006a7e:	4544      	cmp	r4, r8
 8006a80:	d30e      	bcc.n	8006aa0 <__mdiff+0xf8>
 8006a82:	f108 0103 	add.w	r1, r8, #3
 8006a86:	1b49      	subs	r1, r1, r5
 8006a88:	f021 0103 	bic.w	r1, r1, #3
 8006a8c:	3d03      	subs	r5, #3
 8006a8e:	45a8      	cmp	r8, r5
 8006a90:	bf38      	it	cc
 8006a92:	2100      	movcc	r1, #0
 8006a94:	440b      	add	r3, r1
 8006a96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a9a:	b191      	cbz	r1, 8006ac2 <__mdiff+0x11a>
 8006a9c:	6117      	str	r7, [r2, #16]
 8006a9e:	e79d      	b.n	80069dc <__mdiff+0x34>
 8006aa0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006aa4:	46e6      	mov	lr, ip
 8006aa6:	0c08      	lsrs	r0, r1, #16
 8006aa8:	fa1c fc81 	uxtah	ip, ip, r1
 8006aac:	4471      	add	r1, lr
 8006aae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ab2:	b289      	uxth	r1, r1
 8006ab4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ab8:	f846 1b04 	str.w	r1, [r6], #4
 8006abc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ac0:	e7dd      	b.n	8006a7e <__mdiff+0xd6>
 8006ac2:	3f01      	subs	r7, #1
 8006ac4:	e7e7      	b.n	8006a96 <__mdiff+0xee>
 8006ac6:	bf00      	nop
 8006ac8:	08008d05 	.word	0x08008d05
 8006acc:	08008d16 	.word	0x08008d16

08006ad0 <__ulp>:
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	ed8d 0b00 	vstr	d0, [sp]
 8006ad6:	9a01      	ldr	r2, [sp, #4]
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b18 <__ulp+0x48>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc08      	bgt.n	8006af6 <__ulp+0x26>
 8006ae4:	425b      	negs	r3, r3
 8006ae6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006aea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006aee:	da04      	bge.n	8006afa <__ulp+0x2a>
 8006af0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006af4:	4113      	asrs	r3, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	e008      	b.n	8006b0c <__ulp+0x3c>
 8006afa:	f1a2 0314 	sub.w	r3, r2, #20
 8006afe:	2b1e      	cmp	r3, #30
 8006b00:	bfda      	itte	le
 8006b02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b06:	40da      	lsrle	r2, r3
 8006b08:	2201      	movgt	r2, #1
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	ec41 0b10 	vmov	d0, r0, r1
 8006b14:	b002      	add	sp, #8
 8006b16:	4770      	bx	lr
 8006b18:	7ff00000 	.word	0x7ff00000

08006b1c <__b2d>:
 8006b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b20:	6906      	ldr	r6, [r0, #16]
 8006b22:	f100 0814 	add.w	r8, r0, #20
 8006b26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006b2a:	1f37      	subs	r7, r6, #4
 8006b2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7ff fd4b 	bl	80065cc <__hi0bits>
 8006b36:	f1c0 0320 	rsb	r3, r0, #32
 8006b3a:	280a      	cmp	r0, #10
 8006b3c:	600b      	str	r3, [r1, #0]
 8006b3e:	491b      	ldr	r1, [pc, #108]	@ (8006bac <__b2d+0x90>)
 8006b40:	dc15      	bgt.n	8006b6e <__b2d+0x52>
 8006b42:	f1c0 0c0b 	rsb	ip, r0, #11
 8006b46:	fa22 f30c 	lsr.w	r3, r2, ip
 8006b4a:	45b8      	cmp	r8, r7
 8006b4c:	ea43 0501 	orr.w	r5, r3, r1
 8006b50:	bf34      	ite	cc
 8006b52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b56:	2300      	movcs	r3, #0
 8006b58:	3015      	adds	r0, #21
 8006b5a:	fa02 f000 	lsl.w	r0, r2, r0
 8006b5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006b62:	4303      	orrs	r3, r0
 8006b64:	461c      	mov	r4, r3
 8006b66:	ec45 4b10 	vmov	d0, r4, r5
 8006b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6e:	45b8      	cmp	r8, r7
 8006b70:	bf3a      	itte	cc
 8006b72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b76:	f1a6 0708 	subcc.w	r7, r6, #8
 8006b7a:	2300      	movcs	r3, #0
 8006b7c:	380b      	subs	r0, #11
 8006b7e:	d012      	beq.n	8006ba6 <__b2d+0x8a>
 8006b80:	f1c0 0120 	rsb	r1, r0, #32
 8006b84:	fa23 f401 	lsr.w	r4, r3, r1
 8006b88:	4082      	lsls	r2, r0
 8006b8a:	4322      	orrs	r2, r4
 8006b8c:	4547      	cmp	r7, r8
 8006b8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006b92:	bf8c      	ite	hi
 8006b94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006b98:	2200      	movls	r2, #0
 8006b9a:	4083      	lsls	r3, r0
 8006b9c:	40ca      	lsrs	r2, r1
 8006b9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	e7de      	b.n	8006b64 <__b2d+0x48>
 8006ba6:	ea42 0501 	orr.w	r5, r2, r1
 8006baa:	e7db      	b.n	8006b64 <__b2d+0x48>
 8006bac:	3ff00000 	.word	0x3ff00000

08006bb0 <__d2b>:
 8006bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	ec59 8b10 	vmov	r8, r9, d0
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	f7ff fc13 	bl	80063e8 <_Balloc>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b930      	cbnz	r0, 8006bd4 <__d2b+0x24>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b23      	ldr	r3, [pc, #140]	@ (8006c58 <__d2b+0xa8>)
 8006bca:	4824      	ldr	r0, [pc, #144]	@ (8006c5c <__d2b+0xac>)
 8006bcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bd0:	f001 f996 	bl	8007f00 <__assert_func>
 8006bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bdc:	b10d      	cbz	r5, 8006be2 <__d2b+0x32>
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	f1b8 0300 	subs.w	r3, r8, #0
 8006be8:	d023      	beq.n	8006c32 <__d2b+0x82>
 8006bea:	4668      	mov	r0, sp
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f7ff fd0c 	bl	800660a <__lo0bits>
 8006bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bf6:	b1d0      	cbz	r0, 8006c2e <__d2b+0x7e>
 8006bf8:	f1c0 0320 	rsb	r3, r0, #32
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	430b      	orrs	r3, r1
 8006c02:	40c2      	lsrs	r2, r0
 8006c04:	6163      	str	r3, [r4, #20]
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	61a3      	str	r3, [r4, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf0c      	ite	eq
 8006c10:	2201      	moveq	r2, #1
 8006c12:	2202      	movne	r2, #2
 8006c14:	6122      	str	r2, [r4, #16]
 8006c16:	b1a5      	cbz	r5, 8006c42 <__d2b+0x92>
 8006c18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c1c:	4405      	add	r5, r0
 8006c1e:	603d      	str	r5, [r7, #0]
 8006c20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c24:	6030      	str	r0, [r6, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	b003      	add	sp, #12
 8006c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	6161      	str	r1, [r4, #20]
 8006c30:	e7ea      	b.n	8006c08 <__d2b+0x58>
 8006c32:	a801      	add	r0, sp, #4
 8006c34:	f7ff fce9 	bl	800660a <__lo0bits>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	3020      	adds	r0, #32
 8006c3e:	2201      	movs	r2, #1
 8006c40:	e7e8      	b.n	8006c14 <__d2b+0x64>
 8006c42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c4a:	6038      	str	r0, [r7, #0]
 8006c4c:	6918      	ldr	r0, [r3, #16]
 8006c4e:	f7ff fcbd 	bl	80065cc <__hi0bits>
 8006c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c56:	e7e5      	b.n	8006c24 <__d2b+0x74>
 8006c58:	08008d05 	.word	0x08008d05
 8006c5c:	08008d16 	.word	0x08008d16

08006c60 <__ratio>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	b085      	sub	sp, #20
 8006c66:	e9cd 1000 	strd	r1, r0, [sp]
 8006c6a:	a902      	add	r1, sp, #8
 8006c6c:	f7ff ff56 	bl	8006b1c <__b2d>
 8006c70:	9800      	ldr	r0, [sp, #0]
 8006c72:	a903      	add	r1, sp, #12
 8006c74:	ec55 4b10 	vmov	r4, r5, d0
 8006c78:	f7ff ff50 	bl	8006b1c <__b2d>
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	6919      	ldr	r1, [r3, #16]
 8006c80:	9b00      	ldr	r3, [sp, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	1ac9      	subs	r1, r1, r3
 8006c86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	ec5b ab10 	vmov	sl, fp, d0
 8006c90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bfce      	itee	gt
 8006c98:	462a      	movgt	r2, r5
 8006c9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c9e:	465a      	movle	r2, fp
 8006ca0:	462f      	mov	r7, r5
 8006ca2:	46d9      	mov	r9, fp
 8006ca4:	bfcc      	ite	gt
 8006ca6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006caa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006cae:	464b      	mov	r3, r9
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fdc9 	bl	800084c <__aeabi_ddiv>
 8006cba:	ec41 0b10 	vmov	d0, r0, r1
 8006cbe:	b005      	add	sp, #20
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cc4 <__copybits>:
 8006cc4:	3901      	subs	r1, #1
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	1149      	asrs	r1, r1, #5
 8006cca:	6914      	ldr	r4, [r2, #16]
 8006ccc:	3101      	adds	r1, #1
 8006cce:	f102 0314 	add.w	r3, r2, #20
 8006cd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006cd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cda:	1f05      	subs	r5, r0, #4
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	d30c      	bcc.n	8006cfa <__copybits+0x36>
 8006ce0:	1aa3      	subs	r3, r4, r2
 8006ce2:	3b11      	subs	r3, #17
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	3211      	adds	r2, #17
 8006cea:	42a2      	cmp	r2, r4
 8006cec:	bf88      	it	hi
 8006cee:	2300      	movhi	r3, #0
 8006cf0:	4418      	add	r0, r3
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4288      	cmp	r0, r1
 8006cf6:	d305      	bcc.n	8006d04 <__copybits+0x40>
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
 8006cfa:	f853 6b04 	ldr.w	r6, [r3], #4
 8006cfe:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d02:	e7eb      	b.n	8006cdc <__copybits+0x18>
 8006d04:	f840 3b04 	str.w	r3, [r0], #4
 8006d08:	e7f4      	b.n	8006cf4 <__copybits+0x30>

08006d0a <__any_on>:
 8006d0a:	f100 0214 	add.w	r2, r0, #20
 8006d0e:	6900      	ldr	r0, [r0, #16]
 8006d10:	114b      	asrs	r3, r1, #5
 8006d12:	4298      	cmp	r0, r3
 8006d14:	b510      	push	{r4, lr}
 8006d16:	db11      	blt.n	8006d3c <__any_on+0x32>
 8006d18:	dd0a      	ble.n	8006d30 <__any_on+0x26>
 8006d1a:	f011 011f 	ands.w	r1, r1, #31
 8006d1e:	d007      	beq.n	8006d30 <__any_on+0x26>
 8006d20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d24:	fa24 f001 	lsr.w	r0, r4, r1
 8006d28:	fa00 f101 	lsl.w	r1, r0, r1
 8006d2c:	428c      	cmp	r4, r1
 8006d2e:	d10b      	bne.n	8006d48 <__any_on+0x3e>
 8006d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d803      	bhi.n	8006d40 <__any_on+0x36>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	e7f7      	b.n	8006d30 <__any_on+0x26>
 8006d40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d0f5      	beq.n	8006d34 <__any_on+0x2a>
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e7f6      	b.n	8006d3a <__any_on+0x30>

08006d4c <sulp>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4604      	mov	r4, r0
 8006d50:	460d      	mov	r5, r1
 8006d52:	ec45 4b10 	vmov	d0, r4, r5
 8006d56:	4616      	mov	r6, r2
 8006d58:	f7ff feba 	bl	8006ad0 <__ulp>
 8006d5c:	ec51 0b10 	vmov	r0, r1, d0
 8006d60:	b17e      	cbz	r6, 8006d82 <sulp+0x36>
 8006d62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dd09      	ble.n	8006d82 <sulp+0x36>
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d74:	2400      	movs	r4, #0
 8006d76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	f7f9 fc3b 	bl	80005f8 <__aeabi_dmul>
 8006d82:	ec41 0b10 	vmov	d0, r0, r1
 8006d86:	bd70      	pop	{r4, r5, r6, pc}

08006d88 <_strtod_l>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	b09f      	sub	sp, #124	@ 0x7c
 8006d8e:	460c      	mov	r4, r1
 8006d90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d92:	2200      	movs	r2, #0
 8006d94:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d96:	9005      	str	r0, [sp, #20]
 8006d98:	f04f 0a00 	mov.w	sl, #0
 8006d9c:	f04f 0b00 	mov.w	fp, #0
 8006da0:	460a      	mov	r2, r1
 8006da2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006da4:	7811      	ldrb	r1, [r2, #0]
 8006da6:	292b      	cmp	r1, #43	@ 0x2b
 8006da8:	d04a      	beq.n	8006e40 <_strtod_l+0xb8>
 8006daa:	d838      	bhi.n	8006e1e <_strtod_l+0x96>
 8006dac:	290d      	cmp	r1, #13
 8006dae:	d832      	bhi.n	8006e16 <_strtod_l+0x8e>
 8006db0:	2908      	cmp	r1, #8
 8006db2:	d832      	bhi.n	8006e1a <_strtod_l+0x92>
 8006db4:	2900      	cmp	r1, #0
 8006db6:	d03b      	beq.n	8006e30 <_strtod_l+0xa8>
 8006db8:	2200      	movs	r2, #0
 8006dba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006dbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006dbe:	782a      	ldrb	r2, [r5, #0]
 8006dc0:	2a30      	cmp	r2, #48	@ 0x30
 8006dc2:	f040 80b3 	bne.w	8006f2c <_strtod_l+0x1a4>
 8006dc6:	786a      	ldrb	r2, [r5, #1]
 8006dc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006dcc:	2a58      	cmp	r2, #88	@ 0x58
 8006dce:	d16e      	bne.n	8006eae <_strtod_l+0x126>
 8006dd0:	9302      	str	r3, [sp, #8]
 8006dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	ab1a      	add	r3, sp, #104	@ 0x68
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4a8e      	ldr	r2, [pc, #568]	@ (8007014 <_strtod_l+0x28c>)
 8006ddc:	9805      	ldr	r0, [sp, #20]
 8006dde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006de0:	a919      	add	r1, sp, #100	@ 0x64
 8006de2:	f001 f927 	bl	8008034 <__gethex>
 8006de6:	f010 060f 	ands.w	r6, r0, #15
 8006dea:	4604      	mov	r4, r0
 8006dec:	d005      	beq.n	8006dfa <_strtod_l+0x72>
 8006dee:	2e06      	cmp	r6, #6
 8006df0:	d128      	bne.n	8006e44 <_strtod_l+0xbc>
 8006df2:	3501      	adds	r5, #1
 8006df4:	2300      	movs	r3, #0
 8006df6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f040 858e 	bne.w	800791e <_strtod_l+0xb96>
 8006e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e04:	b1cb      	cbz	r3, 8006e3a <_strtod_l+0xb2>
 8006e06:	4652      	mov	r2, sl
 8006e08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006e0c:	ec43 2b10 	vmov	d0, r2, r3
 8006e10:	b01f      	add	sp, #124	@ 0x7c
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	2920      	cmp	r1, #32
 8006e18:	d1ce      	bne.n	8006db8 <_strtod_l+0x30>
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	e7c1      	b.n	8006da2 <_strtod_l+0x1a>
 8006e1e:	292d      	cmp	r1, #45	@ 0x2d
 8006e20:	d1ca      	bne.n	8006db8 <_strtod_l+0x30>
 8006e22:	2101      	movs	r1, #1
 8006e24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e26:	1c51      	adds	r1, r2, #1
 8006e28:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e2a:	7852      	ldrb	r2, [r2, #1]
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	d1c5      	bne.n	8006dbc <_strtod_l+0x34>
 8006e30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e32:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 8570 	bne.w	800791a <_strtod_l+0xb92>
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	465b      	mov	r3, fp
 8006e3e:	e7e5      	b.n	8006e0c <_strtod_l+0x84>
 8006e40:	2100      	movs	r1, #0
 8006e42:	e7ef      	b.n	8006e24 <_strtod_l+0x9c>
 8006e44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e46:	b13a      	cbz	r2, 8006e58 <_strtod_l+0xd0>
 8006e48:	2135      	movs	r1, #53	@ 0x35
 8006e4a:	a81c      	add	r0, sp, #112	@ 0x70
 8006e4c:	f7ff ff3a 	bl	8006cc4 <__copybits>
 8006e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e52:	9805      	ldr	r0, [sp, #20]
 8006e54:	f7ff fb08 	bl	8006468 <_Bfree>
 8006e58:	3e01      	subs	r6, #1
 8006e5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e5c:	2e04      	cmp	r6, #4
 8006e5e:	d806      	bhi.n	8006e6e <_strtod_l+0xe6>
 8006e60:	e8df f006 	tbb	[pc, r6]
 8006e64:	201d0314 	.word	0x201d0314
 8006e68:	14          	.byte	0x14
 8006e69:	00          	.byte	0x00
 8006e6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e6e:	05e1      	lsls	r1, r4, #23
 8006e70:	bf48      	it	mi
 8006e72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e7a:	0d1b      	lsrs	r3, r3, #20
 8006e7c:	051b      	lsls	r3, r3, #20
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1bb      	bne.n	8006dfa <_strtod_l+0x72>
 8006e82:	f7fe fb2f 	bl	80054e4 <__errno>
 8006e86:	2322      	movs	r3, #34	@ 0x22
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	e7b6      	b.n	8006dfa <_strtod_l+0x72>
 8006e8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e9c:	e7e7      	b.n	8006e6e <_strtod_l+0xe6>
 8006e9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800701c <_strtod_l+0x294>
 8006ea2:	e7e4      	b.n	8006e6e <_strtod_l+0xe6>
 8006ea4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8006eac:	e7df      	b.n	8006e6e <_strtod_l+0xe6>
 8006eae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b30      	cmp	r3, #48	@ 0x30
 8006eb8:	d0f9      	beq.n	8006eae <_strtod_l+0x126>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d09d      	beq.n	8006dfa <_strtod_l+0x72>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9308      	str	r3, [sp, #32]
 8006eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ecc:	461f      	mov	r7, r3
 8006ece:	220a      	movs	r2, #10
 8006ed0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006ed2:	7805      	ldrb	r5, [r0, #0]
 8006ed4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ed8:	b2d9      	uxtb	r1, r3
 8006eda:	2909      	cmp	r1, #9
 8006edc:	d928      	bls.n	8006f30 <_strtod_l+0x1a8>
 8006ede:	494e      	ldr	r1, [pc, #312]	@ (8007018 <_strtod_l+0x290>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f000 ffd5 	bl	8007e90 <strncmp>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d032      	beq.n	8006f50 <_strtod_l+0x1c8>
 8006eea:	2000      	movs	r0, #0
 8006eec:	462a      	mov	r2, r5
 8006eee:	4681      	mov	r9, r0
 8006ef0:	463d      	mov	r5, r7
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2a65      	cmp	r2, #101	@ 0x65
 8006ef6:	d001      	beq.n	8006efc <_strtod_l+0x174>
 8006ef8:	2a45      	cmp	r2, #69	@ 0x45
 8006efa:	d114      	bne.n	8006f26 <_strtod_l+0x19e>
 8006efc:	b91d      	cbnz	r5, 8006f06 <_strtod_l+0x17e>
 8006efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f00:	4302      	orrs	r2, r0
 8006f02:	d095      	beq.n	8006e30 <_strtod_l+0xa8>
 8006f04:	2500      	movs	r5, #0
 8006f06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006f08:	1c62      	adds	r2, r4, #1
 8006f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f0c:	7862      	ldrb	r2, [r4, #1]
 8006f0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006f10:	d077      	beq.n	8007002 <_strtod_l+0x27a>
 8006f12:	2a2d      	cmp	r2, #45	@ 0x2d
 8006f14:	d07b      	beq.n	800700e <_strtod_l+0x286>
 8006f16:	f04f 0c00 	mov.w	ip, #0
 8006f1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006f1e:	2909      	cmp	r1, #9
 8006f20:	f240 8082 	bls.w	8007028 <_strtod_l+0x2a0>
 8006f24:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	e0a2      	b.n	8007072 <_strtod_l+0x2ea>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e7c7      	b.n	8006ec0 <_strtod_l+0x138>
 8006f30:	2f08      	cmp	r7, #8
 8006f32:	bfd5      	itete	le
 8006f34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006f36:	9908      	ldrgt	r1, [sp, #32]
 8006f38:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f40:	f100 0001 	add.w	r0, r0, #1
 8006f44:	bfd4      	ite	le
 8006f46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006f48:	9308      	strgt	r3, [sp, #32]
 8006f4a:	3701      	adds	r7, #1
 8006f4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f4e:	e7bf      	b.n	8006ed0 <_strtod_l+0x148>
 8006f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f56:	785a      	ldrb	r2, [r3, #1]
 8006f58:	b37f      	cbz	r7, 8006fba <_strtod_l+0x232>
 8006f5a:	4681      	mov	r9, r0
 8006f5c:	463d      	mov	r5, r7
 8006f5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d912      	bls.n	8006f8c <_strtod_l+0x204>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e7c4      	b.n	8006ef4 <_strtod_l+0x16c>
 8006f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f70:	785a      	ldrb	r2, [r3, #1]
 8006f72:	3001      	adds	r0, #1
 8006f74:	2a30      	cmp	r2, #48	@ 0x30
 8006f76:	d0f8      	beq.n	8006f6a <_strtod_l+0x1e2>
 8006f78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	f200 84d3 	bhi.w	8007928 <_strtod_l+0xba0>
 8006f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f86:	4681      	mov	r9, r0
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	3a30      	subs	r2, #48	@ 0x30
 8006f8e:	f100 0301 	add.w	r3, r0, #1
 8006f92:	d02a      	beq.n	8006fea <_strtod_l+0x262>
 8006f94:	4499      	add	r9, r3
 8006f96:	eb00 0c05 	add.w	ip, r0, r5
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	210a      	movs	r1, #10
 8006f9e:	4563      	cmp	r3, ip
 8006fa0:	d10d      	bne.n	8006fbe <_strtod_l+0x236>
 8006fa2:	1c69      	adds	r1, r5, #1
 8006fa4:	4401      	add	r1, r0
 8006fa6:	4428      	add	r0, r5
 8006fa8:	2808      	cmp	r0, #8
 8006faa:	dc16      	bgt.n	8006fda <_strtod_l+0x252>
 8006fac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fae:	230a      	movs	r3, #10
 8006fb0:	fb03 2300 	mla	r3, r3, r0, r2
 8006fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e018      	b.n	8006fec <_strtod_l+0x264>
 8006fba:	4638      	mov	r0, r7
 8006fbc:	e7da      	b.n	8006f74 <_strtod_l+0x1ec>
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	f103 0301 	add.w	r3, r3, #1
 8006fc4:	dc03      	bgt.n	8006fce <_strtod_l+0x246>
 8006fc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fc8:	434e      	muls	r6, r1
 8006fca:	960a      	str	r6, [sp, #40]	@ 0x28
 8006fcc:	e7e7      	b.n	8006f9e <_strtod_l+0x216>
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	bfde      	ittt	le
 8006fd2:	9e08      	ldrle	r6, [sp, #32]
 8006fd4:	434e      	mulle	r6, r1
 8006fd6:	9608      	strle	r6, [sp, #32]
 8006fd8:	e7e1      	b.n	8006f9e <_strtod_l+0x216>
 8006fda:	280f      	cmp	r0, #15
 8006fdc:	dceb      	bgt.n	8006fb6 <_strtod_l+0x22e>
 8006fde:	9808      	ldr	r0, [sp, #32]
 8006fe0:	230a      	movs	r3, #10
 8006fe2:	fb03 2300 	mla	r3, r3, r0, r2
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	e7e5      	b.n	8006fb6 <_strtod_l+0x22e>
 8006fea:	4629      	mov	r1, r5
 8006fec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fee:	1c50      	adds	r0, r2, #1
 8006ff0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ff2:	7852      	ldrb	r2, [r2, #1]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	e7b1      	b.n	8006f5e <_strtod_l+0x1d6>
 8006ffa:	f04f 0900 	mov.w	r9, #0
 8006ffe:	2301      	movs	r3, #1
 8007000:	e77d      	b.n	8006efe <_strtod_l+0x176>
 8007002:	f04f 0c00 	mov.w	ip, #0
 8007006:	1ca2      	adds	r2, r4, #2
 8007008:	9219      	str	r2, [sp, #100]	@ 0x64
 800700a:	78a2      	ldrb	r2, [r4, #2]
 800700c:	e785      	b.n	8006f1a <_strtod_l+0x192>
 800700e:	f04f 0c01 	mov.w	ip, #1
 8007012:	e7f8      	b.n	8007006 <_strtod_l+0x27e>
 8007014:	08008e88 	.word	0x08008e88
 8007018:	08008e70 	.word	0x08008e70
 800701c:	7ff00000 	.word	0x7ff00000
 8007020:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007022:	1c51      	adds	r1, r2, #1
 8007024:	9119      	str	r1, [sp, #100]	@ 0x64
 8007026:	7852      	ldrb	r2, [r2, #1]
 8007028:	2a30      	cmp	r2, #48	@ 0x30
 800702a:	d0f9      	beq.n	8007020 <_strtod_l+0x298>
 800702c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007030:	2908      	cmp	r1, #8
 8007032:	f63f af78 	bhi.w	8006f26 <_strtod_l+0x19e>
 8007036:	3a30      	subs	r2, #48	@ 0x30
 8007038:	920e      	str	r2, [sp, #56]	@ 0x38
 800703a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800703c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800703e:	f04f 080a 	mov.w	r8, #10
 8007042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007044:	1c56      	adds	r6, r2, #1
 8007046:	9619      	str	r6, [sp, #100]	@ 0x64
 8007048:	7852      	ldrb	r2, [r2, #1]
 800704a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800704e:	f1be 0f09 	cmp.w	lr, #9
 8007052:	d939      	bls.n	80070c8 <_strtod_l+0x340>
 8007054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007056:	1a76      	subs	r6, r6, r1
 8007058:	2e08      	cmp	r6, #8
 800705a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800705e:	dc03      	bgt.n	8007068 <_strtod_l+0x2e0>
 8007060:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007062:	4588      	cmp	r8, r1
 8007064:	bfa8      	it	ge
 8007066:	4688      	movge	r8, r1
 8007068:	f1bc 0f00 	cmp.w	ip, #0
 800706c:	d001      	beq.n	8007072 <_strtod_l+0x2ea>
 800706e:	f1c8 0800 	rsb	r8, r8, #0
 8007072:	2d00      	cmp	r5, #0
 8007074:	d14e      	bne.n	8007114 <_strtod_l+0x38c>
 8007076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007078:	4308      	orrs	r0, r1
 800707a:	f47f aebe 	bne.w	8006dfa <_strtod_l+0x72>
 800707e:	2b00      	cmp	r3, #0
 8007080:	f47f aed6 	bne.w	8006e30 <_strtod_l+0xa8>
 8007084:	2a69      	cmp	r2, #105	@ 0x69
 8007086:	d028      	beq.n	80070da <_strtod_l+0x352>
 8007088:	dc25      	bgt.n	80070d6 <_strtod_l+0x34e>
 800708a:	2a49      	cmp	r2, #73	@ 0x49
 800708c:	d025      	beq.n	80070da <_strtod_l+0x352>
 800708e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007090:	f47f aece 	bne.w	8006e30 <_strtod_l+0xa8>
 8007094:	499b      	ldr	r1, [pc, #620]	@ (8007304 <_strtod_l+0x57c>)
 8007096:	a819      	add	r0, sp, #100	@ 0x64
 8007098:	f001 f9ee 	bl	8008478 <__match>
 800709c:	2800      	cmp	r0, #0
 800709e:	f43f aec7 	beq.w	8006e30 <_strtod_l+0xa8>
 80070a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b28      	cmp	r3, #40	@ 0x28
 80070a8:	d12e      	bne.n	8007108 <_strtod_l+0x380>
 80070aa:	4997      	ldr	r1, [pc, #604]	@ (8007308 <_strtod_l+0x580>)
 80070ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80070ae:	a819      	add	r0, sp, #100	@ 0x64
 80070b0:	f001 f9f6 	bl	80084a0 <__hexnan>
 80070b4:	2805      	cmp	r0, #5
 80070b6:	d127      	bne.n	8007108 <_strtod_l+0x380>
 80070b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80070be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80070c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80070c6:	e698      	b.n	8006dfa <_strtod_l+0x72>
 80070c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80070ca:	fb08 2101 	mla	r1, r8, r1, r2
 80070ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80070d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80070d4:	e7b5      	b.n	8007042 <_strtod_l+0x2ba>
 80070d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80070d8:	e7da      	b.n	8007090 <_strtod_l+0x308>
 80070da:	498c      	ldr	r1, [pc, #560]	@ (800730c <_strtod_l+0x584>)
 80070dc:	a819      	add	r0, sp, #100	@ 0x64
 80070de:	f001 f9cb 	bl	8008478 <__match>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f43f aea4 	beq.w	8006e30 <_strtod_l+0xa8>
 80070e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070ea:	4989      	ldr	r1, [pc, #548]	@ (8007310 <_strtod_l+0x588>)
 80070ec:	3b01      	subs	r3, #1
 80070ee:	a819      	add	r0, sp, #100	@ 0x64
 80070f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80070f2:	f001 f9c1 	bl	8008478 <__match>
 80070f6:	b910      	cbnz	r0, 80070fe <_strtod_l+0x376>
 80070f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070fa:	3301      	adds	r3, #1
 80070fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80070fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007320 <_strtod_l+0x598>
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	e678      	b.n	8006dfa <_strtod_l+0x72>
 8007108:	4882      	ldr	r0, [pc, #520]	@ (8007314 <_strtod_l+0x58c>)
 800710a:	f000 fef1 	bl	8007ef0 <nan>
 800710e:	ec5b ab10 	vmov	sl, fp, d0
 8007112:	e672      	b.n	8006dfa <_strtod_l+0x72>
 8007114:	eba8 0309 	sub.w	r3, r8, r9
 8007118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800711a:	9309      	str	r3, [sp, #36]	@ 0x24
 800711c:	2f00      	cmp	r7, #0
 800711e:	bf08      	it	eq
 8007120:	462f      	moveq	r7, r5
 8007122:	2d10      	cmp	r5, #16
 8007124:	462c      	mov	r4, r5
 8007126:	bfa8      	it	ge
 8007128:	2410      	movge	r4, #16
 800712a:	f7f9 f9eb 	bl	8000504 <__aeabi_ui2d>
 800712e:	2d09      	cmp	r5, #9
 8007130:	4682      	mov	sl, r0
 8007132:	468b      	mov	fp, r1
 8007134:	dc13      	bgt.n	800715e <_strtod_l+0x3d6>
 8007136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	f43f ae5e 	beq.w	8006dfa <_strtod_l+0x72>
 800713e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007140:	dd78      	ble.n	8007234 <_strtod_l+0x4ac>
 8007142:	2b16      	cmp	r3, #22
 8007144:	dc5f      	bgt.n	8007206 <_strtod_l+0x47e>
 8007146:	4974      	ldr	r1, [pc, #464]	@ (8007318 <_strtod_l+0x590>)
 8007148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800714c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007150:	4652      	mov	r2, sl
 8007152:	465b      	mov	r3, fp
 8007154:	f7f9 fa50 	bl	80005f8 <__aeabi_dmul>
 8007158:	4682      	mov	sl, r0
 800715a:	468b      	mov	fp, r1
 800715c:	e64d      	b.n	8006dfa <_strtod_l+0x72>
 800715e:	4b6e      	ldr	r3, [pc, #440]	@ (8007318 <_strtod_l+0x590>)
 8007160:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007164:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	4682      	mov	sl, r0
 800716e:	9808      	ldr	r0, [sp, #32]
 8007170:	468b      	mov	fp, r1
 8007172:	f7f9 f9c7 	bl	8000504 <__aeabi_ui2d>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4650      	mov	r0, sl
 800717c:	4659      	mov	r1, fp
 800717e:	f7f9 f885 	bl	800028c <__adddf3>
 8007182:	2d0f      	cmp	r5, #15
 8007184:	4682      	mov	sl, r0
 8007186:	468b      	mov	fp, r1
 8007188:	ddd5      	ble.n	8007136 <_strtod_l+0x3ae>
 800718a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718c:	1b2c      	subs	r4, r5, r4
 800718e:	441c      	add	r4, r3
 8007190:	2c00      	cmp	r4, #0
 8007192:	f340 8096 	ble.w	80072c2 <_strtod_l+0x53a>
 8007196:	f014 030f 	ands.w	r3, r4, #15
 800719a:	d00a      	beq.n	80071b2 <_strtod_l+0x42a>
 800719c:	495e      	ldr	r1, [pc, #376]	@ (8007318 <_strtod_l+0x590>)
 800719e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071a2:	4652      	mov	r2, sl
 80071a4:	465b      	mov	r3, fp
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	f7f9 fa25 	bl	80005f8 <__aeabi_dmul>
 80071ae:	4682      	mov	sl, r0
 80071b0:	468b      	mov	fp, r1
 80071b2:	f034 040f 	bics.w	r4, r4, #15
 80071b6:	d073      	beq.n	80072a0 <_strtod_l+0x518>
 80071b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80071bc:	dd48      	ble.n	8007250 <_strtod_l+0x4c8>
 80071be:	2400      	movs	r4, #0
 80071c0:	46a0      	mov	r8, r4
 80071c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80071c4:	46a1      	mov	r9, r4
 80071c6:	9a05      	ldr	r2, [sp, #20]
 80071c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007320 <_strtod_l+0x598>
 80071cc:	2322      	movs	r3, #34	@ 0x22
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	f04f 0a00 	mov.w	sl, #0
 80071d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f43f ae0f 	beq.w	8006dfa <_strtod_l+0x72>
 80071dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071de:	9805      	ldr	r0, [sp, #20]
 80071e0:	f7ff f942 	bl	8006468 <_Bfree>
 80071e4:	9805      	ldr	r0, [sp, #20]
 80071e6:	4649      	mov	r1, r9
 80071e8:	f7ff f93e 	bl	8006468 <_Bfree>
 80071ec:	9805      	ldr	r0, [sp, #20]
 80071ee:	4641      	mov	r1, r8
 80071f0:	f7ff f93a 	bl	8006468 <_Bfree>
 80071f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071f6:	9805      	ldr	r0, [sp, #20]
 80071f8:	f7ff f936 	bl	8006468 <_Bfree>
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	4621      	mov	r1, r4
 8007200:	f7ff f932 	bl	8006468 <_Bfree>
 8007204:	e5f9      	b.n	8006dfa <_strtod_l+0x72>
 8007206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007208:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800720c:	4293      	cmp	r3, r2
 800720e:	dbbc      	blt.n	800718a <_strtod_l+0x402>
 8007210:	4c41      	ldr	r4, [pc, #260]	@ (8007318 <_strtod_l+0x590>)
 8007212:	f1c5 050f 	rsb	r5, r5, #15
 8007216:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800721a:	4652      	mov	r2, sl
 800721c:	465b      	mov	r3, fp
 800721e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	1b5d      	subs	r5, r3, r5
 800722a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800722e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007232:	e78f      	b.n	8007154 <_strtod_l+0x3cc>
 8007234:	3316      	adds	r3, #22
 8007236:	dba8      	blt.n	800718a <_strtod_l+0x402>
 8007238:	4b37      	ldr	r3, [pc, #220]	@ (8007318 <_strtod_l+0x590>)
 800723a:	eba9 0808 	sub.w	r8, r9, r8
 800723e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007242:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007246:	4650      	mov	r0, sl
 8007248:	4659      	mov	r1, fp
 800724a:	f7f9 faff 	bl	800084c <__aeabi_ddiv>
 800724e:	e783      	b.n	8007158 <_strtod_l+0x3d0>
 8007250:	4b32      	ldr	r3, [pc, #200]	@ (800731c <_strtod_l+0x594>)
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	2300      	movs	r3, #0
 8007256:	1124      	asrs	r4, r4, #4
 8007258:	4650      	mov	r0, sl
 800725a:	4659      	mov	r1, fp
 800725c:	461e      	mov	r6, r3
 800725e:	2c01      	cmp	r4, #1
 8007260:	dc21      	bgt.n	80072a6 <_strtod_l+0x51e>
 8007262:	b10b      	cbz	r3, 8007268 <_strtod_l+0x4e0>
 8007264:	4682      	mov	sl, r0
 8007266:	468b      	mov	fp, r1
 8007268:	492c      	ldr	r1, [pc, #176]	@ (800731c <_strtod_l+0x594>)
 800726a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800726e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007272:	4652      	mov	r2, sl
 8007274:	465b      	mov	r3, fp
 8007276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	4b28      	ldr	r3, [pc, #160]	@ (8007320 <_strtod_l+0x598>)
 8007280:	460a      	mov	r2, r1
 8007282:	400b      	ands	r3, r1
 8007284:	4927      	ldr	r1, [pc, #156]	@ (8007324 <_strtod_l+0x59c>)
 8007286:	428b      	cmp	r3, r1
 8007288:	4682      	mov	sl, r0
 800728a:	d898      	bhi.n	80071be <_strtod_l+0x436>
 800728c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007290:	428b      	cmp	r3, r1
 8007292:	bf86      	itte	hi
 8007294:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007328 <_strtod_l+0x5a0>
 8007298:	f04f 3aff 	movhi.w	sl, #4294967295
 800729c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80072a0:	2300      	movs	r3, #0
 80072a2:	9308      	str	r3, [sp, #32]
 80072a4:	e07a      	b.n	800739c <_strtod_l+0x614>
 80072a6:	07e2      	lsls	r2, r4, #31
 80072a8:	d505      	bpl.n	80072b6 <_strtod_l+0x52e>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	2301      	movs	r3, #1
 80072b6:	9a08      	ldr	r2, [sp, #32]
 80072b8:	3208      	adds	r2, #8
 80072ba:	3601      	adds	r6, #1
 80072bc:	1064      	asrs	r4, r4, #1
 80072be:	9208      	str	r2, [sp, #32]
 80072c0:	e7cd      	b.n	800725e <_strtod_l+0x4d6>
 80072c2:	d0ed      	beq.n	80072a0 <_strtod_l+0x518>
 80072c4:	4264      	negs	r4, r4
 80072c6:	f014 020f 	ands.w	r2, r4, #15
 80072ca:	d00a      	beq.n	80072e2 <_strtod_l+0x55a>
 80072cc:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <_strtod_l+0x590>)
 80072ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d2:	4650      	mov	r0, sl
 80072d4:	4659      	mov	r1, fp
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f9 fab7 	bl	800084c <__aeabi_ddiv>
 80072de:	4682      	mov	sl, r0
 80072e0:	468b      	mov	fp, r1
 80072e2:	1124      	asrs	r4, r4, #4
 80072e4:	d0dc      	beq.n	80072a0 <_strtod_l+0x518>
 80072e6:	2c1f      	cmp	r4, #31
 80072e8:	dd20      	ble.n	800732c <_strtod_l+0x5a4>
 80072ea:	2400      	movs	r4, #0
 80072ec:	46a0      	mov	r8, r4
 80072ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80072f0:	46a1      	mov	r9, r4
 80072f2:	9a05      	ldr	r2, [sp, #20]
 80072f4:	2322      	movs	r3, #34	@ 0x22
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	f04f 0b00 	mov.w	fp, #0
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	e768      	b.n	80071d4 <_strtod_l+0x44c>
 8007302:	bf00      	nop
 8007304:	08008c5d 	.word	0x08008c5d
 8007308:	08008e74 	.word	0x08008e74
 800730c:	08008c55 	.word	0x08008c55
 8007310:	08008c8c 	.word	0x08008c8c
 8007314:	0800901d 	.word	0x0800901d
 8007318:	08008da8 	.word	0x08008da8
 800731c:	08008d80 	.word	0x08008d80
 8007320:	7ff00000 	.word	0x7ff00000
 8007324:	7ca00000 	.word	0x7ca00000
 8007328:	7fefffff 	.word	0x7fefffff
 800732c:	f014 0310 	ands.w	r3, r4, #16
 8007330:	bf18      	it	ne
 8007332:	236a      	movne	r3, #106	@ 0x6a
 8007334:	4ea9      	ldr	r6, [pc, #676]	@ (80075dc <_strtod_l+0x854>)
 8007336:	9308      	str	r3, [sp, #32]
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	2300      	movs	r3, #0
 800733e:	07e2      	lsls	r2, r4, #31
 8007340:	d504      	bpl.n	800734c <_strtod_l+0x5c4>
 8007342:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	2301      	movs	r3, #1
 800734c:	1064      	asrs	r4, r4, #1
 800734e:	f106 0608 	add.w	r6, r6, #8
 8007352:	d1f4      	bne.n	800733e <_strtod_l+0x5b6>
 8007354:	b10b      	cbz	r3, 800735a <_strtod_l+0x5d2>
 8007356:	4682      	mov	sl, r0
 8007358:	468b      	mov	fp, r1
 800735a:	9b08      	ldr	r3, [sp, #32]
 800735c:	b1b3      	cbz	r3, 800738c <_strtod_l+0x604>
 800735e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007362:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007366:	2b00      	cmp	r3, #0
 8007368:	4659      	mov	r1, fp
 800736a:	dd0f      	ble.n	800738c <_strtod_l+0x604>
 800736c:	2b1f      	cmp	r3, #31
 800736e:	dd55      	ble.n	800741c <_strtod_l+0x694>
 8007370:	2b34      	cmp	r3, #52	@ 0x34
 8007372:	bfde      	ittt	le
 8007374:	f04f 33ff 	movle.w	r3, #4294967295
 8007378:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800737c:	4093      	lslle	r3, r2
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	bfcc      	ite	gt
 8007384:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007388:	ea03 0b01 	andle.w	fp, r3, r1
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	f7f9 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007398:	2800      	cmp	r0, #0
 800739a:	d1a6      	bne.n	80072ea <_strtod_l+0x562>
 800739c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073a2:	9805      	ldr	r0, [sp, #20]
 80073a4:	462b      	mov	r3, r5
 80073a6:	463a      	mov	r2, r7
 80073a8:	f7ff f8c6 	bl	8006538 <__s2b>
 80073ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f af05 	beq.w	80071be <_strtod_l+0x436>
 80073b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	eba9 0308 	sub.w	r3, r9, r8
 80073bc:	bfa8      	it	ge
 80073be:	2300      	movge	r3, #0
 80073c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80073c2:	2400      	movs	r4, #0
 80073c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80073ca:	46a0      	mov	r8, r4
 80073cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ce:	9805      	ldr	r0, [sp, #20]
 80073d0:	6859      	ldr	r1, [r3, #4]
 80073d2:	f7ff f809 	bl	80063e8 <_Balloc>
 80073d6:	4681      	mov	r9, r0
 80073d8:	2800      	cmp	r0, #0
 80073da:	f43f aef4 	beq.w	80071c6 <_strtod_l+0x43e>
 80073de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	3202      	adds	r2, #2
 80073e4:	f103 010c 	add.w	r1, r3, #12
 80073e8:	0092      	lsls	r2, r2, #2
 80073ea:	300c      	adds	r0, #12
 80073ec:	f000 fd72 	bl	8007ed4 <memcpy>
 80073f0:	ec4b ab10 	vmov	d0, sl, fp
 80073f4:	9805      	ldr	r0, [sp, #20]
 80073f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80073f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80073fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80073fe:	f7ff fbd7 	bl	8006bb0 <__d2b>
 8007402:	901a      	str	r0, [sp, #104]	@ 0x68
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f aede 	beq.w	80071c6 <_strtod_l+0x43e>
 800740a:	9805      	ldr	r0, [sp, #20]
 800740c:	2101      	movs	r1, #1
 800740e:	f7ff f929 	bl	8006664 <__i2b>
 8007412:	4680      	mov	r8, r0
 8007414:	b948      	cbnz	r0, 800742a <_strtod_l+0x6a2>
 8007416:	f04f 0800 	mov.w	r8, #0
 800741a:	e6d4      	b.n	80071c6 <_strtod_l+0x43e>
 800741c:	f04f 32ff 	mov.w	r2, #4294967295
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	ea03 0a0a 	and.w	sl, r3, sl
 8007428:	e7b0      	b.n	800738c <_strtod_l+0x604>
 800742a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800742c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800742e:	2d00      	cmp	r5, #0
 8007430:	bfab      	itete	ge
 8007432:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007434:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007436:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007438:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800743a:	bfac      	ite	ge
 800743c:	18ef      	addge	r7, r5, r3
 800743e:	1b5e      	sublt	r6, r3, r5
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	1aed      	subs	r5, r5, r3
 8007444:	4415      	add	r5, r2
 8007446:	4b66      	ldr	r3, [pc, #408]	@ (80075e0 <_strtod_l+0x858>)
 8007448:	3d01      	subs	r5, #1
 800744a:	429d      	cmp	r5, r3
 800744c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007450:	da50      	bge.n	80074f4 <_strtod_l+0x76c>
 8007452:	1b5b      	subs	r3, r3, r5
 8007454:	2b1f      	cmp	r3, #31
 8007456:	eba2 0203 	sub.w	r2, r2, r3
 800745a:	f04f 0101 	mov.w	r1, #1
 800745e:	dc3d      	bgt.n	80074dc <_strtod_l+0x754>
 8007460:	fa01 f303 	lsl.w	r3, r1, r3
 8007464:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007466:	2300      	movs	r3, #0
 8007468:	9310      	str	r3, [sp, #64]	@ 0x40
 800746a:	18bd      	adds	r5, r7, r2
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	42af      	cmp	r7, r5
 8007470:	4416      	add	r6, r2
 8007472:	441e      	add	r6, r3
 8007474:	463b      	mov	r3, r7
 8007476:	bfa8      	it	ge
 8007478:	462b      	movge	r3, r5
 800747a:	42b3      	cmp	r3, r6
 800747c:	bfa8      	it	ge
 800747e:	4633      	movge	r3, r6
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfc2      	ittt	gt
 8007484:	1aed      	subgt	r5, r5, r3
 8007486:	1af6      	subgt	r6, r6, r3
 8007488:	1aff      	subgt	r7, r7, r3
 800748a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd16      	ble.n	80074be <_strtod_l+0x736>
 8007490:	4641      	mov	r1, r8
 8007492:	9805      	ldr	r0, [sp, #20]
 8007494:	461a      	mov	r2, r3
 8007496:	f7ff f9a5 	bl	80067e4 <__pow5mult>
 800749a:	4680      	mov	r8, r0
 800749c:	2800      	cmp	r0, #0
 800749e:	d0ba      	beq.n	8007416 <_strtod_l+0x68e>
 80074a0:	4601      	mov	r1, r0
 80074a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	f7ff f8f3 	bl	8006690 <__multiply>
 80074aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f ae8a 	beq.w	80071c6 <_strtod_l+0x43e>
 80074b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b4:	9805      	ldr	r0, [sp, #20]
 80074b6:	f7fe ffd7 	bl	8006468 <_Bfree>
 80074ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80074be:	2d00      	cmp	r5, #0
 80074c0:	dc1d      	bgt.n	80074fe <_strtod_l+0x776>
 80074c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dd23      	ble.n	8007510 <_strtod_l+0x788>
 80074c8:	4649      	mov	r1, r9
 80074ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80074cc:	9805      	ldr	r0, [sp, #20]
 80074ce:	f7ff f989 	bl	80067e4 <__pow5mult>
 80074d2:	4681      	mov	r9, r0
 80074d4:	b9e0      	cbnz	r0, 8007510 <_strtod_l+0x788>
 80074d6:	f04f 0900 	mov.w	r9, #0
 80074da:	e674      	b.n	80071c6 <_strtod_l+0x43e>
 80074dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80074e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80074e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80074e8:	35e2      	adds	r5, #226	@ 0xe2
 80074ea:	fa01 f305 	lsl.w	r3, r1, r5
 80074ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80074f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80074f2:	e7ba      	b.n	800746a <_strtod_l+0x6e2>
 80074f4:	2300      	movs	r3, #0
 80074f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80074f8:	2301      	movs	r3, #1
 80074fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074fc:	e7b5      	b.n	800746a <_strtod_l+0x6e2>
 80074fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007500:	9805      	ldr	r0, [sp, #20]
 8007502:	462a      	mov	r2, r5
 8007504:	f7ff f9c8 	bl	8006898 <__lshift>
 8007508:	901a      	str	r0, [sp, #104]	@ 0x68
 800750a:	2800      	cmp	r0, #0
 800750c:	d1d9      	bne.n	80074c2 <_strtod_l+0x73a>
 800750e:	e65a      	b.n	80071c6 <_strtod_l+0x43e>
 8007510:	2e00      	cmp	r6, #0
 8007512:	dd07      	ble.n	8007524 <_strtod_l+0x79c>
 8007514:	4649      	mov	r1, r9
 8007516:	9805      	ldr	r0, [sp, #20]
 8007518:	4632      	mov	r2, r6
 800751a:	f7ff f9bd 	bl	8006898 <__lshift>
 800751e:	4681      	mov	r9, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d0d8      	beq.n	80074d6 <_strtod_l+0x74e>
 8007524:	2f00      	cmp	r7, #0
 8007526:	dd08      	ble.n	800753a <_strtod_l+0x7b2>
 8007528:	4641      	mov	r1, r8
 800752a:	9805      	ldr	r0, [sp, #20]
 800752c:	463a      	mov	r2, r7
 800752e:	f7ff f9b3 	bl	8006898 <__lshift>
 8007532:	4680      	mov	r8, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f ae46 	beq.w	80071c6 <_strtod_l+0x43e>
 800753a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800753c:	9805      	ldr	r0, [sp, #20]
 800753e:	464a      	mov	r2, r9
 8007540:	f7ff fa32 	bl	80069a8 <__mdiff>
 8007544:	4604      	mov	r4, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f ae3d 	beq.w	80071c6 <_strtod_l+0x43e>
 800754c:	68c3      	ldr	r3, [r0, #12]
 800754e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007550:	2300      	movs	r3, #0
 8007552:	60c3      	str	r3, [r0, #12]
 8007554:	4641      	mov	r1, r8
 8007556:	f7ff fa0b 	bl	8006970 <__mcmp>
 800755a:	2800      	cmp	r0, #0
 800755c:	da46      	bge.n	80075ec <_strtod_l+0x864>
 800755e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007560:	ea53 030a 	orrs.w	r3, r3, sl
 8007564:	d16c      	bne.n	8007640 <_strtod_l+0x8b8>
 8007566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800756a:	2b00      	cmp	r3, #0
 800756c:	d168      	bne.n	8007640 <_strtod_l+0x8b8>
 800756e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007572:	0d1b      	lsrs	r3, r3, #20
 8007574:	051b      	lsls	r3, r3, #20
 8007576:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800757a:	d961      	bls.n	8007640 <_strtod_l+0x8b8>
 800757c:	6963      	ldr	r3, [r4, #20]
 800757e:	b913      	cbnz	r3, 8007586 <_strtod_l+0x7fe>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	2b01      	cmp	r3, #1
 8007584:	dd5c      	ble.n	8007640 <_strtod_l+0x8b8>
 8007586:	4621      	mov	r1, r4
 8007588:	2201      	movs	r2, #1
 800758a:	9805      	ldr	r0, [sp, #20]
 800758c:	f7ff f984 	bl	8006898 <__lshift>
 8007590:	4641      	mov	r1, r8
 8007592:	4604      	mov	r4, r0
 8007594:	f7ff f9ec 	bl	8006970 <__mcmp>
 8007598:	2800      	cmp	r0, #0
 800759a:	dd51      	ble.n	8007640 <_strtod_l+0x8b8>
 800759c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075a0:	9a08      	ldr	r2, [sp, #32]
 80075a2:	0d1b      	lsrs	r3, r3, #20
 80075a4:	051b      	lsls	r3, r3, #20
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	d06b      	beq.n	8007682 <_strtod_l+0x8fa>
 80075aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075ae:	d868      	bhi.n	8007682 <_strtod_l+0x8fa>
 80075b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80075b4:	f67f ae9d 	bls.w	80072f2 <_strtod_l+0x56a>
 80075b8:	4b0a      	ldr	r3, [pc, #40]	@ (80075e4 <_strtod_l+0x85c>)
 80075ba:	4650      	mov	r0, sl
 80075bc:	4659      	mov	r1, fp
 80075be:	2200      	movs	r2, #0
 80075c0:	f7f9 f81a 	bl	80005f8 <__aeabi_dmul>
 80075c4:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <_strtod_l+0x860>)
 80075c6:	400b      	ands	r3, r1
 80075c8:	4682      	mov	sl, r0
 80075ca:	468b      	mov	fp, r1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f ae05 	bne.w	80071dc <_strtod_l+0x454>
 80075d2:	9a05      	ldr	r2, [sp, #20]
 80075d4:	2322      	movs	r3, #34	@ 0x22
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e600      	b.n	80071dc <_strtod_l+0x454>
 80075da:	bf00      	nop
 80075dc:	08008ea0 	.word	0x08008ea0
 80075e0:	fffffc02 	.word	0xfffffc02
 80075e4:	39500000 	.word	0x39500000
 80075e8:	7ff00000 	.word	0x7ff00000
 80075ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075f0:	d165      	bne.n	80076be <_strtod_l+0x936>
 80075f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80075f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075f8:	b35a      	cbz	r2, 8007652 <_strtod_l+0x8ca>
 80075fa:	4a9f      	ldr	r2, [pc, #636]	@ (8007878 <_strtod_l+0xaf0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d12b      	bne.n	8007658 <_strtod_l+0x8d0>
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	4651      	mov	r1, sl
 8007604:	b303      	cbz	r3, 8007648 <_strtod_l+0x8c0>
 8007606:	4b9d      	ldr	r3, [pc, #628]	@ (800787c <_strtod_l+0xaf4>)
 8007608:	465a      	mov	r2, fp
 800760a:	4013      	ands	r3, r2
 800760c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007610:	f04f 32ff 	mov.w	r2, #4294967295
 8007614:	d81b      	bhi.n	800764e <_strtod_l+0x8c6>
 8007616:	0d1b      	lsrs	r3, r3, #20
 8007618:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	4299      	cmp	r1, r3
 8007622:	d119      	bne.n	8007658 <_strtod_l+0x8d0>
 8007624:	4b96      	ldr	r3, [pc, #600]	@ (8007880 <_strtod_l+0xaf8>)
 8007626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007628:	429a      	cmp	r2, r3
 800762a:	d102      	bne.n	8007632 <_strtod_l+0x8aa>
 800762c:	3101      	adds	r1, #1
 800762e:	f43f adca 	beq.w	80071c6 <_strtod_l+0x43e>
 8007632:	4b92      	ldr	r3, [pc, #584]	@ (800787c <_strtod_l+0xaf4>)
 8007634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007636:	401a      	ands	r2, r3
 8007638:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800763c:	f04f 0a00 	mov.w	sl, #0
 8007640:	9b08      	ldr	r3, [sp, #32]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1b8      	bne.n	80075b8 <_strtod_l+0x830>
 8007646:	e5c9      	b.n	80071dc <_strtod_l+0x454>
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	e7e8      	b.n	8007620 <_strtod_l+0x898>
 800764e:	4613      	mov	r3, r2
 8007650:	e7e6      	b.n	8007620 <_strtod_l+0x898>
 8007652:	ea53 030a 	orrs.w	r3, r3, sl
 8007656:	d0a1      	beq.n	800759c <_strtod_l+0x814>
 8007658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800765a:	b1db      	cbz	r3, 8007694 <_strtod_l+0x90c>
 800765c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800765e:	4213      	tst	r3, r2
 8007660:	d0ee      	beq.n	8007640 <_strtod_l+0x8b8>
 8007662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007664:	9a08      	ldr	r2, [sp, #32]
 8007666:	4650      	mov	r0, sl
 8007668:	4659      	mov	r1, fp
 800766a:	b1bb      	cbz	r3, 800769c <_strtod_l+0x914>
 800766c:	f7ff fb6e 	bl	8006d4c <sulp>
 8007670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007674:	ec53 2b10 	vmov	r2, r3, d0
 8007678:	f7f8 fe08 	bl	800028c <__adddf3>
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	e7de      	b.n	8007640 <_strtod_l+0x8b8>
 8007682:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007686:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800768a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800768e:	f04f 3aff 	mov.w	sl, #4294967295
 8007692:	e7d5      	b.n	8007640 <_strtod_l+0x8b8>
 8007694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007696:	ea13 0f0a 	tst.w	r3, sl
 800769a:	e7e1      	b.n	8007660 <_strtod_l+0x8d8>
 800769c:	f7ff fb56 	bl	8006d4c <sulp>
 80076a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076a4:	ec53 2b10 	vmov	r2, r3, d0
 80076a8:	f7f8 fdee 	bl	8000288 <__aeabi_dsub>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4682      	mov	sl, r0
 80076b2:	468b      	mov	fp, r1
 80076b4:	f7f9 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0c1      	beq.n	8007640 <_strtod_l+0x8b8>
 80076bc:	e619      	b.n	80072f2 <_strtod_l+0x56a>
 80076be:	4641      	mov	r1, r8
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7ff facd 	bl	8006c60 <__ratio>
 80076c6:	ec57 6b10 	vmov	r6, r7, d0
 80076ca:	2200      	movs	r2, #0
 80076cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f9 fa0c 	bl	8000af0 <__aeabi_dcmple>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d06f      	beq.n	80077bc <_strtod_l+0xa34>
 80076dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d17a      	bne.n	80077d8 <_strtod_l+0xa50>
 80076e2:	f1ba 0f00 	cmp.w	sl, #0
 80076e6:	d158      	bne.n	800779a <_strtod_l+0xa12>
 80076e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d15a      	bne.n	80077a8 <_strtod_l+0xa20>
 80076f2:	4b64      	ldr	r3, [pc, #400]	@ (8007884 <_strtod_l+0xafc>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f9 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d159      	bne.n	80077b6 <_strtod_l+0xa2e>
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	4b60      	ldr	r3, [pc, #384]	@ (8007888 <_strtod_l+0xb00>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 ff75 	bl	80005f8 <__aeabi_dmul>
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007716:	9606      	str	r6, [sp, #24]
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800771e:	4d57      	ldr	r5, [pc, #348]	@ (800787c <_strtod_l+0xaf4>)
 8007720:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007726:	401d      	ands	r5, r3
 8007728:	4b58      	ldr	r3, [pc, #352]	@ (800788c <_strtod_l+0xb04>)
 800772a:	429d      	cmp	r5, r3
 800772c:	f040 80b2 	bne.w	8007894 <_strtod_l+0xb0c>
 8007730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007732:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007736:	ec4b ab10 	vmov	d0, sl, fp
 800773a:	f7ff f9c9 	bl	8006ad0 <__ulp>
 800773e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007742:	ec51 0b10 	vmov	r0, r1, d0
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	4652      	mov	r2, sl
 800774c:	465b      	mov	r3, fp
 800774e:	f7f8 fd9d 	bl	800028c <__adddf3>
 8007752:	460b      	mov	r3, r1
 8007754:	4949      	ldr	r1, [pc, #292]	@ (800787c <_strtod_l+0xaf4>)
 8007756:	4a4e      	ldr	r2, [pc, #312]	@ (8007890 <_strtod_l+0xb08>)
 8007758:	4019      	ands	r1, r3
 800775a:	4291      	cmp	r1, r2
 800775c:	4682      	mov	sl, r0
 800775e:	d942      	bls.n	80077e6 <_strtod_l+0xa5e>
 8007760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007762:	4b47      	ldr	r3, [pc, #284]	@ (8007880 <_strtod_l+0xaf8>)
 8007764:	429a      	cmp	r2, r3
 8007766:	d103      	bne.n	8007770 <_strtod_l+0x9e8>
 8007768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800776a:	3301      	adds	r3, #1
 800776c:	f43f ad2b 	beq.w	80071c6 <_strtod_l+0x43e>
 8007770:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007880 <_strtod_l+0xaf8>
 8007774:	f04f 3aff 	mov.w	sl, #4294967295
 8007778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800777a:	9805      	ldr	r0, [sp, #20]
 800777c:	f7fe fe74 	bl	8006468 <_Bfree>
 8007780:	9805      	ldr	r0, [sp, #20]
 8007782:	4649      	mov	r1, r9
 8007784:	f7fe fe70 	bl	8006468 <_Bfree>
 8007788:	9805      	ldr	r0, [sp, #20]
 800778a:	4641      	mov	r1, r8
 800778c:	f7fe fe6c 	bl	8006468 <_Bfree>
 8007790:	9805      	ldr	r0, [sp, #20]
 8007792:	4621      	mov	r1, r4
 8007794:	f7fe fe68 	bl	8006468 <_Bfree>
 8007798:	e618      	b.n	80073cc <_strtod_l+0x644>
 800779a:	f1ba 0f01 	cmp.w	sl, #1
 800779e:	d103      	bne.n	80077a8 <_strtod_l+0xa20>
 80077a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f43f ada5 	beq.w	80072f2 <_strtod_l+0x56a>
 80077a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007858 <_strtod_l+0xad0>
 80077ac:	4f35      	ldr	r7, [pc, #212]	@ (8007884 <_strtod_l+0xafc>)
 80077ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077b2:	2600      	movs	r6, #0
 80077b4:	e7b1      	b.n	800771a <_strtod_l+0x992>
 80077b6:	4f34      	ldr	r7, [pc, #208]	@ (8007888 <_strtod_l+0xb00>)
 80077b8:	2600      	movs	r6, #0
 80077ba:	e7aa      	b.n	8007712 <_strtod_l+0x98a>
 80077bc:	4b32      	ldr	r3, [pc, #200]	@ (8007888 <_strtod_l+0xb00>)
 80077be:	4630      	mov	r0, r6
 80077c0:	4639      	mov	r1, r7
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7f8 ff18 	bl	80005f8 <__aeabi_dmul>
 80077c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d09f      	beq.n	8007712 <_strtod_l+0x98a>
 80077d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077d6:	e7a0      	b.n	800771a <_strtod_l+0x992>
 80077d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007860 <_strtod_l+0xad8>
 80077dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077e0:	ec57 6b17 	vmov	r6, r7, d7
 80077e4:	e799      	b.n	800771a <_strtod_l+0x992>
 80077e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1c1      	bne.n	8007778 <_strtod_l+0x9f0>
 80077f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077f8:	0d1b      	lsrs	r3, r3, #20
 80077fa:	051b      	lsls	r3, r3, #20
 80077fc:	429d      	cmp	r5, r3
 80077fe:	d1bb      	bne.n	8007778 <_strtod_l+0x9f0>
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 fa58 	bl	8000cb8 <__aeabi_d2lz>
 8007808:	f7f8 fec8 	bl	800059c <__aeabi_l2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 fd38 	bl	8000288 <__aeabi_dsub>
 8007818:	460b      	mov	r3, r1
 800781a:	4602      	mov	r2, r0
 800781c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007820:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007826:	ea46 060a 	orr.w	r6, r6, sl
 800782a:	431e      	orrs	r6, r3
 800782c:	d06f      	beq.n	800790e <_strtod_l+0xb86>
 800782e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007868 <_strtod_l+0xae0>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7f9 f952 	bl	8000adc <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f47f accf 	bne.w	80071dc <_strtod_l+0x454>
 800783e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007870 <_strtod_l+0xae8>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007848:	f7f9 f966 	bl	8000b18 <__aeabi_dcmpgt>
 800784c:	2800      	cmp	r0, #0
 800784e:	d093      	beq.n	8007778 <_strtod_l+0x9f0>
 8007850:	e4c4      	b.n	80071dc <_strtod_l+0x454>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	00000000 	.word	0x00000000
 800785c:	bff00000 	.word	0xbff00000
 8007860:	00000000 	.word	0x00000000
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	94a03595 	.word	0x94a03595
 800786c:	3fdfffff 	.word	0x3fdfffff
 8007870:	35afe535 	.word	0x35afe535
 8007874:	3fe00000 	.word	0x3fe00000
 8007878:	000fffff 	.word	0x000fffff
 800787c:	7ff00000 	.word	0x7ff00000
 8007880:	7fefffff 	.word	0x7fefffff
 8007884:	3ff00000 	.word	0x3ff00000
 8007888:	3fe00000 	.word	0x3fe00000
 800788c:	7fe00000 	.word	0x7fe00000
 8007890:	7c9fffff 	.word	0x7c9fffff
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	b323      	cbz	r3, 80078e2 <_strtod_l+0xb5a>
 8007898:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800789c:	d821      	bhi.n	80078e2 <_strtod_l+0xb5a>
 800789e:	a328      	add	r3, pc, #160	@ (adr r3, 8007940 <_strtod_l+0xbb8>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f9 f922 	bl	8000af0 <__aeabi_dcmple>
 80078ac:	b1a0      	cbz	r0, 80078d8 <_strtod_l+0xb50>
 80078ae:	4639      	mov	r1, r7
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7f9 f979 	bl	8000ba8 <__aeabi_d2uiz>
 80078b6:	2801      	cmp	r0, #1
 80078b8:	bf38      	it	cc
 80078ba:	2001      	movcc	r0, #1
 80078bc:	f7f8 fe22 	bl	8000504 <__aeabi_ui2d>
 80078c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	b9fb      	cbnz	r3, 8007908 <_strtod_l+0xb80>
 80078c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80078ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80078d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80078d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80078de:	1b5b      	subs	r3, r3, r5
 80078e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80078e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80078ea:	f7ff f8f1 	bl	8006ad0 <__ulp>
 80078ee:	4650      	mov	r0, sl
 80078f0:	ec53 2b10 	vmov	r2, r3, d0
 80078f4:	4659      	mov	r1, fp
 80078f6:	f7f8 fe7f 	bl	80005f8 <__aeabi_dmul>
 80078fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078fe:	f7f8 fcc5 	bl	800028c <__adddf3>
 8007902:	4682      	mov	sl, r0
 8007904:	468b      	mov	fp, r1
 8007906:	e770      	b.n	80077ea <_strtod_l+0xa62>
 8007908:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800790c:	e7e0      	b.n	80078d0 <_strtod_l+0xb48>
 800790e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007948 <_strtod_l+0xbc0>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f9 f8e2 	bl	8000adc <__aeabi_dcmplt>
 8007918:	e798      	b.n	800784c <_strtod_l+0xac4>
 800791a:	2300      	movs	r3, #0
 800791c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800791e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	f7ff ba6d 	b.w	8006e02 <_strtod_l+0x7a>
 8007928:	2a65      	cmp	r2, #101	@ 0x65
 800792a:	f43f ab66 	beq.w	8006ffa <_strtod_l+0x272>
 800792e:	2a45      	cmp	r2, #69	@ 0x45
 8007930:	f43f ab63 	beq.w	8006ffa <_strtod_l+0x272>
 8007934:	2301      	movs	r3, #1
 8007936:	f7ff bb9e 	b.w	8007076 <_strtod_l+0x2ee>
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w
 8007940:	ffc00000 	.word	0xffc00000
 8007944:	41dfffff 	.word	0x41dfffff
 8007948:	94a03595 	.word	0x94a03595
 800794c:	3fcfffff 	.word	0x3fcfffff

08007950 <_strtod_r>:
 8007950:	4b01      	ldr	r3, [pc, #4]	@ (8007958 <_strtod_r+0x8>)
 8007952:	f7ff ba19 	b.w	8006d88 <_strtod_l>
 8007956:	bf00      	nop
 8007958:	20000068 	.word	0x20000068

0800795c <_strtol_l.constprop.0>:
 800795c:	2b24      	cmp	r3, #36	@ 0x24
 800795e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007962:	4686      	mov	lr, r0
 8007964:	4690      	mov	r8, r2
 8007966:	d801      	bhi.n	800796c <_strtol_l.constprop.0+0x10>
 8007968:	2b01      	cmp	r3, #1
 800796a:	d106      	bne.n	800797a <_strtol_l.constprop.0+0x1e>
 800796c:	f7fd fdba 	bl	80054e4 <__errno>
 8007970:	2316      	movs	r3, #22
 8007972:	6003      	str	r3, [r0, #0]
 8007974:	2000      	movs	r0, #0
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	4834      	ldr	r0, [pc, #208]	@ (8007a4c <_strtol_l.constprop.0+0xf0>)
 800797c:	460d      	mov	r5, r1
 800797e:	462a      	mov	r2, r5
 8007980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007984:	5d06      	ldrb	r6, [r0, r4]
 8007986:	f016 0608 	ands.w	r6, r6, #8
 800798a:	d1f8      	bne.n	800797e <_strtol_l.constprop.0+0x22>
 800798c:	2c2d      	cmp	r4, #45	@ 0x2d
 800798e:	d12d      	bne.n	80079ec <_strtol_l.constprop.0+0x90>
 8007990:	782c      	ldrb	r4, [r5, #0]
 8007992:	2601      	movs	r6, #1
 8007994:	1c95      	adds	r5, r2, #2
 8007996:	f033 0210 	bics.w	r2, r3, #16
 800799a:	d109      	bne.n	80079b0 <_strtol_l.constprop.0+0x54>
 800799c:	2c30      	cmp	r4, #48	@ 0x30
 800799e:	d12a      	bne.n	80079f6 <_strtol_l.constprop.0+0x9a>
 80079a0:	782a      	ldrb	r2, [r5, #0]
 80079a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079a6:	2a58      	cmp	r2, #88	@ 0x58
 80079a8:	d125      	bne.n	80079f6 <_strtol_l.constprop.0+0x9a>
 80079aa:	786c      	ldrb	r4, [r5, #1]
 80079ac:	2310      	movs	r3, #16
 80079ae:	3502      	adds	r5, #2
 80079b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079b8:	2200      	movs	r2, #0
 80079ba:	fbbc f9f3 	udiv	r9, ip, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80079c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079c8:	2f09      	cmp	r7, #9
 80079ca:	d81b      	bhi.n	8007a04 <_strtol_l.constprop.0+0xa8>
 80079cc:	463c      	mov	r4, r7
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	dd27      	ble.n	8007a22 <_strtol_l.constprop.0+0xc6>
 80079d2:	1c57      	adds	r7, r2, #1
 80079d4:	d007      	beq.n	80079e6 <_strtol_l.constprop.0+0x8a>
 80079d6:	4581      	cmp	r9, r0
 80079d8:	d320      	bcc.n	8007a1c <_strtol_l.constprop.0+0xc0>
 80079da:	d101      	bne.n	80079e0 <_strtol_l.constprop.0+0x84>
 80079dc:	45a2      	cmp	sl, r4
 80079de:	db1d      	blt.n	8007a1c <_strtol_l.constprop.0+0xc0>
 80079e0:	fb00 4003 	mla	r0, r0, r3, r4
 80079e4:	2201      	movs	r2, #1
 80079e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ea:	e7eb      	b.n	80079c4 <_strtol_l.constprop.0+0x68>
 80079ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80079ee:	bf04      	itt	eq
 80079f0:	782c      	ldrbeq	r4, [r5, #0]
 80079f2:	1c95      	addeq	r5, r2, #2
 80079f4:	e7cf      	b.n	8007996 <_strtol_l.constprop.0+0x3a>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1da      	bne.n	80079b0 <_strtol_l.constprop.0+0x54>
 80079fa:	2c30      	cmp	r4, #48	@ 0x30
 80079fc:	bf0c      	ite	eq
 80079fe:	2308      	moveq	r3, #8
 8007a00:	230a      	movne	r3, #10
 8007a02:	e7d5      	b.n	80079b0 <_strtol_l.constprop.0+0x54>
 8007a04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a08:	2f19      	cmp	r7, #25
 8007a0a:	d801      	bhi.n	8007a10 <_strtol_l.constprop.0+0xb4>
 8007a0c:	3c37      	subs	r4, #55	@ 0x37
 8007a0e:	e7de      	b.n	80079ce <_strtol_l.constprop.0+0x72>
 8007a10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a14:	2f19      	cmp	r7, #25
 8007a16:	d804      	bhi.n	8007a22 <_strtol_l.constprop.0+0xc6>
 8007a18:	3c57      	subs	r4, #87	@ 0x57
 8007a1a:	e7d8      	b.n	80079ce <_strtol_l.constprop.0+0x72>
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a20:	e7e1      	b.n	80079e6 <_strtol_l.constprop.0+0x8a>
 8007a22:	1c53      	adds	r3, r2, #1
 8007a24:	d108      	bne.n	8007a38 <_strtol_l.constprop.0+0xdc>
 8007a26:	2322      	movs	r3, #34	@ 0x22
 8007a28:	f8ce 3000 	str.w	r3, [lr]
 8007a2c:	4660      	mov	r0, ip
 8007a2e:	f1b8 0f00 	cmp.w	r8, #0
 8007a32:	d0a0      	beq.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a34:	1e69      	subs	r1, r5, #1
 8007a36:	e006      	b.n	8007a46 <_strtol_l.constprop.0+0xea>
 8007a38:	b106      	cbz	r6, 8007a3c <_strtol_l.constprop.0+0xe0>
 8007a3a:	4240      	negs	r0, r0
 8007a3c:	f1b8 0f00 	cmp.w	r8, #0
 8007a40:	d099      	beq.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1f6      	bne.n	8007a34 <_strtol_l.constprop.0+0xd8>
 8007a46:	f8c8 1000 	str.w	r1, [r8]
 8007a4a:	e794      	b.n	8007976 <_strtol_l.constprop.0+0x1a>
 8007a4c:	08008ec9 	.word	0x08008ec9

08007a50 <_strtol_r>:
 8007a50:	f7ff bf84 	b.w	800795c <_strtol_l.constprop.0>

08007a54 <__ssputs_r>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	688e      	ldr	r6, [r1, #8]
 8007a5a:	461f      	mov	r7, r3
 8007a5c:	42be      	cmp	r6, r7
 8007a5e:	680b      	ldr	r3, [r1, #0]
 8007a60:	4682      	mov	sl, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	4690      	mov	r8, r2
 8007a66:	d82d      	bhi.n	8007ac4 <__ssputs_r+0x70>
 8007a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a70:	d026      	beq.n	8007ac0 <__ssputs_r+0x6c>
 8007a72:	6965      	ldr	r5, [r4, #20]
 8007a74:	6909      	ldr	r1, [r1, #16]
 8007a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a7a:	eba3 0901 	sub.w	r9, r3, r1
 8007a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a82:	1c7b      	adds	r3, r7, #1
 8007a84:	444b      	add	r3, r9
 8007a86:	106d      	asrs	r5, r5, #1
 8007a88:	429d      	cmp	r5, r3
 8007a8a:	bf38      	it	cc
 8007a8c:	461d      	movcc	r5, r3
 8007a8e:	0553      	lsls	r3, r2, #21
 8007a90:	d527      	bpl.n	8007ae2 <__ssputs_r+0x8e>
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7fe fc1c 	bl	80062d0 <_malloc_r>
 8007a98:	4606      	mov	r6, r0
 8007a9a:	b360      	cbz	r0, 8007af6 <__ssputs_r+0xa2>
 8007a9c:	6921      	ldr	r1, [r4, #16]
 8007a9e:	464a      	mov	r2, r9
 8007aa0:	f000 fa18 	bl	8007ed4 <memcpy>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	6126      	str	r6, [r4, #16]
 8007ab2:	6165      	str	r5, [r4, #20]
 8007ab4:	444e      	add	r6, r9
 8007ab6:	eba5 0509 	sub.w	r5, r5, r9
 8007aba:	6026      	str	r6, [r4, #0]
 8007abc:	60a5      	str	r5, [r4, #8]
 8007abe:	463e      	mov	r6, r7
 8007ac0:	42be      	cmp	r6, r7
 8007ac2:	d900      	bls.n	8007ac6 <__ssputs_r+0x72>
 8007ac4:	463e      	mov	r6, r7
 8007ac6:	6820      	ldr	r0, [r4, #0]
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4641      	mov	r1, r8
 8007acc:	f000 f9c6 	bl	8007e5c <memmove>
 8007ad0:	68a3      	ldr	r3, [r4, #8]
 8007ad2:	1b9b      	subs	r3, r3, r6
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4433      	add	r3, r6
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	2000      	movs	r0, #0
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f000 fd89 	bl	80085fa <_realloc_r>
 8007ae8:	4606      	mov	r6, r0
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d1e0      	bne.n	8007ab0 <__ssputs_r+0x5c>
 8007aee:	6921      	ldr	r1, [r4, #16]
 8007af0:	4650      	mov	r0, sl
 8007af2:	f7fe fb79 	bl	80061e8 <_free_r>
 8007af6:	230c      	movs	r3, #12
 8007af8:	f8ca 3000 	str.w	r3, [sl]
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e7e9      	b.n	8007ade <__ssputs_r+0x8a>
	...

08007b0c <_svfiprintf_r>:
 8007b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	4698      	mov	r8, r3
 8007b12:	898b      	ldrh	r3, [r1, #12]
 8007b14:	061b      	lsls	r3, r3, #24
 8007b16:	b09d      	sub	sp, #116	@ 0x74
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	d510      	bpl.n	8007b42 <_svfiprintf_r+0x36>
 8007b20:	690b      	ldr	r3, [r1, #16]
 8007b22:	b973      	cbnz	r3, 8007b42 <_svfiprintf_r+0x36>
 8007b24:	2140      	movs	r1, #64	@ 0x40
 8007b26:	f7fe fbd3 	bl	80062d0 <_malloc_r>
 8007b2a:	6028      	str	r0, [r5, #0]
 8007b2c:	6128      	str	r0, [r5, #16]
 8007b2e:	b930      	cbnz	r0, 8007b3e <_svfiprintf_r+0x32>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	b01d      	add	sp, #116	@ 0x74
 8007b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	616b      	str	r3, [r5, #20]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b46:	2320      	movs	r3, #32
 8007b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b50:	2330      	movs	r3, #48	@ 0x30
 8007b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007cf0 <_svfiprintf_r+0x1e4>
 8007b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b5a:	f04f 0901 	mov.w	r9, #1
 8007b5e:	4623      	mov	r3, r4
 8007b60:	469a      	mov	sl, r3
 8007b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b66:	b10a      	cbz	r2, 8007b6c <_svfiprintf_r+0x60>
 8007b68:	2a25      	cmp	r2, #37	@ 0x25
 8007b6a:	d1f9      	bne.n	8007b60 <_svfiprintf_r+0x54>
 8007b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b70:	d00b      	beq.n	8007b8a <_svfiprintf_r+0x7e>
 8007b72:	465b      	mov	r3, fp
 8007b74:	4622      	mov	r2, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ff6b 	bl	8007a54 <__ssputs_r>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f000 80a7 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b86:	445a      	add	r2, fp
 8007b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 809f 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bac:	4654      	mov	r4, sl
 8007bae:	2205      	movs	r2, #5
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	484e      	ldr	r0, [pc, #312]	@ (8007cf0 <_svfiprintf_r+0x1e4>)
 8007bb6:	f7f8 fb0b 	bl	80001d0 <memchr>
 8007bba:	9a04      	ldr	r2, [sp, #16]
 8007bbc:	b9d8      	cbnz	r0, 8007bf6 <_svfiprintf_r+0xea>
 8007bbe:	06d0      	lsls	r0, r2, #27
 8007bc0:	bf44      	itt	mi
 8007bc2:	2320      	movmi	r3, #32
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bc8:	0711      	lsls	r1, r2, #28
 8007bca:	bf44      	itt	mi
 8007bcc:	232b      	movmi	r3, #43	@ 0x2b
 8007bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bd8:	d015      	beq.n	8007c06 <_svfiprintf_r+0xfa>
 8007bda:	9a07      	ldr	r2, [sp, #28]
 8007bdc:	4654      	mov	r4, sl
 8007bde:	2000      	movs	r0, #0
 8007be0:	f04f 0c0a 	mov.w	ip, #10
 8007be4:	4621      	mov	r1, r4
 8007be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bea:	3b30      	subs	r3, #48	@ 0x30
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	d94b      	bls.n	8007c88 <_svfiprintf_r+0x17c>
 8007bf0:	b1b0      	cbz	r0, 8007c20 <_svfiprintf_r+0x114>
 8007bf2:	9207      	str	r2, [sp, #28]
 8007bf4:	e014      	b.n	8007c20 <_svfiprintf_r+0x114>
 8007bf6:	eba0 0308 	sub.w	r3, r0, r8
 8007bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	46a2      	mov	sl, r4
 8007c04:	e7d2      	b.n	8007bac <_svfiprintf_r+0xa0>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d19      	adds	r1, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbb      	ittet	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	f042 0202 	orrlt.w	r2, r2, #2
 8007c18:	9307      	strge	r3, [sp, #28]
 8007c1a:	9307      	strlt	r3, [sp, #28]
 8007c1c:	bfb8      	it	lt
 8007c1e:	9204      	strlt	r2, [sp, #16]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c24:	d10a      	bne.n	8007c3c <_svfiprintf_r+0x130>
 8007c26:	7863      	ldrb	r3, [r4, #1]
 8007c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2a:	d132      	bne.n	8007c92 <_svfiprintf_r+0x186>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c38:	3402      	adds	r4, #2
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d00 <_svfiprintf_r+0x1f4>
 8007c40:	7821      	ldrb	r1, [r4, #0]
 8007c42:	2203      	movs	r2, #3
 8007c44:	4650      	mov	r0, sl
 8007c46:	f7f8 fac3 	bl	80001d0 <memchr>
 8007c4a:	b138      	cbz	r0, 8007c5c <_svfiprintf_r+0x150>
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	eba0 000a 	sub.w	r0, r0, sl
 8007c52:	2240      	movs	r2, #64	@ 0x40
 8007c54:	4082      	lsls	r2, r0
 8007c56:	4313      	orrs	r3, r2
 8007c58:	3401      	adds	r4, #1
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c60:	4824      	ldr	r0, [pc, #144]	@ (8007cf4 <_svfiprintf_r+0x1e8>)
 8007c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c66:	2206      	movs	r2, #6
 8007c68:	f7f8 fab2 	bl	80001d0 <memchr>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d036      	beq.n	8007cde <_svfiprintf_r+0x1d2>
 8007c70:	4b21      	ldr	r3, [pc, #132]	@ (8007cf8 <_svfiprintf_r+0x1ec>)
 8007c72:	bb1b      	cbnz	r3, 8007cbc <_svfiprintf_r+0x1b0>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c82:	4433      	add	r3, r6
 8007c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c86:	e76a      	b.n	8007b5e <_svfiprintf_r+0x52>
 8007c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	2001      	movs	r0, #1
 8007c90:	e7a8      	b.n	8007be4 <_svfiprintf_r+0xd8>
 8007c92:	2300      	movs	r3, #0
 8007c94:	3401      	adds	r4, #1
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca4:	3a30      	subs	r2, #48	@ 0x30
 8007ca6:	2a09      	cmp	r2, #9
 8007ca8:	d903      	bls.n	8007cb2 <_svfiprintf_r+0x1a6>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c6      	beq.n	8007c3c <_svfiprintf_r+0x130>
 8007cae:	9105      	str	r1, [sp, #20]
 8007cb0:	e7c4      	b.n	8007c3c <_svfiprintf_r+0x130>
 8007cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e7f0      	b.n	8007c9e <_svfiprintf_r+0x192>
 8007cbc:	ab03      	add	r3, sp, #12
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cfc <_svfiprintf_r+0x1f0>)
 8007cc4:	a904      	add	r1, sp, #16
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f7fc fcc8 	bl	800465c <_printf_float>
 8007ccc:	1c42      	adds	r2, r0, #1
 8007cce:	4606      	mov	r6, r0
 8007cd0:	d1d6      	bne.n	8007c80 <_svfiprintf_r+0x174>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	065b      	lsls	r3, r3, #25
 8007cd6:	f53f af2d 	bmi.w	8007b34 <_svfiprintf_r+0x28>
 8007cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cdc:	e72c      	b.n	8007b38 <_svfiprintf_r+0x2c>
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <_svfiprintf_r+0x1f0>)
 8007ce6:	a904      	add	r1, sp, #16
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7fc ff4f 	bl	8004b8c <_printf_i>
 8007cee:	e7ed      	b.n	8007ccc <_svfiprintf_r+0x1c0>
 8007cf0:	08008fc9 	.word	0x08008fc9
 8007cf4:	08008fd3 	.word	0x08008fd3
 8007cf8:	0800465d 	.word	0x0800465d
 8007cfc:	08007a55 	.word	0x08007a55
 8007d00:	08008fcf 	.word	0x08008fcf

08007d04 <__sflush_r>:
 8007d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	0716      	lsls	r6, r2, #28
 8007d0e:	4605      	mov	r5, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	d454      	bmi.n	8007dbe <__sflush_r+0xba>
 8007d14:	684b      	ldr	r3, [r1, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	dc02      	bgt.n	8007d20 <__sflush_r+0x1c>
 8007d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dd48      	ble.n	8007db2 <__sflush_r+0xae>
 8007d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d045      	beq.n	8007db2 <__sflush_r+0xae>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d2c:	682f      	ldr	r7, [r5, #0]
 8007d2e:	6a21      	ldr	r1, [r4, #32]
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	d030      	beq.n	8007d96 <__sflush_r+0x92>
 8007d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	0759      	lsls	r1, r3, #29
 8007d3a:	d505      	bpl.n	8007d48 <__sflush_r+0x44>
 8007d3c:	6863      	ldr	r3, [r4, #4]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d42:	b10b      	cbz	r3, 8007d48 <__sflush_r+0x44>
 8007d44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d4c:	6a21      	ldr	r1, [r4, #32]
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b0      	blx	r6
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	d106      	bne.n	8007d66 <__sflush_r+0x62>
 8007d58:	6829      	ldr	r1, [r5, #0]
 8007d5a:	291d      	cmp	r1, #29
 8007d5c:	d82b      	bhi.n	8007db6 <__sflush_r+0xb2>
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e08 <__sflush_r+0x104>)
 8007d60:	410a      	asrs	r2, r1
 8007d62:	07d6      	lsls	r6, r2, #31
 8007d64:	d427      	bmi.n	8007db6 <__sflush_r+0xb2>
 8007d66:	2200      	movs	r2, #0
 8007d68:	6062      	str	r2, [r4, #4]
 8007d6a:	04d9      	lsls	r1, r3, #19
 8007d6c:	6922      	ldr	r2, [r4, #16]
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	d504      	bpl.n	8007d7c <__sflush_r+0x78>
 8007d72:	1c42      	adds	r2, r0, #1
 8007d74:	d101      	bne.n	8007d7a <__sflush_r+0x76>
 8007d76:	682b      	ldr	r3, [r5, #0]
 8007d78:	b903      	cbnz	r3, 8007d7c <__sflush_r+0x78>
 8007d7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d7e:	602f      	str	r7, [r5, #0]
 8007d80:	b1b9      	cbz	r1, 8007db2 <__sflush_r+0xae>
 8007d82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d002      	beq.n	8007d90 <__sflush_r+0x8c>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7fe fa2c 	bl	80061e8 <_free_r>
 8007d90:	2300      	movs	r3, #0
 8007d92:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d94:	e00d      	b.n	8007db2 <__sflush_r+0xae>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b0      	blx	r6
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	1c50      	adds	r0, r2, #1
 8007da0:	d1c9      	bne.n	8007d36 <__sflush_r+0x32>
 8007da2:	682b      	ldr	r3, [r5, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0c6      	beq.n	8007d36 <__sflush_r+0x32>
 8007da8:	2b1d      	cmp	r3, #29
 8007daa:	d001      	beq.n	8007db0 <__sflush_r+0xac>
 8007dac:	2b16      	cmp	r3, #22
 8007dae:	d11e      	bne.n	8007dee <__sflush_r+0xea>
 8007db0:	602f      	str	r7, [r5, #0]
 8007db2:	2000      	movs	r0, #0
 8007db4:	e022      	b.n	8007dfc <__sflush_r+0xf8>
 8007db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dba:	b21b      	sxth	r3, r3
 8007dbc:	e01b      	b.n	8007df6 <__sflush_r+0xf2>
 8007dbe:	690f      	ldr	r7, [r1, #16]
 8007dc0:	2f00      	cmp	r7, #0
 8007dc2:	d0f6      	beq.n	8007db2 <__sflush_r+0xae>
 8007dc4:	0793      	lsls	r3, r2, #30
 8007dc6:	680e      	ldr	r6, [r1, #0]
 8007dc8:	bf08      	it	eq
 8007dca:	694b      	ldreq	r3, [r1, #20]
 8007dcc:	600f      	str	r7, [r1, #0]
 8007dce:	bf18      	it	ne
 8007dd0:	2300      	movne	r3, #0
 8007dd2:	eba6 0807 	sub.w	r8, r6, r7
 8007dd6:	608b      	str	r3, [r1, #8]
 8007dd8:	f1b8 0f00 	cmp.w	r8, #0
 8007ddc:	dde9      	ble.n	8007db2 <__sflush_r+0xae>
 8007dde:	6a21      	ldr	r1, [r4, #32]
 8007de0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007de2:	4643      	mov	r3, r8
 8007de4:	463a      	mov	r2, r7
 8007de6:	4628      	mov	r0, r5
 8007de8:	47b0      	blx	r6
 8007dea:	2800      	cmp	r0, #0
 8007dec:	dc08      	bgt.n	8007e00 <__sflush_r+0xfc>
 8007dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	4407      	add	r7, r0
 8007e02:	eba8 0800 	sub.w	r8, r8, r0
 8007e06:	e7e7      	b.n	8007dd8 <__sflush_r+0xd4>
 8007e08:	dfbffffe 	.word	0xdfbffffe

08007e0c <_fflush_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b913      	cbnz	r3, 8007e1c <_fflush_r+0x10>
 8007e16:	2500      	movs	r5, #0
 8007e18:	4628      	mov	r0, r5
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	b118      	cbz	r0, 8007e26 <_fflush_r+0x1a>
 8007e1e:	6a03      	ldr	r3, [r0, #32]
 8007e20:	b90b      	cbnz	r3, 8007e26 <_fflush_r+0x1a>
 8007e22:	f7fd fa73 	bl	800530c <__sinit>
 8007e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0f3      	beq.n	8007e16 <_fflush_r+0xa>
 8007e2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e30:	07d0      	lsls	r0, r2, #31
 8007e32:	d404      	bmi.n	8007e3e <_fflush_r+0x32>
 8007e34:	0599      	lsls	r1, r3, #22
 8007e36:	d402      	bmi.n	8007e3e <_fflush_r+0x32>
 8007e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e3a:	f7fd fb7e 	bl	800553a <__retarget_lock_acquire_recursive>
 8007e3e:	4628      	mov	r0, r5
 8007e40:	4621      	mov	r1, r4
 8007e42:	f7ff ff5f 	bl	8007d04 <__sflush_r>
 8007e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e48:	07da      	lsls	r2, r3, #31
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	d4e4      	bmi.n	8007e18 <_fflush_r+0xc>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	059b      	lsls	r3, r3, #22
 8007e52:	d4e1      	bmi.n	8007e18 <_fflush_r+0xc>
 8007e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e56:	f7fd fb71 	bl	800553c <__retarget_lock_release_recursive>
 8007e5a:	e7dd      	b.n	8007e18 <_fflush_r+0xc>

08007e5c <memmove>:
 8007e5c:	4288      	cmp	r0, r1
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	eb01 0402 	add.w	r4, r1, r2
 8007e64:	d902      	bls.n	8007e6c <memmove+0x10>
 8007e66:	4284      	cmp	r4, r0
 8007e68:	4623      	mov	r3, r4
 8007e6a:	d807      	bhi.n	8007e7c <memmove+0x20>
 8007e6c:	1e43      	subs	r3, r0, #1
 8007e6e:	42a1      	cmp	r1, r4
 8007e70:	d008      	beq.n	8007e84 <memmove+0x28>
 8007e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e7a:	e7f8      	b.n	8007e6e <memmove+0x12>
 8007e7c:	4402      	add	r2, r0
 8007e7e:	4601      	mov	r1, r0
 8007e80:	428a      	cmp	r2, r1
 8007e82:	d100      	bne.n	8007e86 <memmove+0x2a>
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e8e:	e7f7      	b.n	8007e80 <memmove+0x24>

08007e90 <strncmp>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	b16a      	cbz	r2, 8007eb0 <strncmp+0x20>
 8007e94:	3901      	subs	r1, #1
 8007e96:	1884      	adds	r4, r0, r2
 8007e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d103      	bne.n	8007eac <strncmp+0x1c>
 8007ea4:	42a0      	cmp	r0, r4
 8007ea6:	d001      	beq.n	8007eac <strncmp+0x1c>
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	d1f5      	bne.n	8007e98 <strncmp+0x8>
 8007eac:	1ad0      	subs	r0, r2, r3
 8007eae:	bd10      	pop	{r4, pc}
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	e7fc      	b.n	8007eae <strncmp+0x1e>

08007eb4 <_sbrk_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d06      	ldr	r5, [pc, #24]	@ (8007ed0 <_sbrk_r+0x1c>)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7f9 fbb4 	bl	800162c <_sbrk>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_sbrk_r+0x1a>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_sbrk_r+0x1a>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000420 	.word	0x20000420

08007ed4 <memcpy>:
 8007ed4:	440a      	add	r2, r1
 8007ed6:	4291      	cmp	r1, r2
 8007ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007edc:	d100      	bne.n	8007ee0 <memcpy+0xc>
 8007ede:	4770      	bx	lr
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eea:	4291      	cmp	r1, r2
 8007eec:	d1f9      	bne.n	8007ee2 <memcpy+0xe>
 8007eee:	bd10      	pop	{r4, pc}

08007ef0 <nan>:
 8007ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ef8 <nan+0x8>
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	7ff80000 	.word	0x7ff80000

08007f00 <__assert_func>:
 8007f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f02:	4614      	mov	r4, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <__assert_func+0x2c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	68d8      	ldr	r0, [r3, #12]
 8007f0e:	b954      	cbnz	r4, 8007f26 <__assert_func+0x26>
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <__assert_func+0x30>)
 8007f12:	461c      	mov	r4, r3
 8007f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f18:	9100      	str	r1, [sp, #0]
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	4905      	ldr	r1, [pc, #20]	@ (8007f34 <__assert_func+0x34>)
 8007f1e:	f000 fba7 	bl	8008670 <fiprintf>
 8007f22:	f000 fbb7 	bl	8008694 <abort>
 8007f26:	4b04      	ldr	r3, [pc, #16]	@ (8007f38 <__assert_func+0x38>)
 8007f28:	e7f4      	b.n	8007f14 <__assert_func+0x14>
 8007f2a:	bf00      	nop
 8007f2c:	20000018 	.word	0x20000018
 8007f30:	0800901d 	.word	0x0800901d
 8007f34:	08008fef 	.word	0x08008fef
 8007f38:	08008fe2 	.word	0x08008fe2

08007f3c <_calloc_r>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	fba1 5402 	umull	r5, r4, r1, r2
 8007f42:	b93c      	cbnz	r4, 8007f54 <_calloc_r+0x18>
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7fe f9c3 	bl	80062d0 <_malloc_r>
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	b928      	cbnz	r0, 8007f5a <_calloc_r+0x1e>
 8007f4e:	2600      	movs	r6, #0
 8007f50:	4630      	mov	r0, r6
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	220c      	movs	r2, #12
 8007f56:	6002      	str	r2, [r0, #0]
 8007f58:	e7f9      	b.n	8007f4e <_calloc_r+0x12>
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	f7fd fa6e 	bl	800543e <memset>
 8007f62:	e7f5      	b.n	8007f50 <_calloc_r+0x14>

08007f64 <rshift>:
 8007f64:	6903      	ldr	r3, [r0, #16]
 8007f66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f72:	f100 0414 	add.w	r4, r0, #20
 8007f76:	dd45      	ble.n	8008004 <rshift+0xa0>
 8007f78:	f011 011f 	ands.w	r1, r1, #31
 8007f7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f84:	d10c      	bne.n	8007fa0 <rshift+0x3c>
 8007f86:	f100 0710 	add.w	r7, r0, #16
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	42b1      	cmp	r1, r6
 8007f8e:	d334      	bcc.n	8007ffa <rshift+0x96>
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	1eea      	subs	r2, r5, #3
 8007f96:	4296      	cmp	r6, r2
 8007f98:	bf38      	it	cc
 8007f9a:	2300      	movcc	r3, #0
 8007f9c:	4423      	add	r3, r4
 8007f9e:	e015      	b.n	8007fcc <rshift+0x68>
 8007fa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fa4:	f1c1 0820 	rsb	r8, r1, #32
 8007fa8:	40cf      	lsrs	r7, r1
 8007faa:	f105 0e04 	add.w	lr, r5, #4
 8007fae:	46a1      	mov	r9, r4
 8007fb0:	4576      	cmp	r6, lr
 8007fb2:	46f4      	mov	ip, lr
 8007fb4:	d815      	bhi.n	8007fe2 <rshift+0x7e>
 8007fb6:	1a9a      	subs	r2, r3, r2
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	3a04      	subs	r2, #4
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	42ae      	cmp	r6, r5
 8007fc0:	bf38      	it	cc
 8007fc2:	2200      	movcc	r2, #0
 8007fc4:	18a3      	adds	r3, r4, r2
 8007fc6:	50a7      	str	r7, [r4, r2]
 8007fc8:	b107      	cbz	r7, 8007fcc <rshift+0x68>
 8007fca:	3304      	adds	r3, #4
 8007fcc:	1b1a      	subs	r2, r3, r4
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fd4:	bf08      	it	eq
 8007fd6:	2300      	moveq	r3, #0
 8007fd8:	6102      	str	r2, [r0, #16]
 8007fda:	bf08      	it	eq
 8007fdc:	6143      	streq	r3, [r0, #20]
 8007fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	f8dc c000 	ldr.w	ip, [ip]
 8007fe6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fea:	ea4c 0707 	orr.w	r7, ip, r7
 8007fee:	f849 7b04 	str.w	r7, [r9], #4
 8007ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ff6:	40cf      	lsrs	r7, r1
 8007ff8:	e7da      	b.n	8007fb0 <rshift+0x4c>
 8007ffa:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ffe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008002:	e7c3      	b.n	8007f8c <rshift+0x28>
 8008004:	4623      	mov	r3, r4
 8008006:	e7e1      	b.n	8007fcc <rshift+0x68>

08008008 <__hexdig_fun>:
 8008008:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800800c:	2b09      	cmp	r3, #9
 800800e:	d802      	bhi.n	8008016 <__hexdig_fun+0xe>
 8008010:	3820      	subs	r0, #32
 8008012:	b2c0      	uxtb	r0, r0
 8008014:	4770      	bx	lr
 8008016:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800801a:	2b05      	cmp	r3, #5
 800801c:	d801      	bhi.n	8008022 <__hexdig_fun+0x1a>
 800801e:	3847      	subs	r0, #71	@ 0x47
 8008020:	e7f7      	b.n	8008012 <__hexdig_fun+0xa>
 8008022:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008026:	2b05      	cmp	r3, #5
 8008028:	d801      	bhi.n	800802e <__hexdig_fun+0x26>
 800802a:	3827      	subs	r0, #39	@ 0x27
 800802c:	e7f1      	b.n	8008012 <__hexdig_fun+0xa>
 800802e:	2000      	movs	r0, #0
 8008030:	4770      	bx	lr
	...

08008034 <__gethex>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	b085      	sub	sp, #20
 800803a:	468a      	mov	sl, r1
 800803c:	9302      	str	r3, [sp, #8]
 800803e:	680b      	ldr	r3, [r1, #0]
 8008040:	9001      	str	r0, [sp, #4]
 8008042:	4690      	mov	r8, r2
 8008044:	1c9c      	adds	r4, r3, #2
 8008046:	46a1      	mov	r9, r4
 8008048:	f814 0b01 	ldrb.w	r0, [r4], #1
 800804c:	2830      	cmp	r0, #48	@ 0x30
 800804e:	d0fa      	beq.n	8008046 <__gethex+0x12>
 8008050:	eba9 0303 	sub.w	r3, r9, r3
 8008054:	f1a3 0b02 	sub.w	fp, r3, #2
 8008058:	f7ff ffd6 	bl	8008008 <__hexdig_fun>
 800805c:	4605      	mov	r5, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	d168      	bne.n	8008134 <__gethex+0x100>
 8008062:	49a0      	ldr	r1, [pc, #640]	@ (80082e4 <__gethex+0x2b0>)
 8008064:	2201      	movs	r2, #1
 8008066:	4648      	mov	r0, r9
 8008068:	f7ff ff12 	bl	8007e90 <strncmp>
 800806c:	4607      	mov	r7, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d167      	bne.n	8008142 <__gethex+0x10e>
 8008072:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008076:	4626      	mov	r6, r4
 8008078:	f7ff ffc6 	bl	8008008 <__hexdig_fun>
 800807c:	2800      	cmp	r0, #0
 800807e:	d062      	beq.n	8008146 <__gethex+0x112>
 8008080:	4623      	mov	r3, r4
 8008082:	7818      	ldrb	r0, [r3, #0]
 8008084:	2830      	cmp	r0, #48	@ 0x30
 8008086:	4699      	mov	r9, r3
 8008088:	f103 0301 	add.w	r3, r3, #1
 800808c:	d0f9      	beq.n	8008082 <__gethex+0x4e>
 800808e:	f7ff ffbb 	bl	8008008 <__hexdig_fun>
 8008092:	fab0 f580 	clz	r5, r0
 8008096:	096d      	lsrs	r5, r5, #5
 8008098:	f04f 0b01 	mov.w	fp, #1
 800809c:	464a      	mov	r2, r9
 800809e:	4616      	mov	r6, r2
 80080a0:	3201      	adds	r2, #1
 80080a2:	7830      	ldrb	r0, [r6, #0]
 80080a4:	f7ff ffb0 	bl	8008008 <__hexdig_fun>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1f8      	bne.n	800809e <__gethex+0x6a>
 80080ac:	498d      	ldr	r1, [pc, #564]	@ (80082e4 <__gethex+0x2b0>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff feed 	bl	8007e90 <strncmp>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d13f      	bne.n	800813a <__gethex+0x106>
 80080ba:	b944      	cbnz	r4, 80080ce <__gethex+0x9a>
 80080bc:	1c74      	adds	r4, r6, #1
 80080be:	4622      	mov	r2, r4
 80080c0:	4616      	mov	r6, r2
 80080c2:	3201      	adds	r2, #1
 80080c4:	7830      	ldrb	r0, [r6, #0]
 80080c6:	f7ff ff9f 	bl	8008008 <__hexdig_fun>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1f8      	bne.n	80080c0 <__gethex+0x8c>
 80080ce:	1ba4      	subs	r4, r4, r6
 80080d0:	00a7      	lsls	r7, r4, #2
 80080d2:	7833      	ldrb	r3, [r6, #0]
 80080d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80080d8:	2b50      	cmp	r3, #80	@ 0x50
 80080da:	d13e      	bne.n	800815a <__gethex+0x126>
 80080dc:	7873      	ldrb	r3, [r6, #1]
 80080de:	2b2b      	cmp	r3, #43	@ 0x2b
 80080e0:	d033      	beq.n	800814a <__gethex+0x116>
 80080e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80080e4:	d034      	beq.n	8008150 <__gethex+0x11c>
 80080e6:	1c71      	adds	r1, r6, #1
 80080e8:	2400      	movs	r4, #0
 80080ea:	7808      	ldrb	r0, [r1, #0]
 80080ec:	f7ff ff8c 	bl	8008008 <__hexdig_fun>
 80080f0:	1e43      	subs	r3, r0, #1
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b18      	cmp	r3, #24
 80080f6:	d830      	bhi.n	800815a <__gethex+0x126>
 80080f8:	f1a0 0210 	sub.w	r2, r0, #16
 80080fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008100:	f7ff ff82 	bl	8008008 <__hexdig_fun>
 8008104:	f100 3cff 	add.w	ip, r0, #4294967295
 8008108:	fa5f fc8c 	uxtb.w	ip, ip
 800810c:	f1bc 0f18 	cmp.w	ip, #24
 8008110:	f04f 030a 	mov.w	r3, #10
 8008114:	d91e      	bls.n	8008154 <__gethex+0x120>
 8008116:	b104      	cbz	r4, 800811a <__gethex+0xe6>
 8008118:	4252      	negs	r2, r2
 800811a:	4417      	add	r7, r2
 800811c:	f8ca 1000 	str.w	r1, [sl]
 8008120:	b1ed      	cbz	r5, 800815e <__gethex+0x12a>
 8008122:	f1bb 0f00 	cmp.w	fp, #0
 8008126:	bf0c      	ite	eq
 8008128:	2506      	moveq	r5, #6
 800812a:	2500      	movne	r5, #0
 800812c:	4628      	mov	r0, r5
 800812e:	b005      	add	sp, #20
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	2500      	movs	r5, #0
 8008136:	462c      	mov	r4, r5
 8008138:	e7b0      	b.n	800809c <__gethex+0x68>
 800813a:	2c00      	cmp	r4, #0
 800813c:	d1c7      	bne.n	80080ce <__gethex+0x9a>
 800813e:	4627      	mov	r7, r4
 8008140:	e7c7      	b.n	80080d2 <__gethex+0x9e>
 8008142:	464e      	mov	r6, r9
 8008144:	462f      	mov	r7, r5
 8008146:	2501      	movs	r5, #1
 8008148:	e7c3      	b.n	80080d2 <__gethex+0x9e>
 800814a:	2400      	movs	r4, #0
 800814c:	1cb1      	adds	r1, r6, #2
 800814e:	e7cc      	b.n	80080ea <__gethex+0xb6>
 8008150:	2401      	movs	r4, #1
 8008152:	e7fb      	b.n	800814c <__gethex+0x118>
 8008154:	fb03 0002 	mla	r0, r3, r2, r0
 8008158:	e7ce      	b.n	80080f8 <__gethex+0xc4>
 800815a:	4631      	mov	r1, r6
 800815c:	e7de      	b.n	800811c <__gethex+0xe8>
 800815e:	eba6 0309 	sub.w	r3, r6, r9
 8008162:	3b01      	subs	r3, #1
 8008164:	4629      	mov	r1, r5
 8008166:	2b07      	cmp	r3, #7
 8008168:	dc0a      	bgt.n	8008180 <__gethex+0x14c>
 800816a:	9801      	ldr	r0, [sp, #4]
 800816c:	f7fe f93c 	bl	80063e8 <_Balloc>
 8008170:	4604      	mov	r4, r0
 8008172:	b940      	cbnz	r0, 8008186 <__gethex+0x152>
 8008174:	4b5c      	ldr	r3, [pc, #368]	@ (80082e8 <__gethex+0x2b4>)
 8008176:	4602      	mov	r2, r0
 8008178:	21e4      	movs	r1, #228	@ 0xe4
 800817a:	485c      	ldr	r0, [pc, #368]	@ (80082ec <__gethex+0x2b8>)
 800817c:	f7ff fec0 	bl	8007f00 <__assert_func>
 8008180:	3101      	adds	r1, #1
 8008182:	105b      	asrs	r3, r3, #1
 8008184:	e7ef      	b.n	8008166 <__gethex+0x132>
 8008186:	f100 0a14 	add.w	sl, r0, #20
 800818a:	2300      	movs	r3, #0
 800818c:	4655      	mov	r5, sl
 800818e:	469b      	mov	fp, r3
 8008190:	45b1      	cmp	r9, r6
 8008192:	d337      	bcc.n	8008204 <__gethex+0x1d0>
 8008194:	f845 bb04 	str.w	fp, [r5], #4
 8008198:	eba5 050a 	sub.w	r5, r5, sl
 800819c:	10ad      	asrs	r5, r5, #2
 800819e:	6125      	str	r5, [r4, #16]
 80081a0:	4658      	mov	r0, fp
 80081a2:	f7fe fa13 	bl	80065cc <__hi0bits>
 80081a6:	016d      	lsls	r5, r5, #5
 80081a8:	f8d8 6000 	ldr.w	r6, [r8]
 80081ac:	1a2d      	subs	r5, r5, r0
 80081ae:	42b5      	cmp	r5, r6
 80081b0:	dd54      	ble.n	800825c <__gethex+0x228>
 80081b2:	1bad      	subs	r5, r5, r6
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fe fda7 	bl	8006d0a <__any_on>
 80081bc:	4681      	mov	r9, r0
 80081be:	b178      	cbz	r0, 80081e0 <__gethex+0x1ac>
 80081c0:	1e6b      	subs	r3, r5, #1
 80081c2:	1159      	asrs	r1, r3, #5
 80081c4:	f003 021f 	and.w	r2, r3, #31
 80081c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80081cc:	f04f 0901 	mov.w	r9, #1
 80081d0:	fa09 f202 	lsl.w	r2, r9, r2
 80081d4:	420a      	tst	r2, r1
 80081d6:	d003      	beq.n	80081e0 <__gethex+0x1ac>
 80081d8:	454b      	cmp	r3, r9
 80081da:	dc36      	bgt.n	800824a <__gethex+0x216>
 80081dc:	f04f 0902 	mov.w	r9, #2
 80081e0:	4629      	mov	r1, r5
 80081e2:	4620      	mov	r0, r4
 80081e4:	f7ff febe 	bl	8007f64 <rshift>
 80081e8:	442f      	add	r7, r5
 80081ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081ee:	42bb      	cmp	r3, r7
 80081f0:	da42      	bge.n	8008278 <__gethex+0x244>
 80081f2:	9801      	ldr	r0, [sp, #4]
 80081f4:	4621      	mov	r1, r4
 80081f6:	f7fe f937 	bl	8006468 <_Bfree>
 80081fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081fc:	2300      	movs	r3, #0
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	25a3      	movs	r5, #163	@ 0xa3
 8008202:	e793      	b.n	800812c <__gethex+0xf8>
 8008204:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008208:	2a2e      	cmp	r2, #46	@ 0x2e
 800820a:	d012      	beq.n	8008232 <__gethex+0x1fe>
 800820c:	2b20      	cmp	r3, #32
 800820e:	d104      	bne.n	800821a <__gethex+0x1e6>
 8008210:	f845 bb04 	str.w	fp, [r5], #4
 8008214:	f04f 0b00 	mov.w	fp, #0
 8008218:	465b      	mov	r3, fp
 800821a:	7830      	ldrb	r0, [r6, #0]
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	f7ff fef3 	bl	8008008 <__hexdig_fun>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	f000 000f 	and.w	r0, r0, #15
 8008228:	4098      	lsls	r0, r3
 800822a:	ea4b 0b00 	orr.w	fp, fp, r0
 800822e:	3304      	adds	r3, #4
 8008230:	e7ae      	b.n	8008190 <__gethex+0x15c>
 8008232:	45b1      	cmp	r9, r6
 8008234:	d8ea      	bhi.n	800820c <__gethex+0x1d8>
 8008236:	492b      	ldr	r1, [pc, #172]	@ (80082e4 <__gethex+0x2b0>)
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff fe27 	bl	8007e90 <strncmp>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	2800      	cmp	r0, #0
 8008246:	d1e1      	bne.n	800820c <__gethex+0x1d8>
 8008248:	e7a2      	b.n	8008190 <__gethex+0x15c>
 800824a:	1ea9      	subs	r1, r5, #2
 800824c:	4620      	mov	r0, r4
 800824e:	f7fe fd5c 	bl	8006d0a <__any_on>
 8008252:	2800      	cmp	r0, #0
 8008254:	d0c2      	beq.n	80081dc <__gethex+0x1a8>
 8008256:	f04f 0903 	mov.w	r9, #3
 800825a:	e7c1      	b.n	80081e0 <__gethex+0x1ac>
 800825c:	da09      	bge.n	8008272 <__gethex+0x23e>
 800825e:	1b75      	subs	r5, r6, r5
 8008260:	4621      	mov	r1, r4
 8008262:	9801      	ldr	r0, [sp, #4]
 8008264:	462a      	mov	r2, r5
 8008266:	f7fe fb17 	bl	8006898 <__lshift>
 800826a:	1b7f      	subs	r7, r7, r5
 800826c:	4604      	mov	r4, r0
 800826e:	f100 0a14 	add.w	sl, r0, #20
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	e7b8      	b.n	80081ea <__gethex+0x1b6>
 8008278:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800827c:	42bd      	cmp	r5, r7
 800827e:	dd6f      	ble.n	8008360 <__gethex+0x32c>
 8008280:	1bed      	subs	r5, r5, r7
 8008282:	42ae      	cmp	r6, r5
 8008284:	dc34      	bgt.n	80082f0 <__gethex+0x2bc>
 8008286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d022      	beq.n	80082d4 <__gethex+0x2a0>
 800828e:	2b03      	cmp	r3, #3
 8008290:	d024      	beq.n	80082dc <__gethex+0x2a8>
 8008292:	2b01      	cmp	r3, #1
 8008294:	d115      	bne.n	80082c2 <__gethex+0x28e>
 8008296:	42ae      	cmp	r6, r5
 8008298:	d113      	bne.n	80082c2 <__gethex+0x28e>
 800829a:	2e01      	cmp	r6, #1
 800829c:	d10b      	bne.n	80082b6 <__gethex+0x282>
 800829e:	9a02      	ldr	r2, [sp, #8]
 80082a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	2301      	movs	r3, #1
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	f8ca 3000 	str.w	r3, [sl]
 80082ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082b0:	2562      	movs	r5, #98	@ 0x62
 80082b2:	601c      	str	r4, [r3, #0]
 80082b4:	e73a      	b.n	800812c <__gethex+0xf8>
 80082b6:	1e71      	subs	r1, r6, #1
 80082b8:	4620      	mov	r0, r4
 80082ba:	f7fe fd26 	bl	8006d0a <__any_on>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d1ed      	bne.n	800829e <__gethex+0x26a>
 80082c2:	9801      	ldr	r0, [sp, #4]
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7fe f8cf 	bl	8006468 <_Bfree>
 80082ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082cc:	2300      	movs	r3, #0
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	2550      	movs	r5, #80	@ 0x50
 80082d2:	e72b      	b.n	800812c <__gethex+0xf8>
 80082d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f3      	bne.n	80082c2 <__gethex+0x28e>
 80082da:	e7e0      	b.n	800829e <__gethex+0x26a>
 80082dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1dd      	bne.n	800829e <__gethex+0x26a>
 80082e2:	e7ee      	b.n	80082c2 <__gethex+0x28e>
 80082e4:	08008e70 	.word	0x08008e70
 80082e8:	08008d05 	.word	0x08008d05
 80082ec:	0800901e 	.word	0x0800901e
 80082f0:	1e6f      	subs	r7, r5, #1
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d130      	bne.n	800835a <__gethex+0x326>
 80082f8:	b127      	cbz	r7, 8008304 <__gethex+0x2d0>
 80082fa:	4639      	mov	r1, r7
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7fe fd04 	bl	8006d0a <__any_on>
 8008302:	4681      	mov	r9, r0
 8008304:	117a      	asrs	r2, r7, #5
 8008306:	2301      	movs	r3, #1
 8008308:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800830c:	f007 071f 	and.w	r7, r7, #31
 8008310:	40bb      	lsls	r3, r7
 8008312:	4213      	tst	r3, r2
 8008314:	4629      	mov	r1, r5
 8008316:	4620      	mov	r0, r4
 8008318:	bf18      	it	ne
 800831a:	f049 0902 	orrne.w	r9, r9, #2
 800831e:	f7ff fe21 	bl	8007f64 <rshift>
 8008322:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008326:	1b76      	subs	r6, r6, r5
 8008328:	2502      	movs	r5, #2
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	d047      	beq.n	80083c0 <__gethex+0x38c>
 8008330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d015      	beq.n	8008364 <__gethex+0x330>
 8008338:	2b03      	cmp	r3, #3
 800833a:	d017      	beq.n	800836c <__gethex+0x338>
 800833c:	2b01      	cmp	r3, #1
 800833e:	d109      	bne.n	8008354 <__gethex+0x320>
 8008340:	f019 0f02 	tst.w	r9, #2
 8008344:	d006      	beq.n	8008354 <__gethex+0x320>
 8008346:	f8da 3000 	ldr.w	r3, [sl]
 800834a:	ea49 0903 	orr.w	r9, r9, r3
 800834e:	f019 0f01 	tst.w	r9, #1
 8008352:	d10e      	bne.n	8008372 <__gethex+0x33e>
 8008354:	f045 0510 	orr.w	r5, r5, #16
 8008358:	e032      	b.n	80083c0 <__gethex+0x38c>
 800835a:	f04f 0901 	mov.w	r9, #1
 800835e:	e7d1      	b.n	8008304 <__gethex+0x2d0>
 8008360:	2501      	movs	r5, #1
 8008362:	e7e2      	b.n	800832a <__gethex+0x2f6>
 8008364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008366:	f1c3 0301 	rsb	r3, r3, #1
 800836a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800836c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <__gethex+0x320>
 8008372:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008376:	f104 0314 	add.w	r3, r4, #20
 800837a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800837e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008382:	f04f 0c00 	mov.w	ip, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f853 2b04 	ldr.w	r2, [r3], #4
 800838c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008390:	d01b      	beq.n	80083ca <__gethex+0x396>
 8008392:	3201      	adds	r2, #1
 8008394:	6002      	str	r2, [r0, #0]
 8008396:	2d02      	cmp	r5, #2
 8008398:	f104 0314 	add.w	r3, r4, #20
 800839c:	d13c      	bne.n	8008418 <__gethex+0x3e4>
 800839e:	f8d8 2000 	ldr.w	r2, [r8]
 80083a2:	3a01      	subs	r2, #1
 80083a4:	42b2      	cmp	r2, r6
 80083a6:	d109      	bne.n	80083bc <__gethex+0x388>
 80083a8:	1171      	asrs	r1, r6, #5
 80083aa:	2201      	movs	r2, #1
 80083ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083b0:	f006 061f 	and.w	r6, r6, #31
 80083b4:	fa02 f606 	lsl.w	r6, r2, r6
 80083b8:	421e      	tst	r6, r3
 80083ba:	d13a      	bne.n	8008432 <__gethex+0x3fe>
 80083bc:	f045 0520 	orr.w	r5, r5, #32
 80083c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c2:	601c      	str	r4, [r3, #0]
 80083c4:	9b02      	ldr	r3, [sp, #8]
 80083c6:	601f      	str	r7, [r3, #0]
 80083c8:	e6b0      	b.n	800812c <__gethex+0xf8>
 80083ca:	4299      	cmp	r1, r3
 80083cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80083d0:	d8d9      	bhi.n	8008386 <__gethex+0x352>
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	459b      	cmp	fp, r3
 80083d6:	db17      	blt.n	8008408 <__gethex+0x3d4>
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	9801      	ldr	r0, [sp, #4]
 80083dc:	3101      	adds	r1, #1
 80083de:	f7fe f803 	bl	80063e8 <_Balloc>
 80083e2:	4681      	mov	r9, r0
 80083e4:	b918      	cbnz	r0, 80083ee <__gethex+0x3ba>
 80083e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008450 <__gethex+0x41c>)
 80083e8:	4602      	mov	r2, r0
 80083ea:	2184      	movs	r1, #132	@ 0x84
 80083ec:	e6c5      	b.n	800817a <__gethex+0x146>
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	3202      	adds	r2, #2
 80083f2:	f104 010c 	add.w	r1, r4, #12
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	300c      	adds	r0, #12
 80083fa:	f7ff fd6b 	bl	8007ed4 <memcpy>
 80083fe:	4621      	mov	r1, r4
 8008400:	9801      	ldr	r0, [sp, #4]
 8008402:	f7fe f831 	bl	8006468 <_Bfree>
 8008406:	464c      	mov	r4, r9
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008410:	6122      	str	r2, [r4, #16]
 8008412:	2201      	movs	r2, #1
 8008414:	615a      	str	r2, [r3, #20]
 8008416:	e7be      	b.n	8008396 <__gethex+0x362>
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	455a      	cmp	r2, fp
 800841c:	dd0b      	ble.n	8008436 <__gethex+0x402>
 800841e:	2101      	movs	r1, #1
 8008420:	4620      	mov	r0, r4
 8008422:	f7ff fd9f 	bl	8007f64 <rshift>
 8008426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800842a:	3701      	adds	r7, #1
 800842c:	42bb      	cmp	r3, r7
 800842e:	f6ff aee0 	blt.w	80081f2 <__gethex+0x1be>
 8008432:	2501      	movs	r5, #1
 8008434:	e7c2      	b.n	80083bc <__gethex+0x388>
 8008436:	f016 061f 	ands.w	r6, r6, #31
 800843a:	d0fa      	beq.n	8008432 <__gethex+0x3fe>
 800843c:	4453      	add	r3, sl
 800843e:	f1c6 0620 	rsb	r6, r6, #32
 8008442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008446:	f7fe f8c1 	bl	80065cc <__hi0bits>
 800844a:	42b0      	cmp	r0, r6
 800844c:	dbe7      	blt.n	800841e <__gethex+0x3ea>
 800844e:	e7f0      	b.n	8008432 <__gethex+0x3fe>
 8008450:	08008d05 	.word	0x08008d05

08008454 <L_shift>:
 8008454:	f1c2 0208 	rsb	r2, r2, #8
 8008458:	0092      	lsls	r2, r2, #2
 800845a:	b570      	push	{r4, r5, r6, lr}
 800845c:	f1c2 0620 	rsb	r6, r2, #32
 8008460:	6843      	ldr	r3, [r0, #4]
 8008462:	6804      	ldr	r4, [r0, #0]
 8008464:	fa03 f506 	lsl.w	r5, r3, r6
 8008468:	432c      	orrs	r4, r5
 800846a:	40d3      	lsrs	r3, r2
 800846c:	6004      	str	r4, [r0, #0]
 800846e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008472:	4288      	cmp	r0, r1
 8008474:	d3f4      	bcc.n	8008460 <L_shift+0xc>
 8008476:	bd70      	pop	{r4, r5, r6, pc}

08008478 <__match>:
 8008478:	b530      	push	{r4, r5, lr}
 800847a:	6803      	ldr	r3, [r0, #0]
 800847c:	3301      	adds	r3, #1
 800847e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008482:	b914      	cbnz	r4, 800848a <__match+0x12>
 8008484:	6003      	str	r3, [r0, #0]
 8008486:	2001      	movs	r0, #1
 8008488:	bd30      	pop	{r4, r5, pc}
 800848a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008492:	2d19      	cmp	r5, #25
 8008494:	bf98      	it	ls
 8008496:	3220      	addls	r2, #32
 8008498:	42a2      	cmp	r2, r4
 800849a:	d0f0      	beq.n	800847e <__match+0x6>
 800849c:	2000      	movs	r0, #0
 800849e:	e7f3      	b.n	8008488 <__match+0x10>

080084a0 <__hexnan>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	680b      	ldr	r3, [r1, #0]
 80084a6:	6801      	ldr	r1, [r0, #0]
 80084a8:	115e      	asrs	r6, r3, #5
 80084aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084ae:	f013 031f 	ands.w	r3, r3, #31
 80084b2:	b087      	sub	sp, #28
 80084b4:	bf18      	it	ne
 80084b6:	3604      	addne	r6, #4
 80084b8:	2500      	movs	r5, #0
 80084ba:	1f37      	subs	r7, r6, #4
 80084bc:	4682      	mov	sl, r0
 80084be:	4690      	mov	r8, r2
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80084c6:	46b9      	mov	r9, r7
 80084c8:	463c      	mov	r4, r7
 80084ca:	9502      	str	r5, [sp, #8]
 80084cc:	46ab      	mov	fp, r5
 80084ce:	784a      	ldrb	r2, [r1, #1]
 80084d0:	1c4b      	adds	r3, r1, #1
 80084d2:	9303      	str	r3, [sp, #12]
 80084d4:	b342      	cbz	r2, 8008528 <__hexnan+0x88>
 80084d6:	4610      	mov	r0, r2
 80084d8:	9105      	str	r1, [sp, #20]
 80084da:	9204      	str	r2, [sp, #16]
 80084dc:	f7ff fd94 	bl	8008008 <__hexdig_fun>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d151      	bne.n	8008588 <__hexnan+0xe8>
 80084e4:	9a04      	ldr	r2, [sp, #16]
 80084e6:	9905      	ldr	r1, [sp, #20]
 80084e8:	2a20      	cmp	r2, #32
 80084ea:	d818      	bhi.n	800851e <__hexnan+0x7e>
 80084ec:	9b02      	ldr	r3, [sp, #8]
 80084ee:	459b      	cmp	fp, r3
 80084f0:	dd13      	ble.n	800851a <__hexnan+0x7a>
 80084f2:	454c      	cmp	r4, r9
 80084f4:	d206      	bcs.n	8008504 <__hexnan+0x64>
 80084f6:	2d07      	cmp	r5, #7
 80084f8:	dc04      	bgt.n	8008504 <__hexnan+0x64>
 80084fa:	462a      	mov	r2, r5
 80084fc:	4649      	mov	r1, r9
 80084fe:	4620      	mov	r0, r4
 8008500:	f7ff ffa8 	bl	8008454 <L_shift>
 8008504:	4544      	cmp	r4, r8
 8008506:	d952      	bls.n	80085ae <__hexnan+0x10e>
 8008508:	2300      	movs	r3, #0
 800850a:	f1a4 0904 	sub.w	r9, r4, #4
 800850e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008512:	f8cd b008 	str.w	fp, [sp, #8]
 8008516:	464c      	mov	r4, r9
 8008518:	461d      	mov	r5, r3
 800851a:	9903      	ldr	r1, [sp, #12]
 800851c:	e7d7      	b.n	80084ce <__hexnan+0x2e>
 800851e:	2a29      	cmp	r2, #41	@ 0x29
 8008520:	d157      	bne.n	80085d2 <__hexnan+0x132>
 8008522:	3102      	adds	r1, #2
 8008524:	f8ca 1000 	str.w	r1, [sl]
 8008528:	f1bb 0f00 	cmp.w	fp, #0
 800852c:	d051      	beq.n	80085d2 <__hexnan+0x132>
 800852e:	454c      	cmp	r4, r9
 8008530:	d206      	bcs.n	8008540 <__hexnan+0xa0>
 8008532:	2d07      	cmp	r5, #7
 8008534:	dc04      	bgt.n	8008540 <__hexnan+0xa0>
 8008536:	462a      	mov	r2, r5
 8008538:	4649      	mov	r1, r9
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff ff8a 	bl	8008454 <L_shift>
 8008540:	4544      	cmp	r4, r8
 8008542:	d936      	bls.n	80085b2 <__hexnan+0x112>
 8008544:	f1a8 0204 	sub.w	r2, r8, #4
 8008548:	4623      	mov	r3, r4
 800854a:	f853 1b04 	ldr.w	r1, [r3], #4
 800854e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008552:	429f      	cmp	r7, r3
 8008554:	d2f9      	bcs.n	800854a <__hexnan+0xaa>
 8008556:	1b3b      	subs	r3, r7, r4
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	3304      	adds	r3, #4
 800855e:	3401      	adds	r4, #1
 8008560:	3e03      	subs	r6, #3
 8008562:	42b4      	cmp	r4, r6
 8008564:	bf88      	it	hi
 8008566:	2304      	movhi	r3, #4
 8008568:	4443      	add	r3, r8
 800856a:	2200      	movs	r2, #0
 800856c:	f843 2b04 	str.w	r2, [r3], #4
 8008570:	429f      	cmp	r7, r3
 8008572:	d2fb      	bcs.n	800856c <__hexnan+0xcc>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	b91b      	cbnz	r3, 8008580 <__hexnan+0xe0>
 8008578:	4547      	cmp	r7, r8
 800857a:	d128      	bne.n	80085ce <__hexnan+0x12e>
 800857c:	2301      	movs	r3, #1
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	2005      	movs	r0, #5
 8008582:	b007      	add	sp, #28
 8008584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008588:	3501      	adds	r5, #1
 800858a:	2d08      	cmp	r5, #8
 800858c:	f10b 0b01 	add.w	fp, fp, #1
 8008590:	dd06      	ble.n	80085a0 <__hexnan+0x100>
 8008592:	4544      	cmp	r4, r8
 8008594:	d9c1      	bls.n	800851a <__hexnan+0x7a>
 8008596:	2300      	movs	r3, #0
 8008598:	f844 3c04 	str.w	r3, [r4, #-4]
 800859c:	2501      	movs	r5, #1
 800859e:	3c04      	subs	r4, #4
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	f000 000f 	and.w	r0, r0, #15
 80085a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80085aa:	6020      	str	r0, [r4, #0]
 80085ac:	e7b5      	b.n	800851a <__hexnan+0x7a>
 80085ae:	2508      	movs	r5, #8
 80085b0:	e7b3      	b.n	800851a <__hexnan+0x7a>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0dd      	beq.n	8008574 <__hexnan+0xd4>
 80085b8:	f1c3 0320 	rsb	r3, r3, #32
 80085bc:	f04f 32ff 	mov.w	r2, #4294967295
 80085c0:	40da      	lsrs	r2, r3
 80085c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80085c6:	4013      	ands	r3, r2
 80085c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80085cc:	e7d2      	b.n	8008574 <__hexnan+0xd4>
 80085ce:	3f04      	subs	r7, #4
 80085d0:	e7d0      	b.n	8008574 <__hexnan+0xd4>
 80085d2:	2004      	movs	r0, #4
 80085d4:	e7d5      	b.n	8008582 <__hexnan+0xe2>

080085d6 <__ascii_mbtowc>:
 80085d6:	b082      	sub	sp, #8
 80085d8:	b901      	cbnz	r1, 80085dc <__ascii_mbtowc+0x6>
 80085da:	a901      	add	r1, sp, #4
 80085dc:	b142      	cbz	r2, 80085f0 <__ascii_mbtowc+0x1a>
 80085de:	b14b      	cbz	r3, 80085f4 <__ascii_mbtowc+0x1e>
 80085e0:	7813      	ldrb	r3, [r2, #0]
 80085e2:	600b      	str	r3, [r1, #0]
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	1e10      	subs	r0, r2, #0
 80085e8:	bf18      	it	ne
 80085ea:	2001      	movne	r0, #1
 80085ec:	b002      	add	sp, #8
 80085ee:	4770      	bx	lr
 80085f0:	4610      	mov	r0, r2
 80085f2:	e7fb      	b.n	80085ec <__ascii_mbtowc+0x16>
 80085f4:	f06f 0001 	mvn.w	r0, #1
 80085f8:	e7f8      	b.n	80085ec <__ascii_mbtowc+0x16>

080085fa <_realloc_r>:
 80085fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fe:	4680      	mov	r8, r0
 8008600:	4615      	mov	r5, r2
 8008602:	460c      	mov	r4, r1
 8008604:	b921      	cbnz	r1, 8008610 <_realloc_r+0x16>
 8008606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	4611      	mov	r1, r2
 800860c:	f7fd be60 	b.w	80062d0 <_malloc_r>
 8008610:	b92a      	cbnz	r2, 800861e <_realloc_r+0x24>
 8008612:	f7fd fde9 	bl	80061e8 <_free_r>
 8008616:	2400      	movs	r4, #0
 8008618:	4620      	mov	r0, r4
 800861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861e:	f000 f840 	bl	80086a2 <_malloc_usable_size_r>
 8008622:	4285      	cmp	r5, r0
 8008624:	4606      	mov	r6, r0
 8008626:	d802      	bhi.n	800862e <_realloc_r+0x34>
 8008628:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800862c:	d8f4      	bhi.n	8008618 <_realloc_r+0x1e>
 800862e:	4629      	mov	r1, r5
 8008630:	4640      	mov	r0, r8
 8008632:	f7fd fe4d 	bl	80062d0 <_malloc_r>
 8008636:	4607      	mov	r7, r0
 8008638:	2800      	cmp	r0, #0
 800863a:	d0ec      	beq.n	8008616 <_realloc_r+0x1c>
 800863c:	42b5      	cmp	r5, r6
 800863e:	462a      	mov	r2, r5
 8008640:	4621      	mov	r1, r4
 8008642:	bf28      	it	cs
 8008644:	4632      	movcs	r2, r6
 8008646:	f7ff fc45 	bl	8007ed4 <memcpy>
 800864a:	4621      	mov	r1, r4
 800864c:	4640      	mov	r0, r8
 800864e:	f7fd fdcb 	bl	80061e8 <_free_r>
 8008652:	463c      	mov	r4, r7
 8008654:	e7e0      	b.n	8008618 <_realloc_r+0x1e>

08008656 <__ascii_wctomb>:
 8008656:	4603      	mov	r3, r0
 8008658:	4608      	mov	r0, r1
 800865a:	b141      	cbz	r1, 800866e <__ascii_wctomb+0x18>
 800865c:	2aff      	cmp	r2, #255	@ 0xff
 800865e:	d904      	bls.n	800866a <__ascii_wctomb+0x14>
 8008660:	228a      	movs	r2, #138	@ 0x8a
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	4770      	bx	lr
 800866a:	700a      	strb	r2, [r1, #0]
 800866c:	2001      	movs	r0, #1
 800866e:	4770      	bx	lr

08008670 <fiprintf>:
 8008670:	b40e      	push	{r1, r2, r3}
 8008672:	b503      	push	{r0, r1, lr}
 8008674:	4601      	mov	r1, r0
 8008676:	ab03      	add	r3, sp, #12
 8008678:	4805      	ldr	r0, [pc, #20]	@ (8008690 <fiprintf+0x20>)
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f000 f83f 	bl	8008704 <_vfiprintf_r>
 8008686:	b002      	add	sp, #8
 8008688:	f85d eb04 	ldr.w	lr, [sp], #4
 800868c:	b003      	add	sp, #12
 800868e:	4770      	bx	lr
 8008690:	20000018 	.word	0x20000018

08008694 <abort>:
 8008694:	b508      	push	{r3, lr}
 8008696:	2006      	movs	r0, #6
 8008698:	f000 fa08 	bl	8008aac <raise>
 800869c:	2001      	movs	r0, #1
 800869e:	f7f8 ff4c 	bl	800153a <_exit>

080086a2 <_malloc_usable_size_r>:
 80086a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a6:	1f18      	subs	r0, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bfbc      	itt	lt
 80086ac:	580b      	ldrlt	r3, [r1, r0]
 80086ae:	18c0      	addlt	r0, r0, r3
 80086b0:	4770      	bx	lr

080086b2 <__sfputc_r>:
 80086b2:	6893      	ldr	r3, [r2, #8]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	b410      	push	{r4}
 80086ba:	6093      	str	r3, [r2, #8]
 80086bc:	da08      	bge.n	80086d0 <__sfputc_r+0x1e>
 80086be:	6994      	ldr	r4, [r2, #24]
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	db01      	blt.n	80086c8 <__sfputc_r+0x16>
 80086c4:	290a      	cmp	r1, #10
 80086c6:	d103      	bne.n	80086d0 <__sfputc_r+0x1e>
 80086c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086cc:	f000 b932 	b.w	8008934 <__swbuf_r>
 80086d0:	6813      	ldr	r3, [r2, #0]
 80086d2:	1c58      	adds	r0, r3, #1
 80086d4:	6010      	str	r0, [r2, #0]
 80086d6:	7019      	strb	r1, [r3, #0]
 80086d8:	4608      	mov	r0, r1
 80086da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <__sfputs_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	4614      	mov	r4, r2
 80086e8:	18d5      	adds	r5, r2, r3
 80086ea:	42ac      	cmp	r4, r5
 80086ec:	d101      	bne.n	80086f2 <__sfputs_r+0x12>
 80086ee:	2000      	movs	r0, #0
 80086f0:	e007      	b.n	8008702 <__sfputs_r+0x22>
 80086f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f6:	463a      	mov	r2, r7
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7ff ffda 	bl	80086b2 <__sfputc_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d1f3      	bne.n	80086ea <__sfputs_r+0xa>
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008704 <_vfiprintf_r>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	460d      	mov	r5, r1
 800870a:	b09d      	sub	sp, #116	@ 0x74
 800870c:	4614      	mov	r4, r2
 800870e:	4698      	mov	r8, r3
 8008710:	4606      	mov	r6, r0
 8008712:	b118      	cbz	r0, 800871c <_vfiprintf_r+0x18>
 8008714:	6a03      	ldr	r3, [r0, #32]
 8008716:	b90b      	cbnz	r3, 800871c <_vfiprintf_r+0x18>
 8008718:	f7fc fdf8 	bl	800530c <__sinit>
 800871c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800871e:	07d9      	lsls	r1, r3, #31
 8008720:	d405      	bmi.n	800872e <_vfiprintf_r+0x2a>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	059a      	lsls	r2, r3, #22
 8008726:	d402      	bmi.n	800872e <_vfiprintf_r+0x2a>
 8008728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800872a:	f7fc ff06 	bl	800553a <__retarget_lock_acquire_recursive>
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	071b      	lsls	r3, r3, #28
 8008732:	d501      	bpl.n	8008738 <_vfiprintf_r+0x34>
 8008734:	692b      	ldr	r3, [r5, #16]
 8008736:	b99b      	cbnz	r3, 8008760 <_vfiprintf_r+0x5c>
 8008738:	4629      	mov	r1, r5
 800873a:	4630      	mov	r0, r6
 800873c:	f000 f938 	bl	80089b0 <__swsetup_r>
 8008740:	b170      	cbz	r0, 8008760 <_vfiprintf_r+0x5c>
 8008742:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008744:	07dc      	lsls	r4, r3, #31
 8008746:	d504      	bpl.n	8008752 <_vfiprintf_r+0x4e>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	b01d      	add	sp, #116	@ 0x74
 800874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	0598      	lsls	r0, r3, #22
 8008756:	d4f7      	bmi.n	8008748 <_vfiprintf_r+0x44>
 8008758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800875a:	f7fc feef 	bl	800553c <__retarget_lock_release_recursive>
 800875e:	e7f3      	b.n	8008748 <_vfiprintf_r+0x44>
 8008760:	2300      	movs	r3, #0
 8008762:	9309      	str	r3, [sp, #36]	@ 0x24
 8008764:	2320      	movs	r3, #32
 8008766:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800876a:	f8cd 800c 	str.w	r8, [sp, #12]
 800876e:	2330      	movs	r3, #48	@ 0x30
 8008770:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008920 <_vfiprintf_r+0x21c>
 8008774:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008778:	f04f 0901 	mov.w	r9, #1
 800877c:	4623      	mov	r3, r4
 800877e:	469a      	mov	sl, r3
 8008780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008784:	b10a      	cbz	r2, 800878a <_vfiprintf_r+0x86>
 8008786:	2a25      	cmp	r2, #37	@ 0x25
 8008788:	d1f9      	bne.n	800877e <_vfiprintf_r+0x7a>
 800878a:	ebba 0b04 	subs.w	fp, sl, r4
 800878e:	d00b      	beq.n	80087a8 <_vfiprintf_r+0xa4>
 8008790:	465b      	mov	r3, fp
 8008792:	4622      	mov	r2, r4
 8008794:	4629      	mov	r1, r5
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ffa2 	bl	80086e0 <__sfputs_r>
 800879c:	3001      	adds	r0, #1
 800879e:	f000 80a7 	beq.w	80088f0 <_vfiprintf_r+0x1ec>
 80087a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a4:	445a      	add	r2, fp
 80087a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 809f 	beq.w	80088f0 <_vfiprintf_r+0x1ec>
 80087b2:	2300      	movs	r3, #0
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295
 80087b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087bc:	f10a 0a01 	add.w	sl, sl, #1
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ca:	4654      	mov	r4, sl
 80087cc:	2205      	movs	r2, #5
 80087ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d2:	4853      	ldr	r0, [pc, #332]	@ (8008920 <_vfiprintf_r+0x21c>)
 80087d4:	f7f7 fcfc 	bl	80001d0 <memchr>
 80087d8:	9a04      	ldr	r2, [sp, #16]
 80087da:	b9d8      	cbnz	r0, 8008814 <_vfiprintf_r+0x110>
 80087dc:	06d1      	lsls	r1, r2, #27
 80087de:	bf44      	itt	mi
 80087e0:	2320      	movmi	r3, #32
 80087e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e6:	0713      	lsls	r3, r2, #28
 80087e8:	bf44      	itt	mi
 80087ea:	232b      	movmi	r3, #43	@ 0x2b
 80087ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f0:	f89a 3000 	ldrb.w	r3, [sl]
 80087f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087f6:	d015      	beq.n	8008824 <_vfiprintf_r+0x120>
 80087f8:	9a07      	ldr	r2, [sp, #28]
 80087fa:	4654      	mov	r4, sl
 80087fc:	2000      	movs	r0, #0
 80087fe:	f04f 0c0a 	mov.w	ip, #10
 8008802:	4621      	mov	r1, r4
 8008804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008808:	3b30      	subs	r3, #48	@ 0x30
 800880a:	2b09      	cmp	r3, #9
 800880c:	d94b      	bls.n	80088a6 <_vfiprintf_r+0x1a2>
 800880e:	b1b0      	cbz	r0, 800883e <_vfiprintf_r+0x13a>
 8008810:	9207      	str	r2, [sp, #28]
 8008812:	e014      	b.n	800883e <_vfiprintf_r+0x13a>
 8008814:	eba0 0308 	sub.w	r3, r0, r8
 8008818:	fa09 f303 	lsl.w	r3, r9, r3
 800881c:	4313      	orrs	r3, r2
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	46a2      	mov	sl, r4
 8008822:	e7d2      	b.n	80087ca <_vfiprintf_r+0xc6>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	1d19      	adds	r1, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	9103      	str	r1, [sp, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfbb      	ittet	lt
 8008830:	425b      	neglt	r3, r3
 8008832:	f042 0202 	orrlt.w	r2, r2, #2
 8008836:	9307      	strge	r3, [sp, #28]
 8008838:	9307      	strlt	r3, [sp, #28]
 800883a:	bfb8      	it	lt
 800883c:	9204      	strlt	r2, [sp, #16]
 800883e:	7823      	ldrb	r3, [r4, #0]
 8008840:	2b2e      	cmp	r3, #46	@ 0x2e
 8008842:	d10a      	bne.n	800885a <_vfiprintf_r+0x156>
 8008844:	7863      	ldrb	r3, [r4, #1]
 8008846:	2b2a      	cmp	r3, #42	@ 0x2a
 8008848:	d132      	bne.n	80088b0 <_vfiprintf_r+0x1ac>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	9203      	str	r2, [sp, #12]
 8008852:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008856:	3402      	adds	r4, #2
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008930 <_vfiprintf_r+0x22c>
 800885e:	7821      	ldrb	r1, [r4, #0]
 8008860:	2203      	movs	r2, #3
 8008862:	4650      	mov	r0, sl
 8008864:	f7f7 fcb4 	bl	80001d0 <memchr>
 8008868:	b138      	cbz	r0, 800887a <_vfiprintf_r+0x176>
 800886a:	9b04      	ldr	r3, [sp, #16]
 800886c:	eba0 000a 	sub.w	r0, r0, sl
 8008870:	2240      	movs	r2, #64	@ 0x40
 8008872:	4082      	lsls	r2, r0
 8008874:	4313      	orrs	r3, r2
 8008876:	3401      	adds	r4, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4829      	ldr	r0, [pc, #164]	@ (8008924 <_vfiprintf_r+0x220>)
 8008880:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008884:	2206      	movs	r2, #6
 8008886:	f7f7 fca3 	bl	80001d0 <memchr>
 800888a:	2800      	cmp	r0, #0
 800888c:	d03f      	beq.n	800890e <_vfiprintf_r+0x20a>
 800888e:	4b26      	ldr	r3, [pc, #152]	@ (8008928 <_vfiprintf_r+0x224>)
 8008890:	bb1b      	cbnz	r3, 80088da <_vfiprintf_r+0x1d6>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3307      	adds	r3, #7
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	3308      	adds	r3, #8
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	443b      	add	r3, r7
 80088a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a4:	e76a      	b.n	800877c <_vfiprintf_r+0x78>
 80088a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088aa:	460c      	mov	r4, r1
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7a8      	b.n	8008802 <_vfiprintf_r+0xfe>
 80088b0:	2300      	movs	r3, #0
 80088b2:	3401      	adds	r4, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c2:	3a30      	subs	r2, #48	@ 0x30
 80088c4:	2a09      	cmp	r2, #9
 80088c6:	d903      	bls.n	80088d0 <_vfiprintf_r+0x1cc>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0c6      	beq.n	800885a <_vfiprintf_r+0x156>
 80088cc:	9105      	str	r1, [sp, #20]
 80088ce:	e7c4      	b.n	800885a <_vfiprintf_r+0x156>
 80088d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d4:	4604      	mov	r4, r0
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f0      	b.n	80088bc <_vfiprintf_r+0x1b8>
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	462a      	mov	r2, r5
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <_vfiprintf_r+0x228>)
 80088e2:	a904      	add	r1, sp, #16
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fb feb9 	bl	800465c <_printf_float>
 80088ea:	4607      	mov	r7, r0
 80088ec:	1c78      	adds	r0, r7, #1
 80088ee:	d1d6      	bne.n	800889e <_vfiprintf_r+0x19a>
 80088f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d405      	bmi.n	8008902 <_vfiprintf_r+0x1fe>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	059a      	lsls	r2, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_vfiprintf_r+0x1fe>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7fc fe1d 	bl	800553c <__retarget_lock_release_recursive>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	065b      	lsls	r3, r3, #25
 8008906:	f53f af1f 	bmi.w	8008748 <_vfiprintf_r+0x44>
 800890a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800890c:	e71e      	b.n	800874c <_vfiprintf_r+0x48>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <_vfiprintf_r+0x228>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4630      	mov	r0, r6
 800891a:	f7fc f937 	bl	8004b8c <_printf_i>
 800891e:	e7e4      	b.n	80088ea <_vfiprintf_r+0x1e6>
 8008920:	08008fc9 	.word	0x08008fc9
 8008924:	08008fd3 	.word	0x08008fd3
 8008928:	0800465d 	.word	0x0800465d
 800892c:	080086e1 	.word	0x080086e1
 8008930:	08008fcf 	.word	0x08008fcf

08008934 <__swbuf_r>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	460e      	mov	r6, r1
 8008938:	4614      	mov	r4, r2
 800893a:	4605      	mov	r5, r0
 800893c:	b118      	cbz	r0, 8008946 <__swbuf_r+0x12>
 800893e:	6a03      	ldr	r3, [r0, #32]
 8008940:	b90b      	cbnz	r3, 8008946 <__swbuf_r+0x12>
 8008942:	f7fc fce3 	bl	800530c <__sinit>
 8008946:	69a3      	ldr	r3, [r4, #24]
 8008948:	60a3      	str	r3, [r4, #8]
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	071a      	lsls	r2, r3, #28
 800894e:	d501      	bpl.n	8008954 <__swbuf_r+0x20>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	b943      	cbnz	r3, 8008966 <__swbuf_r+0x32>
 8008954:	4621      	mov	r1, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f82a 	bl	80089b0 <__swsetup_r>
 800895c:	b118      	cbz	r0, 8008966 <__swbuf_r+0x32>
 800895e:	f04f 37ff 	mov.w	r7, #4294967295
 8008962:	4638      	mov	r0, r7
 8008964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	1a98      	subs	r0, r3, r2
 800896c:	6963      	ldr	r3, [r4, #20]
 800896e:	b2f6      	uxtb	r6, r6
 8008970:	4283      	cmp	r3, r0
 8008972:	4637      	mov	r7, r6
 8008974:	dc05      	bgt.n	8008982 <__swbuf_r+0x4e>
 8008976:	4621      	mov	r1, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff fa47 	bl	8007e0c <_fflush_r>
 800897e:	2800      	cmp	r0, #0
 8008980:	d1ed      	bne.n	800895e <__swbuf_r+0x2a>
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	3b01      	subs	r3, #1
 8008986:	60a3      	str	r3, [r4, #8]
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	701e      	strb	r6, [r3, #0]
 8008990:	6962      	ldr	r2, [r4, #20]
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	429a      	cmp	r2, r3
 8008996:	d004      	beq.n	80089a2 <__swbuf_r+0x6e>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	d5e1      	bpl.n	8008962 <__swbuf_r+0x2e>
 800899e:	2e0a      	cmp	r6, #10
 80089a0:	d1df      	bne.n	8008962 <__swbuf_r+0x2e>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7ff fa31 	bl	8007e0c <_fflush_r>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d0d9      	beq.n	8008962 <__swbuf_r+0x2e>
 80089ae:	e7d6      	b.n	800895e <__swbuf_r+0x2a>

080089b0 <__swsetup_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4b29      	ldr	r3, [pc, #164]	@ (8008a58 <__swsetup_r+0xa8>)
 80089b4:	4605      	mov	r5, r0
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	460c      	mov	r4, r1
 80089ba:	b118      	cbz	r0, 80089c4 <__swsetup_r+0x14>
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	b90b      	cbnz	r3, 80089c4 <__swsetup_r+0x14>
 80089c0:	f7fc fca4 	bl	800530c <__sinit>
 80089c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c8:	0719      	lsls	r1, r3, #28
 80089ca:	d422      	bmi.n	8008a12 <__swsetup_r+0x62>
 80089cc:	06da      	lsls	r2, r3, #27
 80089ce:	d407      	bmi.n	80089e0 <__swsetup_r+0x30>
 80089d0:	2209      	movs	r2, #9
 80089d2:	602a      	str	r2, [r5, #0]
 80089d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	e033      	b.n	8008a48 <__swsetup_r+0x98>
 80089e0:	0758      	lsls	r0, r3, #29
 80089e2:	d512      	bpl.n	8008a0a <__swsetup_r+0x5a>
 80089e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089e6:	b141      	cbz	r1, 80089fa <__swsetup_r+0x4a>
 80089e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <__swsetup_r+0x46>
 80089f0:	4628      	mov	r0, r5
 80089f2:	f7fd fbf9 	bl	80061e8 <_free_r>
 80089f6:	2300      	movs	r3, #0
 80089f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	2300      	movs	r3, #0
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f043 0308 	orr.w	r3, r3, #8
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	b94b      	cbnz	r3, 8008a2a <__swsetup_r+0x7a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a20:	d003      	beq.n	8008a2a <__swsetup_r+0x7a>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 f883 	bl	8008b30 <__smakebuf_r>
 8008a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2e:	f013 0201 	ands.w	r2, r3, #1
 8008a32:	d00a      	beq.n	8008a4a <__swsetup_r+0x9a>
 8008a34:	2200      	movs	r2, #0
 8008a36:	60a2      	str	r2, [r4, #8]
 8008a38:	6962      	ldr	r2, [r4, #20]
 8008a3a:	4252      	negs	r2, r2
 8008a3c:	61a2      	str	r2, [r4, #24]
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	b942      	cbnz	r2, 8008a54 <__swsetup_r+0xa4>
 8008a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a46:	d1c5      	bne.n	80089d4 <__swsetup_r+0x24>
 8008a48:	bd38      	pop	{r3, r4, r5, pc}
 8008a4a:	0799      	lsls	r1, r3, #30
 8008a4c:	bf58      	it	pl
 8008a4e:	6962      	ldrpl	r2, [r4, #20]
 8008a50:	60a2      	str	r2, [r4, #8]
 8008a52:	e7f4      	b.n	8008a3e <__swsetup_r+0x8e>
 8008a54:	2000      	movs	r0, #0
 8008a56:	e7f7      	b.n	8008a48 <__swsetup_r+0x98>
 8008a58:	20000018 	.word	0x20000018

08008a5c <_raise_r>:
 8008a5c:	291f      	cmp	r1, #31
 8008a5e:	b538      	push	{r3, r4, r5, lr}
 8008a60:	4605      	mov	r5, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	d904      	bls.n	8008a70 <_raise_r+0x14>
 8008a66:	2316      	movs	r3, #22
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a72:	b112      	cbz	r2, 8008a7a <_raise_r+0x1e>
 8008a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a78:	b94b      	cbnz	r3, 8008a8e <_raise_r+0x32>
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f830 	bl	8008ae0 <_getpid_r>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4601      	mov	r1, r0
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a8a:	f000 b817 	b.w	8008abc <_kill_r>
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d00a      	beq.n	8008aa8 <_raise_r+0x4c>
 8008a92:	1c59      	adds	r1, r3, #1
 8008a94:	d103      	bne.n	8008a9e <_raise_r+0x42>
 8008a96:	2316      	movs	r3, #22
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	e7e7      	b.n	8008a6e <_raise_r+0x12>
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4798      	blx	r3
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7e0      	b.n	8008a6e <_raise_r+0x12>

08008aac <raise>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	@ (8008ab8 <raise+0xc>)
 8008aae:	4601      	mov	r1, r0
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	f7ff bfd3 	b.w	8008a5c <_raise_r>
 8008ab6:	bf00      	nop
 8008ab8:	20000018 	.word	0x20000018

08008abc <_kill_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_kill_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f8 fd26 	bl	800151a <_kill>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_kill_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_kill_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	20000420 	.word	0x20000420

08008ae0 <_getpid_r>:
 8008ae0:	f7f8 bd13 	b.w	800150a <_getpid>

08008ae4 <__swhatbuf_r>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aec:	2900      	cmp	r1, #0
 8008aee:	b096      	sub	sp, #88	@ 0x58
 8008af0:	4615      	mov	r5, r2
 8008af2:	461e      	mov	r6, r3
 8008af4:	da0d      	bge.n	8008b12 <__swhatbuf_r+0x2e>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008afc:	f04f 0100 	mov.w	r1, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2340      	movne	r3, #64	@ 0x40
 8008b04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b08:	2000      	movs	r0, #0
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	b016      	add	sp, #88	@ 0x58
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	466a      	mov	r2, sp
 8008b14:	f000 f848 	bl	8008ba8 <_fstat_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	dbec      	blt.n	8008af6 <__swhatbuf_r+0x12>
 8008b1c:	9901      	ldr	r1, [sp, #4]
 8008b1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b26:	4259      	negs	r1, r3
 8008b28:	4159      	adcs	r1, r3
 8008b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b2e:	e7eb      	b.n	8008b08 <__swhatbuf_r+0x24>

08008b30 <__smakebuf_r>:
 8008b30:	898b      	ldrh	r3, [r1, #12]
 8008b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b34:	079d      	lsls	r5, r3, #30
 8008b36:	4606      	mov	r6, r0
 8008b38:	460c      	mov	r4, r1
 8008b3a:	d507      	bpl.n	8008b4c <__smakebuf_r+0x1c>
 8008b3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	2301      	movs	r3, #1
 8008b46:	6163      	str	r3, [r4, #20]
 8008b48:	b003      	add	sp, #12
 8008b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4c:	ab01      	add	r3, sp, #4
 8008b4e:	466a      	mov	r2, sp
 8008b50:	f7ff ffc8 	bl	8008ae4 <__swhatbuf_r>
 8008b54:	9f00      	ldr	r7, [sp, #0]
 8008b56:	4605      	mov	r5, r0
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7fd fbb8 	bl	80062d0 <_malloc_r>
 8008b60:	b948      	cbnz	r0, 8008b76 <__smakebuf_r+0x46>
 8008b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b66:	059a      	lsls	r2, r3, #22
 8008b68:	d4ee      	bmi.n	8008b48 <__smakebuf_r+0x18>
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	f043 0302 	orr.w	r3, r3, #2
 8008b72:	81a3      	strh	r3, [r4, #12]
 8008b74:	e7e2      	b.n	8008b3c <__smakebuf_r+0xc>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	6020      	str	r0, [r4, #0]
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b86:	b15b      	cbz	r3, 8008ba0 <__smakebuf_r+0x70>
 8008b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f000 f81d 	bl	8008bcc <_isatty_r>
 8008b92:	b128      	cbz	r0, 8008ba0 <__smakebuf_r+0x70>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	431d      	orrs	r5, r3
 8008ba4:	81a5      	strh	r5, [r4, #12]
 8008ba6:	e7cf      	b.n	8008b48 <__smakebuf_r+0x18>

08008ba8 <_fstat_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d07      	ldr	r5, [pc, #28]	@ (8008bc8 <_fstat_r+0x20>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	f7f8 fd10 	bl	80015da <_fstat>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d102      	bne.n	8008bc4 <_fstat_r+0x1c>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	b103      	cbz	r3, 8008bc4 <_fstat_r+0x1c>
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000420 	.word	0x20000420

08008bcc <_isatty_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d06      	ldr	r5, [pc, #24]	@ (8008be8 <_isatty_r+0x1c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7f8 fd0f 	bl	80015fa <_isatty>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_isatty_r+0x1a>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_isatty_r+0x1a>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000420 	.word	0x20000420

08008bec <_init>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_fini>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr
